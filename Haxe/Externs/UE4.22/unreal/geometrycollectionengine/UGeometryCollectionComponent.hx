/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  GeometryCollectionComponent
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/GeometryCollectionComponent.h")
@:uextern @:uclass extern class UGeometryCollectionComponent extends unreal.UMeshComponent {
  @:uproperty public var DummyBoxComponent : unreal.UBoxComponent;
  @:uproperty public var CacheParameters : unreal.geometrycollectionengine.FGeomComponentCacheParameters;
  @:uproperty public var InitialAngularVelocity : unreal.FVector;
  @:uproperty public var InitialLinearVelocity : unreal.FVector;
  @:uproperty public var InitialVelocityType : unreal.geometrycollectionsimulationcore.EInitialVelocityTypeEnum;
  
  /**
    Coefficient of Restitution (aka Bouncyness)
  **/
  @:uproperty public var AngularSleepingThreshold : unreal.Float32;
  
  /**
    Uniform Friction
  **/
  @:uproperty public var LinearSleepingThreshold : unreal.Float32;
  
  /**
    Coefficient of Restitution (aka Bouncyness)
  **/
  @:uproperty public var Bouncyness : unreal.Float32;
  
  /**
    Uniform Friction
  **/
  @:uproperty public var Friction : unreal.Float32;
  
  /**
    Number of particles on the triangulated surface to use for collisions.
  **/
  @:uproperty public var CollisionParticlesFraction : unreal.Float32;
  
  /**
    Smallest allowable mass (def:0.1)
  **/
  @:uproperty public var MinimumMassClamp : unreal.Float32;
  
  /**
    Total Mass of Collection (def : 1.0)
  **/
  @:uproperty public var Mass : unreal.Float32;
  
  /**
    Mass As Density (def:false)
  **/
  @:uproperty public var MassAsDensity : Bool;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 10)
  **/
  @:uproperty public var MaxLevelSetResolution : unreal.Int32;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 5)
  **/
  @:uproperty public var MinLevelSetResolution : unreal.Int32;
  
  /**
    *  CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var ImplicitType : unreal.geometrycollectionsimulationcore.EImplicitTypeEnum;
  
  /**
    *  CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var CollisionType : unreal.geometrycollectionsimulationcore.ECollisionTypeEnum;
  
  /**
    Damage threshold for clusters at differnet levels.
  **/
  @:uproperty public var DamageThreshold : unreal.TArray<unreal.Float32>;
  
  /**
    Maximum level for cluster breaks
  **/
  @:uproperty public var MaxClusterLevel : unreal.Int32;
  
  /**
    *  CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var EnableClustering : Bool;
  
  /**
    *  ObjectType defines how to initialize the rigid objects state, Kinematic, Sleeping, Dynamic.
  **/
  @:uproperty public var ObjectType : unreal.geometrycollectionsimulationcore.EObjectTypeEnum;
  
  /**
    When Simulating is enabled the Component will initialize its rigid bodies within the solver.
  **/
  @:uproperty public var Simulating : Bool;
  
  /**
    FieldSystem
  **/
  @:uproperty public var FieldSystem : unreal.fieldsystemengine.AFieldSystemActor;
  
  /**
    DynamicCollection
  **/
  @:uproperty public var DynamicCollection : unreal.geometrycollectionengine.UGeometryCollection;
  @:uproperty public var RestCollection : unreal.geometrycollectionengine.UGeometryCollection;
  
  /**
    Chaos RBD Solver
  **/
  @:uproperty public var ChaosSolverActor : unreal.chaossolverengine.AChaosSolverActor;
  
}
