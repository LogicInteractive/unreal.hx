/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  AGeometryCollectionRenderLevelSetActor
  An actor representing the collection of data necessary to
  render volumes.  This references a ray marching material, which
  is used internally by a post process component blendable.  This
  is a workflow that can be improved with a deeper implementation
  in the future if we decide to.  Note that behavior with multiple
  render level set actors isn't currently supported very well,
  but could be improved in the future
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/GeometryCollectionRenderLevelSetActor.h")
@:uextern @:uclass extern class AGeometryCollectionRenderLevelSetActor extends unreal.AActor {
  
  /**
    Enable or disable rendering
  **/
  @:uproperty public var RenderVolumeBoundingBox : Bool;
  
  /**
    Enable or disable rendering
  **/
  @:uproperty public var Enabled : Bool;
  
  /**
    Isovalue of the level set to use for surface reconstruction.  Generally you want
    this to be zero, but it can be useful for exploring the distance values to make
    this negative to see the interior structure of the levelset
  **/
  @:uproperty public var Isovalue : unreal.Float32;
  
  /**
    Surface tolerance used for rendering.  When surface reconstruction is noisy,
    try tweaking this value
  **/
  @:uproperty public var SurfaceTolerance : unreal.Float32;
  
  /**
    Material that performs ray marching.  Note this must have certain parameters in order
    to work correctly
  **/
  @:uproperty public var RayMarchMaterial : unreal.UMaterial;
  
  /**
    Volume texture to fill
  **/
  @:uproperty public var TargetVolumeTexture : unreal.UVolumeTexture;
  
}
