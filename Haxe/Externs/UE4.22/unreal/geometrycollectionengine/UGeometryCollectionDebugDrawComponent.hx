/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  class responsible for debug drawing functionality for GeometryCollectionComponents
  @todo: formalize the idea of a "debug draw mode" in some class hierarchy to make it easy
  to implement new types of visualizations
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/GeometryCollectionDebugDrawComponent.h")
@:uextern @:uclass extern class UGeometryCollectionDebugDrawComponent extends unreal.UMeshComponent {
  
  /**
    Color tint used for visualizing all vertex elements.
  **/
  @:uproperty public var VertexColor : unreal.FLinearColor;
  
  /**
    Enable vertex normals visualization.
  **/
  @:uproperty public var bDebugDrawVertexNormal : Bool;
  
  /**
    Enable vertex indices visualization.
  **/
  @:uproperty public var bDebugDrawVertexIndex : Bool;
  
  /**
    Enable vertex visualization.
  **/
  @:uproperty public var bDebugDrawVertex : Bool;
  
  /**
    Color tint used for visualizing all faces elements.
  **/
  @:uproperty public var FaceColor : unreal.FLinearColor;
  
  /**
    Index of the single face to visualize.
  **/
  @:uproperty public var SingleFaceIdx : unreal.Int32;
  
  /**
    Enable single face visualization.
  **/
  @:uproperty public var bDebugDrawSingleFace : Bool;
  
  /**
    Enable face normals visualization.
  **/
  @:uproperty public var bDebugDrawFaceNormal : Bool;
  
  /**
    Enable face indices visualization.
  **/
  @:uproperty public var bDebugDrawFaceIndex : Bool;
  
  /**
    Enable face visualization.
  **/
  @:uproperty public var bDebugDrawFace : Bool;
  
  /**
    Color tint for the breaking visualization.
  **/
  @:uproperty public var BreakingColor : unreal.FLinearColor;
  
  /**
    Enable breaking regions visualization.
  **/
  @:uproperty public var bDebugDrawBreakingRegionData : Bool;
  
  /**
    Enable breaking faces visualization.
  **/
  @:uproperty public var bDebugDrawBreakingFace : Bool;
  
  /**
    Enable proximity visualization.
  **/
  @:uproperty public var bDebugDrawProximity : Bool;
  
  /**
    Color tint used for visualizing all geometry elements.
  **/
  @:uproperty public var GeometryColor : unreal.FLinearColor;
  
  /**
    Enable bounding boxes visualization.
  **/
  @:uproperty public var bDebugDrawBoundingBox : Bool;
  
  /**
    Enable transform indices visualization.
  **/
  @:uproperty public var bDebugDrawTransformIndex : Bool;
  
  /**
    Enable transform visualization.
  **/
  @:uproperty public var bDebugDrawTransform : Bool;
  
  /**
    Transform index of the level set to visualize.
  **/
  @:uproperty public var LevelSetIndex : unreal.Int32;
  
  /**
    Enable to visualize the selected level sets at the world origin.
  **/
  @:uproperty public var bRenderLevelSetAtOrigin : Bool;
  
  /**
    Enable Level Set visualization.
  **/
  @:uproperty public var bDebugDrawLevelSet : Bool;
  
  /**
    Level Set singleton actor, containing the Render properties. Automatically populated at play time.
  **/
  @:uproperty public var GeometryCollectionRenderLevelSet : unreal.geometrycollectionengine.AGeometryCollectionRenderLevelSetActor;
  
  /**
    Singleton actor, containing the debug draw properties. Automatically populated at play time.
  **/
  @:uproperty public var GeometryCollectionDebugDrawActor : unreal.geometrycollectionengine.AGeometryCollectionDebugDrawActor;
  
}
