/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.runtimeassetcache;

@:umodule("RuntimeAssetCache")
@:glueCppIncludes("RuntimeAssetCacheBuilders.h")
@:uextern @:uclass extern class URuntimeAssetCacheBuilder_ObjectBase extends unreal.UObject implements unreal.runtimeassetcache.IRuntimeAssetCacheBuilder {
  
  /**
    Call this to get the asset named AssetName from the runtime asset cache.
    If the asset does not exist on disk, then OnAssetCacheMiss will be called.
    Implement OnAssetCacheMiss in order to create the asset that you want cached.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetFromCacheAsync(OnComplete : unreal.Const<unreal.PRef<unreal.runtimeassetcache.FOnAssetCacheComplete>>) : Void;
  @:ufunction @:final public function GetFromCacheAsyncComplete(Handle : unreal.Int32, DataPtr : unreal.runtimeassetcache.FVoidPtrParam) : Void;
  
  /**
    When you get OnAssetCacheMiss you need to load/create the asset that is missing.
    Call SaveNewAssetToCache after you're finished creating the asset to save it back into the cache for next time.
    This will then trigger OnAssetCacheComplete like normal, so you don't need additional code to handle it.
  **/
  @:ufunction(BlueprintNativeEvent) public function OnAssetCacheMiss() : Void;
  
  /**
    Call SaveNewAssetToCache to save an asset back into the cache for next time.
    This will then trigger OnAssetCacheComplete like normal, so you don't need additional code to handle it.
  **/
  @:ufunction(BlueprintCallable) @:final public function SaveNewAssetToCache(NewAsset : unreal.UObject) : Void;
  
  /**
    The name of the asset. This should be unique per asset, and is used to look it up from the cache. This should be something that can be known without having Asset in memory (so we can look it up in the cache).
  **/
  @:uproperty public var AssetName : unreal.FString;
  
  /**
    The asset version. Changing this will force a new version of the asset to get cached.
  **/
  @:uproperty public var AssetVersion : unreal.Int32;
  // RuntimeAssetCacheBuilder interface implementation
  
}
