/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.hotfix;

/**
  Update manager
  
  Checks the system and/or backend for the possibility of a patch and hotfix
  Will not apply a hotfix if a pending patch is available
  Notifies the game of the result of the check
  - possibly requires UI to prevent user from playing if a patch is available
  - possibly requires UI to prevent user from player if a hotfix requires a reload of existing data
**/
@:umodule("Hotfix")
@:glueCppIncludes("UpdateManager.h")
@:uextern @:uclass extern class UUpdateManager extends unreal.UObject {
  
  /**
    Result of the last hotfix
  **/
  @:uproperty private var LastHotfixResult : unreal.hotfix.EHotfixResult;
  
  /**
    Result of the last patch check
  **/
  @:uproperty private var LastPatchCheckResult : unreal.hotfix.EPatchCheckResult;
  
  /**
    What was the maximum number of pending async loads we've seen so far
  **/
  @:uproperty private var WorstNumFilesPendingLoadViewed : unreal.Int32;
  
  /**
    Current state of the update
  **/
  @:uproperty private var CurrentUpdateState : unreal.hotfix.EUpdateState;
  
  /**
    If application is suspended longer than this, trigger an update check when resuming
  **/
  @:uproperty private var AppSuspendedUpdateCheckTimeSeconds : unreal.Int32;
  
  /**
    Amount of time to wait at the end of the entire check before notifying listening entities (availability check only)
  **/
  @:uproperty private var UpdateCheckAvailabilityCompleteDelay : unreal.Float32;
  
  /**
    Amount of time to wait between the internal hotfix availability check completing and advancing to the next stage
  **/
  @:uproperty private var HotfixAvailabilityCheckCompleteDelay : unreal.Float32;
  
  /**
    Amount of time to wait at the end of the entire check before notifying listening entities
  **/
  @:uproperty private var UpdateCheckCompleteDelay : unreal.Float32;
  
  /**
    Amount of time to wait between the internal hotfix check completing and advancing to the next stage
  **/
  @:uproperty private var HotfixCheckCompleteDelay : unreal.Float32;
  
}
