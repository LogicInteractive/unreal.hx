/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.augmentedreality;

@:umodule("AugmentedReality")
@:glueCppIncludes("ARSessionConfig.h")
@:uextern @:uclass extern class UARSessionConfig extends unreal.UDataAsset {
  
  /**
    @see EARWorldAlignment
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldAlignment() : unreal.augmentedreality.EARWorldAlignment;
  
  /**
    @see SessionType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSessionType() : unreal.augmentedreality.EARSessionType;
  
  /**
    @see PlaneDetectionMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPlaneDetectionMode() : unreal.augmentedreality.EARPlaneDetectionMode;
  
  /**
    @see LightEstimationMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLightEstimationMode() : unreal.augmentedreality.EARLightEstimationMode;
  
  /**
    @see FrameSyncMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFrameSyncMode() : unreal.augmentedreality.EARFrameSyncMode;
  
  /**
    @see bEnableAutomaticCameraOverlay
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldRenderCameraOverlay() : Bool;
  
  /**
    @see bEnableAutomaticCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldEnableCameraTracking() : Bool;
  
  /**
    @see bEnableAutoFocus
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldEnableAutoFocus() : Bool;
  
  /**
    @see bEnableAutoFocus
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableAutoFocus(bNewValue : Bool) : Void;
  
  /**
    @see bResetCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldResetCameraTracking() : Bool;
  
  /**
    @see bResetCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:final public function SetResetCameraTracking(bNewValue : Bool) : Void;
  
  /**
    @see bResetTrackedObjects
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldResetTrackedObjects() : Bool;
  
  /**
    @see bResetTrackedObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function SetResetTrackedObjects(bNewValue : Bool) : Void;
  
  /**
    @see CandidateImages
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCandidateImageList() : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateImage>>>;
  
  /**
    Add a new CandidateImage to the ARSessionConfig.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddCandidateImage(NewCandidateImage : unreal.augmentedreality.UARCandidateImage) : Void;
  
  /**
    @see MaxNumSimultaneousImagesTracked
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMaxNumSimultaneousImagesTracked() : unreal.Int32;
  
  /**
    @see EnvironmentCaptureProbeType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetEnvironmentCaptureProbeType() : unreal.augmentedreality.EAREnvironmentCaptureProbeType;
  
  /**
    @see WorldMapData
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldMapData() : unreal.Const<unreal.PRef<unreal.TArray<unreal.UInt8>>>;
  
  /**
    @see WorldMapData
  **/
  @:ufunction(BlueprintCallable) @:final public function SetWorldMapData(WorldMapData : unreal.TArray<unreal.UInt8>) : Void;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCandidateObjectList() : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateObject>>>;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCandidateObjectList(InCandidateObjects : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateObject>>>) : Void;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function AddCandidateObject(CandidateObject : unreal.augmentedreality.UARCandidateObject) : Void;
  
  /**
    @see DesiredVideoFormat
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDesiredVideoFormat() : unreal.augmentedreality.FARVideoFormat;
  
  /**
    @see DesiredVideoFormat
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDesiredVideoFormat(NewFormat : unreal.augmentedreality.FARVideoFormat) : Void;
  
  /**
    @see FaceTrackingDirection
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFaceTrackingDirection() : unreal.augmentedreality.EARFaceTrackingDirection;
  
  /**
    @see FaceTrackingDirection
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFaceTrackingDirection(InDirection : unreal.augmentedreality.EARFaceTrackingDirection) : Void;
  
  /**
    @see FaceTrackingUpdate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFaceTrackingUpdate() : unreal.augmentedreality.EARFaceTrackingUpdate;
  
  /**
    @see FaceTrackingUpdate
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFaceTrackingUpdate(InUpdate : unreal.augmentedreality.EARFaceTrackingUpdate) : Void;
  
  /**
    Data array for storing the cooked image database
  **/
  @:uproperty private var SerializedARCandidateImageDatabase : unreal.TArray<unreal.UInt8>;
  
  /**
    Whether to track the face as if you are looking out of the device or as a mirror
  **/
  @:uproperty private var FaceTrackingUpdate : unreal.augmentedreality.EARFaceTrackingUpdate;
  
  /**
    Whether to track the face as if you are looking out of the device or as a mirror
  **/
  @:uproperty private var FaceTrackingDirection : unreal.augmentedreality.EARFaceTrackingDirection;
  
  /**
    The desired video format (or the default if not supported) that this session should use if the camera is enabled
    Note: Call GetSupportedVideoFormats to get a list of device supported formats
  **/
  @:uproperty private var DesiredVideoFormat : unreal.augmentedreality.FARVideoFormat;
  
  /**
    A list of candidate objects to search for in the scene
  **/
  @:uproperty private var CandidateObjects : unreal.TArray<unreal.augmentedreality.UARCandidateObject>;
  
  /**
    A previously saved world that is to be loaded when the session starts
  **/
  @:uproperty private var WorldMapData : unreal.TArray<unreal.UInt8>;
  
  /**
    How the AR system should handle texture probe capturing
  **/
  @:uproperty private var EnvironmentCaptureProbeType : unreal.augmentedreality.EAREnvironmentCaptureProbeType;
  
  /**
    The maximum number of images to track at the same time. Defaults to 1
  **/
  @:uproperty private var MaxNumSimultaneousImagesTracked : unreal.Int32;
  
  /**
    The list of candidate images to detect within the AR camera view
  **/
  @:uproperty private var CandidateImages : unreal.TArray<unreal.augmentedreality.UARCandidateImage>;
  
  /**
    @see EARFrameSyncMode
  **/
  @:uproperty private var FrameSyncMode : unreal.augmentedreality.EARFrameSyncMode;
  
  /**
    @see EARLightEstimationMode
  **/
  @:uproperty private var LightEstimationMode : unreal.augmentedreality.EARLightEstimationMode;
  
  /**
    @see EARPlaneDetectionMode
  **/
  @:deprecated @:uproperty private var PlaneDetectionMode_DEPRECATED : unreal.augmentedreality.EARPlaneDetectionMode;
  
  /**
    @see EARSessionType
  **/
  @:uproperty private var SessionType : unreal.augmentedreality.EARSessionType;
  
  /**
    @see EARWorldAlignment
  **/
  @:uproperty private var WorldAlignment : unreal.augmentedreality.EARWorldAlignment;
  
}
