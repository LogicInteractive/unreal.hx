/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  TargetActors are spawned to assist with ability targeting. They are spawned by ability tasks and create/determine the outgoing targeting data passed from one task to another
  
  WARNING: These actors are spawned once per ability activation and in their default form are not very efficient
  For most games you will need to subclass and heavily modify this actor, or you will want to implement similar functions in a game-specific actor or blueprint to avoid actor spawn costs
  This class is not well tested by internal games, but it is a useful class to look at to learn how target replication occurs
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/GameplayAbilityTargetActor.h")
@:uextern @:uclass extern class AGameplayAbilityTargetActor extends unreal.AActor {
  @:uproperty public var GenericDelegateBoundASC : unreal.gameplayabilities.UAbilitySystemComponent;
  
  /**
    Draw the debug information (if applicable) for this targeting actor.
  **/
  @:uproperty public var bDebug : Bool;
  
  /**
    Using a special class for replication purposes.
  **/
  @:uproperty public var Filter : unreal.gameplayabilities.FGameplayTargetDataFilterHandle;
  
  /**
    Reticle that will appear on top of acquired targets. Reticles will be spawned/despawned as targets are acquired/lost.
  **/
  @:uproperty public var ReticleClass : unreal.TSubclassOf<unreal.gameplayabilities.AGameplayAbilityWorldReticle>;
  
  /**
    Parameters for world reticle. Usage of these parameters is dependent on the reticle.
  **/
  @:uproperty public var ReticleParams : unreal.gameplayabilities.FWorldReticleParameters;
  @:uproperty public var SourceActor : unreal.AActor;
  @:uproperty public var bDestroyOnConfirmation : Bool;
  @:uproperty public var OwningAbility : unreal.gameplayabilities.UGameplayAbility;
  @:uproperty public var MasterPC : unreal.APlayerController;
  
  /**
    Describes where the targeting action starts, usually the player character or a socket on the player character. //UPROPERTY(BlueprintReadOnly, meta=(ExposeOnSpawn=true), Category=Targeting)
  **/
  @:uproperty public var StartLocation : unreal.gameplayabilities.FGameplayAbilityTargetingLocationInfo;
  
  /**
    The TargetData this class produces can be entirely generated on the server. We don't require the client to send us full or partial TargetData (possibly just a 'confirm')
  **/
  @:uproperty public var ShouldProduceTargetDataOnServer : Bool;
  
  /**
    Outside code is saying 'stop and just give me what you have.' Returns true if the ability accepts this and can be forgotten.
  **/
  @:ufunction public function ConfirmTargeting() : Void;
  
  /**
    Outside code is saying 'stop everything and just forget about it'
  **/
  @:ufunction public function CancelTargeting() : Void;
  
}
