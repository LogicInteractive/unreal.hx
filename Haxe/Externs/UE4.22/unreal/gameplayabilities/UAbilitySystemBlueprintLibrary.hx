/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Blueprint library for ability system. Many of these functions are useful to call from native as well
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("AbilitySystemBlueprintLibrary.h")
@:uextern @:uclass extern class UAbilitySystemBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Tries to find an ability system component on the actor, will use AbilitySystemInterface
  **/
  @:ufunction(BlueprintCallable) static public function GetAbilitySystemComponent(Actor : unreal.AActor) : unreal.gameplayabilities.UAbilitySystemComponent;
  
  /**
    This function can be used to trigger an ability on the actor in question with useful payload data.
  **/
  @:ufunction(BlueprintCallable) static public function SendGameplayEventToActor(Actor : unreal.AActor, EventTag : unreal.gameplaytags.FGameplayTag, Payload : unreal.gameplayabilities.FGameplayEventData) : Void;
  
  /**
    Returns true if the attribute actually exists
  **/
  @:ufunction(BlueprintCallable) static public function IsValid(Attribute : unreal.gameplayabilities.FGameplayAttribute) : Bool;
  
  /**
    Returns the value of Attribute from the ability system component belonging to Actor.
  **/
  @:ufunction(BlueprintCallable) static public function GetFloatAttribute(Actor : unreal.Const<unreal.AActor>, Attribute : unreal.gameplayabilities.FGameplayAttribute, bSuccessfullyFoundAttribute : Bool) : unreal.Float32;
  
  /**
    Returns the value of Attribute from the ability system component AbilitySystem.
  **/
  @:ufunction(BlueprintCallable) static public function GetFloatAttributeFromAbilitySystemComponent(AbilitySystem : unreal.Const<unreal.gameplayabilities.UAbilitySystemComponent>, Attribute : unreal.gameplayabilities.FGameplayAttribute, bSuccessfullyFoundAttribute : Bool) : unreal.Float32;
  
  /**
    Returns the base value of Attribute from the ability system component belonging to Actor.
  **/
  @:ufunction(BlueprintCallable) static public function GetFloatAttributeBase(Actor : unreal.Const<unreal.AActor>, Attribute : unreal.gameplayabilities.FGameplayAttribute, bSuccessfullyFoundAttribute : Bool) : unreal.Float32;
  
  /**
    Returns the base value of Attribute from the ability system component AbilitySystemComponent.
  **/
  @:ufunction(BlueprintCallable) static public function GetFloatAttributeBaseFromAbilitySystemComponent(AbilitySystemComponent : unreal.Const<unreal.gameplayabilities.UAbilitySystemComponent>, Attribute : unreal.gameplayabilities.FGameplayAttribute, bSuccessfullyFoundAttribute : Bool) : unreal.Float32;
  
  /**
    Returns the value of Attribute from the ability system component AbilitySystem after evaluating it with source and target tags. bSuccess indicates the success or failure of this operation.
  **/
  @:ufunction(BlueprintCallable) static public function EvaluateAttributeValueWithTags(AbilitySystem : unreal.gameplayabilities.UAbilitySystemComponent, Attribute : unreal.gameplayabilities.FGameplayAttribute, SourceTags : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, TargetTags : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, bSuccess : Bool) : unreal.Float32;
  
  /**
    Returns the value of Attribute from the ability system component AbilitySystem after evaluating it with source and target tags using the passed in base value instead of the real base value. bSuccess indicates the success or failure of this operation.
  **/
  @:ufunction(BlueprintCallable) static public function EvaluateAttributeValueWithTagsAndBase(AbilitySystem : unreal.gameplayabilities.UAbilitySystemComponent, Attribute : unreal.gameplayabilities.FGameplayAttribute, SourceTags : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, TargetTags : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, BaseValue : unreal.Float32, bSuccess : Bool) : unreal.Float32;
  
  /**
    Simple equality operator for gameplay attributes
  **/
  @:ufunction(BlueprintCallable) static public function EqualEqual_GameplayAttributeGameplayAttribute(AttributeA : unreal.gameplayabilities.FGameplayAttribute, AttributeB : unreal.gameplayabilities.FGameplayAttribute) : Bool;
  
  /**
    Simple inequality operator for gameplay attributes
  **/
  @:ufunction(BlueprintCallable) static public function NotEqual_GameplayAttributeGameplayAttribute(AttributeA : unreal.gameplayabilities.FGameplayAttribute, AttributeB : unreal.gameplayabilities.FGameplayAttribute) : Bool;
  
  /**
    Copies targets from HandleToAdd to TargetHandle
  **/
  @:ufunction(BlueprintCallable) static public function AppendTargetDataHandle(TargetHandle : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle, HandleToAdd : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Creates a target data with a source and destination location
  **/
  @:ufunction(BlueprintCallable) static public function AbilityTargetDataFromLocations(SourceLocation : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetingLocationInfo>>, TargetLocation : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetingLocationInfo>>) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Creates a target data with a single hit result
  **/
  @:ufunction(BlueprintCallable) static public function AbilityTargetDataFromHitResult(HitResult : unreal.Const<unreal.PRef<unreal.FHitResult>>) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Returns number of target data objects, not necessarily number of distinct targets
  **/
  @:ufunction(BlueprintCallable) static public function GetDataCountFromTargetData(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>) : unreal.Int32;
  
  /**
    Creates single actor target data
  **/
  @:ufunction(BlueprintCallable) static public function AbilityTargetDataFromActor(Actor : unreal.AActor) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Creates actor array target data
  **/
  @:ufunction(BlueprintCallable) static public function AbilityTargetDataFromActorArray(ActorArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, OneTargetPerHandle : Bool) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Create a new target data handle with filtration performed on the data
  **/
  @:ufunction(BlueprintCallable) static public function FilterTargetData(TargetDataHandle : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, ActorFilterClass : unreal.gameplayabilities.FGameplayTargetDataFilterHandle) : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle;
  
  /**
    Create a handle for filtering target data, filling out all fields
  **/
  @:ufunction(BlueprintCallable) static public function MakeFilterHandle(Filter : unreal.gameplayabilities.FGameplayTargetDataFilter, FilterActor : unreal.AActor) : unreal.gameplayabilities.FGameplayTargetDataFilterHandle;
  
  /**
    Create a spec handle, filling out all fields
  **/
  @:ufunction(BlueprintCallable) static public function MakeSpecHandle(InGameplayEffect : unreal.gameplayabilities.UGameplayEffect, InInstigator : unreal.AActor, InEffectCauser : unreal.AActor, InLevel : unreal.Float32 = 1.000000) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Create a spec handle, cloning another
  **/
  @:ufunction(BlueprintCallable) static public function CloneSpecHandle(InNewInstigator : unreal.AActor, InEffectCauser : unreal.AActor, GameplayEffectSpecHandle_Clone : unreal.gameplayabilities.FGameplayEffectSpecHandle) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Returns all actors targeted, for a given index
  **/
  @:ufunction(BlueprintCallable) static public function GetActorsFromTargetData(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : unreal.TArray<unreal.AActor>;
  
  /**
    Returns all actors targeted
  **/
  @:ufunction(BlueprintCallable) static public function GetAllActorsFromTargetData(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>) : unreal.TArray<unreal.AActor>;
  
  /**
    Returns true if the given TargetData has the actor passed in targeted
  **/
  @:ufunction(BlueprintCallable) static public function DoesTargetDataContainActor(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32, Actor : unreal.AActor) : Bool;
  
  /**
    Returns true if the given TargetData has at least 1 actor targeted
  **/
  @:ufunction(BlueprintCallable) static public function TargetDataHasActor(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : Bool;
  
  /**
    Returns true if the target data has a hit result
  **/
  @:ufunction(BlueprintCallable) static public function TargetDataHasHitResult(HitResult : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : Bool;
  
  /**
    Returns the hit result for a given index if it exists
  **/
  @:ufunction(BlueprintCallable) static public function GetHitResultFromTargetData(HitResult : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : unreal.FHitResult;
  
  /**
    Returns true if the target data has an origin
  **/
  @:ufunction(BlueprintCallable) static public function TargetDataHasOrigin(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : Bool;
  
  /**
    Returns the origin for a given index if it exists
  **/
  @:ufunction(BlueprintCallable) static public function GetTargetDataOrigin(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : unreal.FTransform;
  
  /**
    Returns true if the target data has an end point
  **/
  @:ufunction(BlueprintCallable) static public function TargetDataHasEndPoint(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : Bool;
  
  /**
    Returns the end point for a given index if it exists
  **/
  @:ufunction(BlueprintCallable) static public function GetTargetDataEndPoint(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : unreal.FVector;
  
  /**
    Returns the end point transform for a given index if it exists
  **/
  @:ufunction(BlueprintCallable) static public function GetTargetDataEndPointTransform(TargetData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, Index : unreal.Int32) : unreal.FTransform;
  
  /**
    Returns true if this context has ever been initialized
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextIsValid(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : Bool;
  
  /**
    Returns true if the ability system component that instigated this is locally controlled
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextIsInstigatorLocallyControlled(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : Bool;
  
  /**
    Extracts a hit result from the effect context if it is set
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetHitResult(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.FHitResult;
  
  /**
    Returns true if there is a valid hit result inside the effect context
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextHasHitResult(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : Bool;
  
  /**
    Adds a hit result to the effect context
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextAddHitResult(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle, HitResult : unreal.FHitResult, bReset : Bool) : Void;
  
  /**
    Gets the location the effect originated from
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetOrigin(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.FVector;
  
  /**
    Sets the location the effect originated from
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextSetOrigin(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle, Origin : unreal.FVector) : Void;
  
  /**
    Gets the instigating actor (that holds the ability system component) of the EffectContext
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetInstigatorActor(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.AActor;
  
  /**
    Gets the original instigator actor that started the chain of events to cause this effect
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetOriginalInstigatorActor(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.AActor;
  
  /**
    Gets the physical actor that caused the effect, possibly a projectile or weapon
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetEffectCauser(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.AActor;
  
  /**
    Gets the source object of the effect.
  **/
  @:ufunction(BlueprintCallable) static public function EffectContextGetSourceObject(EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle) : unreal.UObject;
  
  /**
    Returns true if the ability system component that spawned this cue is locally controlled
  **/
  @:ufunction(BlueprintCallable) static public function IsInstigatorLocallyControlled(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : Bool;
  
  /**
    Returns true if the ability system component that spawned this cue is locally controlled and a player
  **/
  @:ufunction(BlueprintCallable) static public function IsInstigatorLocallyControlledPlayer(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : Bool;
  
  /**
    Returns number of actors stored in the Effect Context used by this cue
  **/
  @:ufunction(BlueprintCallable) static public function GetActorCount(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : unreal.Int32;
  
  /**
    Returns actor stored in the Effect Context used by this cue
  **/
  @:ufunction(BlueprintCallable) static public function GetActorByIndex(Parameters : unreal.gameplayabilities.FGameplayCueParameters, Index : unreal.Int32) : unreal.AActor;
  
  /**
    Returns a hit result stored in the effect context if valid
  **/
  @:ufunction(BlueprintCallable) static public function GetHitResult(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : unreal.FHitResult;
  
  /**
    Checks if the effect context has a hit reslt stored inside
  **/
  @:ufunction(BlueprintCallable) static public function HasHitResult(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : Bool;
  
  /**
    Gets the instigating actor (that holds the ability system component) of the GameplayCue
  **/
  @:ufunction(BlueprintCallable) static public function GetInstigatorActor(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : unreal.AActor;
  
  /**
    Gets instigating world location
  **/
  @:ufunction(BlueprintCallable) static public function GetInstigatorTransform(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : unreal.FTransform;
  
  /**
    Gets instigating world location
  **/
  @:ufunction(BlueprintCallable) static public function GetOrigin(Parameters : unreal.gameplayabilities.FGameplayCueParameters) : unreal.FVector;
  
  /**
    Gets the best end location and normal for this gameplay cue. If there is hit result data, it will return this. Otherwise it will return the target actor's location/rotation. If none of this is available, it will return false.
  **/
  @:ufunction(BlueprintCallable) static public function GetGameplayCueEndLocationAndNormal(TargetActor : unreal.AActor, Parameters : unreal.gameplayabilities.FGameplayCueParameters, Location : unreal.PRef<unreal.FVector>, Normal : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Gets the best normalized effect direction for this gameplay cue. This is useful for effects that require the direction of an enemy attack. Returns true if a valid direction could be calculated.
  **/
  @:ufunction(BlueprintCallable) static public function GetGameplayCueDirection(TargetActor : unreal.AActor, Parameters : unreal.gameplayabilities.FGameplayCueParameters, Direction : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Returns true if the aggregated source and target tags from the effect spec meets the tag requirements
  **/
  @:ufunction(BlueprintCallable) static public function DoesGameplayCueMeetTagRequirements(Parameters : unreal.gameplayabilities.FGameplayCueParameters, SourceTagReqs : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayTagRequirements>>, TargetTagReqs : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayTagRequirements>>) : Bool;
  
  /**
    Native make, to avoid having to deal with quantized vector types
  **/
  @:ufunction(BlueprintCallable) static public function MakeGameplayCueParameters(NormalizedMagnitude : unreal.Float32, RawMagnitude : unreal.Float32, EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle, MatchedTagName : unreal.gameplaytags.FGameplayTag, OriginalTag : unreal.gameplaytags.FGameplayTag, AggregatedSourceTags : unreal.gameplaytags.FGameplayTagContainer, AggregatedTargetTags : unreal.gameplaytags.FGameplayTagContainer, @:bpopt("0,0,0") Location : unreal.FVector, @:bpopt("0,0,0") Normal : unreal.FVector, Instigator : unreal.AActor, EffectCauser : unreal.AActor, SourceObject : unreal.UObject, PhysicalMaterial : unreal.UPhysicalMaterial, @:bpopt("1") GameplayEffectLevel : unreal.Int32, @:bpopt("1") AbilityLevel : unreal.Int32, TargetAttachComponent : unreal.USceneComponent) : unreal.gameplayabilities.FGameplayCueParameters;
  
  /**
    Sets a raw name Set By Caller magnitude value, the tag version should normally be used
  **/
  @:ufunction(BlueprintCallable) static public function AssignSetByCallerMagnitude(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, DataName : unreal.FName, Magnitude : unreal.Float32) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Sets a gameplay tag Set By Caller magnitude value
  **/
  @:ufunction(BlueprintCallable) static public function AssignTagSetByCallerMagnitude(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, DataTag : unreal.gameplaytags.FGameplayTag, Magnitude : unreal.Float32) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Manually sets the duration on a specific effect
  **/
  @:ufunction(BlueprintCallable) static public function SetDuration(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, Duration : unreal.Float32) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    This instance of the effect will now grant NewGameplayTag to the object that this effect is applied to
  **/
  @:ufunction(BlueprintCallable) static public function AddGrantedTag(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, NewGameplayTag : unreal.gameplaytags.FGameplayTag) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    This instance of the effect will now grant NewGameplayTags to the object that this effect is applied to
  **/
  @:ufunction(BlueprintCallable) static public function AddGrantedTags(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, NewGameplayTags : unreal.gameplaytags.FGameplayTagContainer) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Adds NewGameplayTag to this instance of the effect
  **/
  @:ufunction(BlueprintCallable) static public function AddAssetTag(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, NewGameplayTag : unreal.gameplaytags.FGameplayTag) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Adds NewGameplayTags to this instance of the effect
  **/
  @:ufunction(BlueprintCallable) static public function AddAssetTags(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, NewGameplayTags : unreal.gameplaytags.FGameplayTagContainer) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Adds LinkedGameplayEffectSpec to SpecHandles. LinkedGameplayEffectSpec will be applied when/if SpecHandle is applied successfully. LinkedGameplayEffectSpec will not be modified here. Returns the ORIGINAL SpecHandle (legacy decision)
  **/
  @:ufunction(BlueprintCallable) static public function AddLinkedGameplayEffectSpec(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, LinkedGameplayEffectSpec : unreal.gameplayabilities.FGameplayEffectSpecHandle) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Adds LinkedGameplayEffect to SpecHandles. LinkedGameplayEffectSpec will be applied when/if SpecHandle is applied successfully. This will initialize the LinkedGameplayEffect's Spec for you. Returns to NEW linked spec in case you want to add more to it.
  **/
  @:ufunction(BlueprintCallable) static public function AddLinkedGameplayEffect(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, LinkedGameplayEffect : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Sets the GameplayEffectSpec's StackCount to the specified amount (prior to applying)
  **/
  @:ufunction(BlueprintCallable) static public function SetStackCount(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, StackCount : unreal.Int32) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Sets the GameplayEffectSpec's StackCount to the max stack count defined in the GameplayEffect definition
  **/
  @:ufunction(BlueprintCallable) static public function SetStackCountToMax(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Gets the GameplayEffectSpec's effect context handle
  **/
  @:ufunction(BlueprintCallable) static public function GetEffectContext(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle) : unreal.gameplayabilities.FGameplayEffectContextHandle;
  
  /**
    Returns handles for all Linked GE Specs that SpecHandle may apply. Useful if you want to append additional information to them.
  **/
  @:ufunction(BlueprintCallable) static public function GetAllLinkedGameplayEffectSpecHandles(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle) : unreal.TArray<unreal.gameplayabilities.FGameplayEffectSpecHandle>;
  
  /**
    Gets the magnitude of change for an attribute on an APPLIED GameplayEffectSpec.
  **/
  @:ufunction(BlueprintCallable) static public function GetModifiedAttributeMagnitude(SpecHandle : unreal.gameplayabilities.FGameplayEffectSpecHandle, Attribute : unreal.gameplayabilities.FGameplayAttribute) : unreal.Float32;
  
  /**
    Returns current stack count of an active Gameplay Effect. Will return 0 if the GameplayEffect is no longer valid.
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectStackCount(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Int32;
  
  /**
    Returns stack limit count of an active Gameplay Effect. Will return 0 if the GameplayEffect is no longer valid.
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectStackLimitCount(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Int32;
  
  /**
    Returns the start time (time which the GE was added) for a given GameplayEffect
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectStartTime(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Float32;
  
  /**
    Returns the expected end time (when we think the GE will expire) for a given GameplayEffect (note someone could remove or change it before that happens!)
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectExpectedEndTime(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Float32;
  
  /**
    Returns the total duration for a given GameplayEffect
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectTotalDuration(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Float32;
  
  /**
    Returns the total duration for a given GameplayEffect, basically ExpectedEndTime - Current Time
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectRemainingDuration(WorldContextObject : unreal.UObject, ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.Float32;
  
  /**
    Returns a debug string for display
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveGameplayEffectDebugString(ActiveHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle) : unreal.FString;
  
}
