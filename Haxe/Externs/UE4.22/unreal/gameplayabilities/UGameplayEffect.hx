/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  UGameplayEffect
      The GameplayEffect definition. This is the data asset defined in the editor that drives everything.
   This is only blueprintable to allow for templating gameplay effects. Gameplay effects should NOT contain blueprint graphs.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("GameplayEffect.h")
@:uextern @:uclass extern class UGameplayEffect extends unreal.UObject implements unreal.gameplaytags.IGameplayTagAssetInterface {
  
  /**
    Granted abilities
  **/
  @:uproperty public var GrantedAbilities : unreal.TArray<unreal.gameplayabilities.FGameplayAbilitySpecDef>;
  
  /**
    Policy for how to handle duration expiring on this gameplay effect
  **/
  @:uproperty public var StackExpirationPolicy : unreal.gameplayabilities.EGameplayEffectStackingExpirationPolicy;
  
  /**
    Policy for how the effect period should be reset (or not) while stacking
  **/
  @:uproperty public var StackPeriodResetPolicy : unreal.gameplayabilities.EGameplayEffectStackingPeriodPolicy;
  
  /**
    Policy for how the effect duration should be refreshed while stacking
  **/
  @:uproperty public var StackDurationRefreshPolicy : unreal.gameplayabilities.EGameplayEffectStackingDurationPolicy;
  
  /**
    Stack limit for StackingType
  **/
  @:uproperty public var StackLimitCount : unreal.Int32;
  
  /**
    How this GameplayEffect stacks with other instances of this same GameplayEffect
  **/
  @:uproperty public var StackingType : unreal.gameplayabilities.EGameplayEffectStackingType;
  
  /**
    Grants immunity to GameplayEffects that match this query. Queries are more powerful but slightly slower than GrantedApplicationImmunityTags.
  **/
  @:uproperty public var GrantedApplicationImmunityQuery : unreal.gameplayabilities.FGameplayEffectQuery;
  
  /**
    Grants the owner immunity from these source tags.
  **/
  @:uproperty public var GrantedApplicationImmunityTags : unreal.gameplayabilities.FGameplayTagRequirements;
  
  /**
    GameplayEffects that *have* tags in this container will be cleared upon effect application.
  **/
  @:uproperty public var RemoveGameplayEffectsWithTags : unreal.gameplayabilities.FInheritedTagContainer;
  
  /**
    Tag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply.
  **/
  @:uproperty public var ApplicationTagRequirements : unreal.gameplayabilities.FGameplayTagRequirements;
  
  /**
    Once Applied, these tags requirements are used to determined if the GameplayEffect is "on" or "off". A GameplayEffect can be off and do nothing, but still applied.
  **/
  @:uproperty public var OngoingTagRequirements : unreal.gameplayabilities.FGameplayTagRequirements;
  
  /**
    "These tags are applied to the actor I am applied to"
  **/
  @:uproperty public var InheritableOwnedTagsContainer : unreal.gameplayabilities.FInheritedTagContainer;
  
  /**
    The GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.
  **/
  @:uproperty public var InheritableGameplayEffectTags : unreal.gameplayabilities.FInheritedTagContainer;
  
  /**
    Data for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds.
  **/
  @:uproperty public var UIData : unreal.gameplayabilities.UGameplayEffectUIData;
  
  /**
    Cues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc
  **/
  @:uproperty public var GameplayCues : unreal.TArray<unreal.gameplayabilities.FGameplayEffectCue>;
  
  /**
    If true, GameplayCues will only be triggered for the first instance in a stacking GameplayEffect.
  **/
  @:uproperty public var bSuppressStackingCues : Bool;
  
  /**
    If true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)
  **/
  @:uproperty public var bRequireModifierSuccessToTriggerCues : Bool;
  
  /**
    Effects to apply when this effect expires naturally via its duration; Only works for effects with a duration
  **/
  @:uproperty public var RoutineExpirationEffectClasses : unreal.TArray<unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>>;
  
  /**
    Effects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration
  **/
  @:uproperty public var PrematureExpirationEffectClasses : unreal.TArray<unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>>;
  
  /**
    If true, the entire stack of the effect will be cleared once it overflows
  **/
  @:uproperty public var bClearStackOnOverflow : Bool;
  
  /**
    If true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed
  **/
  @:uproperty public var bDenyOverflowApplication : Bool;
  
  /**
    Effects to apply when a stacking effect "overflows" its stack count through another attempted application. Added whether the overflow application succeeds or not.
  **/
  @:uproperty public var OverflowEffects : unreal.TArray<unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>>;
  
  /**
    other gameplay effects that will be applied to the target of this effect if this effect applies
  **/
  @:uproperty public var ConditionalGameplayEffects : unreal.TArray<unreal.gameplayabilities.FConditionalGameplayEffect>;
  
  /**
    Deprecated. Use ConditionalGameplayEffects instead
  **/
  @:deprecated @:uproperty public var TargetEffectClasses_DEPRECATED : unreal.TArray<unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>>;
  @:uproperty public var ApplicationRequirements : unreal.TArray<unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffectCustomApplicationRequirement>>;
  
  /**
    Probability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)
  **/
  @:uproperty public var ChanceToApplyToTarget : unreal.gameplayabilities.FScalableFloat;
  @:uproperty public var Executions : unreal.TArray<unreal.gameplayabilities.FGameplayEffectExecutionDefinition>;
  
  /**
    Array of modifiers that will affect the target of this effect
  **/
  @:uproperty public var Modifiers : unreal.TArray<unreal.gameplayabilities.FGameplayModifierInfo>;
  
  /**
    If true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses.
  **/
  @:uproperty public var bExecutePeriodicEffectOnApplication : Bool;
  
  /**
    Period in seconds. 0.0 for non-periodic effects
  **/
  @:uproperty public var Period : unreal.gameplayabilities.FScalableFloat;
  
  /**
    Duration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration.
  **/
  @:uproperty public var DurationMagnitude : unreal.gameplayabilities.FGameplayEffectModifierMagnitude;
  
  /**
    Policy for the duration of this effect
  **/
  @:uproperty public var DurationPolicy : unreal.gameplayabilities.EGameplayEffectDurationType;
  // GameplayTagAssetInterface interface implementation
  
  /**
    Get any owned gameplay tags on the asset
    
    @param OutTags       [OUT] Set of tags on the asset
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetOwnedGameplayTags(TagContainer : unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>) : Void;
  
  /**
    Check if the asset has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)
    
    @param TagToCheck    Tag to check for a match
    
    @return True if the asset has a gameplay tag that matches, false if not
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function HasMatchingGameplayTag(TagToCheck : unreal.gameplaytags.FGameplayTag) : Bool;
  
  /**
    Check if the asset has gameplay tags that matches against all of the specified tags (expands to include parents of asset tags)
    
    @param TagContainer                  Tag container to check for a match
    
    @return True if the asset has matches all of the gameplay tags, will be true if container is empty
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function HasAllMatchingGameplayTags(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : Bool;
  
  /**
    Check if the asset has gameplay tags that matches against any of the specified tags (expands to include parents of asset tags)
    
    @param TagContainer                  Tag container to check for a match
    
    @return True if the asset has matches any of the gameplay tags, will be false if container is empty
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function HasAnyMatchingGameplayTags(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : Bool;
  
}
