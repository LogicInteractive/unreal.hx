/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  An activatable ability spec, hosted on the ability system component. This defines both what the ability is (what class, what level, input binding etc)
  and also holds runtime state that must be kept outside of the ability being instanced/activated.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/GameplayAbilitySpec.h")
@:uextern @:ustruct extern class FGameplayAbilitySpec extends unreal.FFastArraySerializerItem {
  
  /**
    Handle to GE that granted us (usually invalid)
  **/
  @:uproperty public var GameplayEffectHandle : unreal.gameplayabilities.FActiveGameplayEffectHandle;
  
  /**
    Replicated instances of this ability..
  **/
  @:uproperty public var ReplicatedInstances : unreal.TArray<unreal.gameplayabilities.UGameplayAbility>;
  
  /**
    Non replicating instances of this ability.
  **/
  @:uproperty public var NonReplicatedInstances : unreal.TArray<unreal.gameplayabilities.UGameplayAbility>;
  
  /**
    Activation state of this ability. This is not replicated since it needs to be overwritten locally on clients during prediction.
  **/
  @:uproperty public var ActivationInfo : unreal.gameplayabilities.FGameplayAbilityActivationInfo;
  
  /**
    Pending removal due to scope lock
  **/
  @:uproperty public var PendingRemove : Bool;
  
  /**
    If true, this ability should be removed as soon as it finishes executing
  **/
  @:uproperty public var RemoveAfterActivation : Bool;
  
  /**
    Is input currently pressed. Set to false when input is released
  **/
  @:uproperty public var InputPressed : Bool;
  
  /**
    A count of the number of times this ability has been activated minus the number of times it has been ended. For instanced abilities this will be the number of currently active instances. Can't replicate until prediction accurately handles this.
  **/
  @:uproperty public var ActiveCount : unreal.UInt8;
  
  /**
    Object this ability was created from, can be an actor or static object. Useful to bind an ability to a gameplay object
  **/
  @:uproperty public var SourceObject : unreal.UObject;
  
  /**
    InputID, if bound
  **/
  @:uproperty public var InputID : unreal.Int32;
  
  /**
    Level of Ability
  **/
  @:uproperty public var Level : unreal.Int32;
  
  /**
    Ability of the spec (Always the CDO. This should be const but too many things modify it currently)
  **/
  @:uproperty public var Ability : unreal.gameplayabilities.UGameplayAbility;
  
  /**
    Handle for outside sources to refer to this spec by
  **/
  @:uproperty public var Handle : unreal.gameplayabilities.FGameplayAbilitySpecHandle;
  
}
