/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Struct representing a float whose magnitude is dictated by a backing attribute and a calculation policy, follows basic form of:
  (Coefficient * (PreMultiplyAdditiveValue + [Eval'd Attribute Value According to Policy])) + PostMultiplyAdditiveValue
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/GameplayEffect.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FAttributeBasedFloat {
  
  /**
    Filter to use on target tags; If specified, only modifiers applied with all of these tags will factor into the calculation
  **/
  @:uproperty public var TargetTagFilter : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Filter to use on source tags; If specified, only modifiers applied with all of these tags will factor into the calculation
  **/
  @:uproperty public var SourceTagFilter : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Channel to terminate evaluation on when using AttributeEvaluatedUpToChannel calculation type
  **/
  @:uproperty public var FinalChannel : unreal.gameplayabilities.EGameplayModEvaluationChannel;
  
  /**
    Calculation policy in regards to the attribute
  **/
  @:uproperty public var AttributeCalculationType : unreal.gameplayabilities.EAttributeBasedFloatCalculationType;
  
  /**
    If a curve table entry is specified, the attribute will be used as a lookup into the curve instead of using the attribute directly.
  **/
  @:uproperty public var AttributeCurve : unreal.FCurveTableRowHandle;
  
  /**
    Attribute backing the calculation
  **/
  @:uproperty public var BackingAttribute : unreal.gameplayabilities.FGameplayEffectAttributeCaptureDefinition;
  
  /**
    Additive value to the attribute calculation, added in after the coefficient applies
  **/
  @:uproperty public var PostMultiplyAdditiveValue : unreal.gameplayabilities.FScalableFloat;
  
  /**
    Additive value to the attribute calculation, added in before the coefficient applies
  **/
  @:uproperty public var PreMultiplyAdditiveValue : unreal.gameplayabilities.FScalableFloat;
  
  /**
    Coefficient to the attribute calculation
  **/
  @:uproperty public var Coefficient : unreal.gameplayabilities.FScalableFloat;
  
}
