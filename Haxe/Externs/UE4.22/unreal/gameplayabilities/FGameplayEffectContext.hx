/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Data structure that stores an instigator and related data, such as positions and targets
  Games can subclass this structure and add game-specific information
  It is passed throughout effect execution so it is a great place to track transient information about an execution
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/GameplayEffectTypes.h")
@:uextern @:ustruct extern class FGameplayEffectContext {
  
  /**
    Stored origin, may be invalid if bHasWorldOrigin is false
  **/
  @:uproperty private var WorldOrigin : unreal.FVector;
  
  /**
    Actors referenced by this context
  **/
  @:uproperty private var Actors : unreal.TArray<unreal.TWeakObjectPtr<unreal.AActor>>;
  
  /**
    The ability system component that's bound to instigator
  **/
  @:uproperty private var InstigatorAbilitySystemComponent : unreal.TWeakObjectPtr<unreal.gameplayabilities.UAbilitySystemComponent>;
  
  /**
    Object this effect was created from, can be an actor or static object. Useful to bind an effect to a gameplay object
  **/
  @:uproperty private var SourceObject : unreal.TWeakObjectPtr<unreal.UObject>;
  
  /**
    The level this was executed at
  **/
  @:uproperty private var AbilityLevel : unreal.Int32;
  
  /**
    The ability instance that is responsible for this effect context (NOT replicated)
  **/
  @:uproperty private var AbilityInstanceNotReplicated : unreal.TWeakObjectPtr<unreal.gameplayabilities.UGameplayAbility>;
  
  /**
    The ability CDO that is responsible for this effect context (replicated)
  **/
  @:uproperty private var AbilityCDO : unreal.TWeakObjectPtr<unreal.gameplayabilities.UGameplayAbility>;
  
  /**
    The physical actor that actually did the damage, can be a weapon or projectile
  **/
  @:uproperty private var EffectCauser : unreal.TWeakObjectPtr<unreal.AActor>;
  
  /**
    Instigator actor, the actor that owns the ability system component
  **/
  @:uproperty private var Instigator : unreal.TWeakObjectPtr<unreal.AActor>;
  
}
