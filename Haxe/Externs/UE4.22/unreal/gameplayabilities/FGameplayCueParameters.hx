/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Metadata about a gameplay cue execution
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/GameplayEffectTypes.h")
@:uextern @:ustruct extern class FGameplayCueParameters {
  
  /**
    Could be used to say "attach FX to this component always"
  **/
  @:uproperty public var TargetAttachComponent : unreal.TWeakObjectPtr<unreal.USceneComponent>;
  
  /**
    If originating from an ability, this will be the level of that ability
  **/
  @:uproperty public var AbilityLevel : unreal.Int32;
  
  /**
    If originating from a GameplayEffect, the level of that GameplayEffect
  **/
  @:uproperty public var GameplayEffectLevel : unreal.Int32;
  
  /**
    PhysMat of the hit, if there was a hit.
  **/
  @:uproperty public var PhysicalMaterial : unreal.TWeakObjectPtr<unreal.UPhysicalMaterial>;
  
  /**
    Object this effect was created from, can be an actor or static object. Useful to bind an effect to a gameplay object
  **/
  @:uproperty public var SourceObject : unreal.TWeakObjectPtr<unreal.UObject>;
  
  /**
    The physical actor that actually did the damage, can be a weapon or projectile
  **/
  @:uproperty public var EffectCauser : unreal.TWeakObjectPtr<unreal.AActor>;
  
  /**
    Instigator actor, the actor that owns the ability system component
  **/
  @:uproperty public var Instigator : unreal.TWeakObjectPtr<unreal.AActor>;
  
  /**
    Normal of impact that caused cue
  **/
  @:uproperty public var Normal : unreal.FVector_NetQuantizeNormal;
  
  /**
    Location cue took place at
  **/
  @:uproperty public var Location : unreal.FVector_NetQuantize10;
  
  /**
    The aggregated target tags taken from the effect spec
  **/
  @:uproperty public var AggregatedTargetTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    The aggregated source tags taken from the effect spec
  **/
  @:uproperty public var AggregatedSourceTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    The original tag of the gameplay cue
  **/
  @:uproperty public var OriginalTag : unreal.gameplaytags.FGameplayTag;
  
  /**
    The tag name that matched this specific gameplay cue handler
  **/
  @:uproperty public var MatchedTagName : unreal.gameplaytags.FGameplayTag;
  
  /**
    Effect context, contains information about hit result, etc
  **/
  @:uproperty public var EffectContext : unreal.gameplayabilities.FGameplayEffectContextHandle;
  
  /**
    Raw final magnitude of source gameplay effect. Use this is you need to display numbers or for other informational purposes.
  **/
  @:uproperty public var RawMagnitude : unreal.Float32;
  
  /**
    Magnitude of source gameplay effect, normalzed from 0-1. Use this for "how strong is the gameplay effect" (0=min, 1=,max)
  **/
  @:uproperty public var NormalizedMagnitude : unreal.Float32;
  
}
