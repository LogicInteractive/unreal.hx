/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Convenience task for spawning actors on the network authority. If not the net authority, we will not spawn and Success will not be called.
  The nice thing this adds is the ability to modify expose on spawn properties while also implicitly checking network role before spawning.
  
  Though this task doesn't do much - games can implement similiar tasks that carry out game specific rules. For example a 'SpawnProjectile'
  task that limits the available classes to the games projectile class, and that does game specific stuff on spawn (for example, determining
  firing position from a weapon attachment - logic that we don't necessarily want in ability blueprints).
  
  Long term we can also use this task as a sync point. If the executing client could wait execution until the server creates and replicate sthe
  actor down to him. We could potentially also use this to do predictive actor spawning / reconciliation.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/Tasks/AbilityTask_SpawnActor.h")
@:uextern @:uclass extern class UAbilityTask_SpawnActor extends unreal.gameplayabilities.UAbilityTask {
  
  /**
    Called when we can't spawn: on clients or potentially on server if they fail to spawn (rare)
  **/
  @:uproperty public var DidNotSpawn : unreal.gameplayabilities.FSpawnActorDelegate;
  @:uproperty public var Success : unreal.gameplayabilities.FSpawnActorDelegate;
  
  /**
    Spawn new Actor on the network authority (server)
  **/
  @:ufunction(BlueprintCallable) static public function SpawnActor(OwningAbility : unreal.gameplayabilities.UGameplayAbility, TargetData : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle, Class : unreal.TSubclassOf<unreal.AActor>) : unreal.gameplayabilities.UAbilityTask_SpawnActor;
  @:ufunction(BlueprintCallable) @:final public function FinishSpawningActor(OwningAbility : unreal.gameplayabilities.UGameplayAbility, TargetData : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle, SpawnedActor : unreal.AActor) : Void;
  
}
