/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Reticles allow targeting to be visualized. Tasks can spawn these. Artists/designers can create BPs for these.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/GameplayAbilityWorldReticle.h")
@:uextern @:uclass extern class AGameplayAbilityWorldReticle extends unreal.AActor {
  
  /**
    Called whenever bIsTargetValid changes value.
  **/
  @:ufunction(BlueprintImplementableEvent) public function OnValidTargetChanged(bNewValue : Bool) : Void;
  
  /**
    Called whenever bIsTargetAnActor changes value.
  **/
  @:ufunction(BlueprintImplementableEvent) public function OnTargetingAnActor(bNewValue : Bool) : Void;
  @:ufunction(BlueprintImplementableEvent) public function OnParametersInitialized() : Void;
  @:ufunction(BlueprintImplementableEvent) public function SetReticleMaterialParamFloat(ParamName : unreal.FName, value : unreal.Float32) : Void;
  @:ufunction(BlueprintImplementableEvent) public function SetReticleMaterialParamVector(ParamName : unreal.FName, value : unreal.FVector) : Void;
  @:ufunction(BlueprintCallable) @:final public function FaceTowardSource(bFaceIn2D : Bool) : Void;
  
  /**
    In the future, we may want to grab things like sockets off of this.
  **/
  @:uproperty private var TargetingActor : unreal.AActor;
  
  /**
    This is used in the process of determining whether we should replicate to a specific client.
  **/
  @:uproperty private var MasterPC : unreal.APlayerController;
  
  /**
    If the target is an actor snap to it's location
  **/
  @:uproperty public var bSnapToTargetedActor : Bool;
  
  /**
    Makes the reticle's default owner-facing behavior operate in 2D (flat) instead of 3D (pitched). Defaults to true.
  **/
  @:uproperty public var bFaceOwnerFlat : Bool;
  @:uproperty public var Parameters : unreal.gameplayabilities.FWorldReticleParameters;
  
}
