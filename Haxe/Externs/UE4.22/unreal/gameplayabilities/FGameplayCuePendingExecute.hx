/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Structure to keep track of pending gameplay cues that haven't been applied yet.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/GameplayCue_Types.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FGameplayCuePendingExecute {
  
  /**
    Store the full cue parameters or just the effect context depending on type
  **/
  @:uproperty public var CueParameters : unreal.gameplayabilities.FGameplayCueParameters;
  
  /**
    If this cue is from a spec, here's the copy of that spec
  **/
  @:uproperty public var FromSpec : unreal.gameplayabilities.FGameplayEffectSpecForRPC;
  
  /**
    What component to send the cue on
  **/
  @:uproperty public var OwningComponent : unreal.gameplayabilities.UAbilitySystemComponent;
  
  /**
    What type of payload is attached to this cue
  **/
  @:uproperty public var PayloadType : unreal.gameplayabilities.EGameplayCuePayloadType;
  
  /**
    Prediction key that spawned this cue
  **/
  @:uproperty public var PredictionKey : unreal.gameplayabilities.FPredictionKey;
  
}
