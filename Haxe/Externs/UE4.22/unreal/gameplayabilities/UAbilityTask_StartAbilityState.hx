/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  An ability state is simply an ability task that provides a way to handle the ability being interrupted.
  You can use ability states to do state-specific cleanup if the ability ends or was interrupted at a certain point during it's execution.
  
  An ability state will always result in either 'OnStateEnded' or 'OnStateInterrupted' being called.
  
  'OnStateEnded' will be called if:
  - The ability itself ends via AGameplayAbility::EndAbility
  - The ability state is manually ended via AGameplayAbility::EndAbilityState
  - Another ability state is started will 'bEndCurrentState' set to true
  
  'OnStateInterrupted' will be called if:
  - The ability itself is cancelled via AGameplayAbility::CancelAbility
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/Tasks/AbilityTask_StartAbilityState.h")
@:uextern @:uclass extern class UAbilityTask_StartAbilityState extends unreal.gameplayabilities.UAbilityTask {
  
  /**
    Invoked if the ability was interrupted and this state is active.
  **/
  @:uproperty public var OnStateInterrupted : unreal.gameplayabilities.FAbilityStateDelegate;
  
  /**
    Invoked if 'EndAbilityState' is called or if 'EndAbility' is called and this state is active.
  **/
  @:uproperty public var OnStateEnded : unreal.gameplayabilities.FAbilityStateDelegate;
  
  /**
    Starts a new ability state.
    
    @param StateName The name of the state.
    @param bEndCurrentState If true, all other active ability states will be ended.
  **/
  @:ufunction(BlueprintCallable) static public function StartAbilityState(OwningAbility : unreal.gameplayabilities.UGameplayAbility, StateName : unreal.FName, bEndCurrentState : Bool = true) : unreal.gameplayabilities.UAbilityTask_StartAbilityState;
  
}
