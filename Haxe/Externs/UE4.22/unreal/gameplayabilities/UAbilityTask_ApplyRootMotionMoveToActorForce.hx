/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Applies force to character's movement
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/Tasks/AbilityTask_ApplyRootMotionMoveToActorForce.h")
@:uextern @:uclass extern class UAbilityTask_ApplyRootMotionMoveToActorForce extends unreal.gameplayabilities.UAbilityTask_ApplyRootMotion_Base {
  @:uproperty private var TargetLerpSpeedVerticalCurve : unreal.UCurveFloat;
  @:uproperty private var TargetLerpSpeedHorizontalCurve : unreal.UCurveFloat;
  
  /**
    Maps real time to movement fraction curve to affect the speed of the
    movement through the path
    Curve X is 0 to 1 normalized real time (a fraction of the duration)
    Curve Y is 0 to 1 is what percent of the move should be at a given X
    Default if unset is a 1:1 correspondence
  **/
  @:uproperty private var TimeMappingCurve : unreal.UCurveFloat;
  @:uproperty private var PathOffsetCurve : unreal.UCurveVector;
  @:uproperty private var NewMovementMode : unreal.EMovementMode;
  @:uproperty private var Duration : unreal.Float32;
  @:uproperty private var OffsetAlignment : unreal.gameplayabilities.ERootMotionMoveToActorTargetOffsetType;
  @:uproperty private var TargetLocationOffset : unreal.FVector;
  @:uproperty private var TargetActor : unreal.AActor;
  @:uproperty private var TargetLocation : unreal.FVector;
  @:uproperty private var StartLocation : unreal.FVector;
  @:uproperty public var OnFinished : unreal.gameplayabilities.FApplyRootMotionMoveToActorForceDelegate;
  
  /**
    Apply force to character's movement
  **/
  @:ufunction(BlueprintCallable) static public function ApplyRootMotionMoveToActorForce(OwningAbility : unreal.gameplayabilities.UGameplayAbility, TaskInstanceName : unreal.FName, TargetActor : unreal.AActor, TargetLocationOffset : unreal.FVector, OffsetAlignment : unreal.gameplayabilities.ERootMotionMoveToActorTargetOffsetType, Duration : unreal.Float32, TargetLerpSpeedHorizontal : unreal.UCurveFloat, TargetLerpSpeedVertical : unreal.UCurveFloat, bSetNewMovementMode : Bool, MovementMode : unreal.EMovementMode, bRestrictSpeedToExpected : Bool, PathOffsetCurve : unreal.UCurveVector, TimeMappingCurve : unreal.UCurveFloat, VelocityOnFinishMode : unreal.ERootMotionFinishVelocityMode, SetVelocityOnFinish : unreal.FVector, ClampVelocityOnFinish : unreal.Float32, bDisableDestinationReachedInterrupt : Bool) : unreal.gameplayabilities.UAbilityTask_ApplyRootMotionMoveToActorForce;
  
  /**
    Apply force to character's movement using an index into targetData instead of using an actor directly.
  **/
  @:ufunction(BlueprintCallable) static public function ApplyRootMotionMoveToTargetDataActorForce(OwningAbility : unreal.gameplayabilities.UGameplayAbility, TaskInstanceName : unreal.FName, TargetDataHandle : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle, TargetDataIndex : unreal.Int32, TargetActorIndex : unreal.Int32, TargetLocationOffset : unreal.FVector, OffsetAlignment : unreal.gameplayabilities.ERootMotionMoveToActorTargetOffsetType, Duration : unreal.Float32, TargetLerpSpeedHorizontal : unreal.UCurveFloat, TargetLerpSpeedVertical : unreal.UCurveFloat, bSetNewMovementMode : Bool, MovementMode : unreal.EMovementMode, bRestrictSpeedToExpected : Bool, PathOffsetCurve : unreal.UCurveVector, TimeMappingCurve : unreal.UCurveFloat, VelocityOnFinishMode : unreal.ERootMotionFinishVelocityMode, SetVelocityOnFinish : unreal.FVector, ClampVelocityOnFinish : unreal.Float32, bDisableDestinationReachedInterrupt : Bool) : unreal.gameplayabilities.UAbilityTask_ApplyRootMotionMoveToActorForce;
  @:ufunction @:final public function OnTargetActorSwapped(OriginalTarget : unreal.AActor, NewTarget : unreal.AActor) : Void;
  @:ufunction @:final private function OnRep_TargetLocation() : Void;
  
}
