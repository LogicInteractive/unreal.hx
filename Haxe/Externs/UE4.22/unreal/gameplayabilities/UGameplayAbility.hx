/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Abilities define custom gameplay logic that can be activated by players or external game logic
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/GameplayAbility.h")
@:uextern @:uclass extern class UGameplayAbility extends unreal.UObject implements unreal.gameplaytasks.IGameplayTaskOwnerInterface {
  
  /**
    Returns the actor info associated with this ability, has cached pointers to useful objects
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetActorInfo() : unreal.gameplayabilities.FGameplayAbilityActorInfo;
  
  /**
    Returns the actor that owns this ability, which may not have a physical location
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetOwningActorFromActorInfo() : unreal.AActor;
  
  /**
    Returns the physical actor that is executing this ability. May be null
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAvatarActorFromActorInfo() : unreal.AActor;
  
  /**
    Convenience method for abilities to get skeletal mesh component - useful for aiming abilities
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetOwningComponentFromActorInfo() : unreal.USkeletalMeshComponent;
  
  /**
    Returns the AbilitySystemComponent that is activating this ability
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAbilitySystemComponentFromActorInfo() : unreal.gameplayabilities.UAbilitySystemComponent;
  
  /**
    Retrieves the EffectContext of the GameplayEffect that granted this ability. Can only be called on instanced abilities.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetGrantedByEffectContext() : unreal.gameplayabilities.FGameplayEffectContextHandle;
  
  /**
    Generates a GameplayEffectContextHandle from our owner and an optional TargetData.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetContextFromOwner(OptionalTargetData : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle) : unreal.gameplayabilities.FGameplayEffectContextHandle;
  
  /**
    Convenience method for abilities to get outgoing gameplay effect specs (for example, to pass on to projectiles to apply to whoever they hit)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function MakeOutgoingGameplayEffectSpec(GameplayEffectClass : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>, Level : unreal.Float32 = 1.000000) : unreal.gameplayabilities.FGameplayEffectSpecHandle;
  
  /**
    Returns the time in seconds remaining on the currently active cooldown.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCooldownTimeRemaining() : unreal.Float32;
  
  /**
    Sets rather ability block flags are enabled or disabled. Only valid on instanced abilities
  **/
  @:ufunction(BlueprintCallable) public function SetShouldBlockOtherAbilities(bShouldBlockAbilities : Bool) : Void;
  
  /**
    Call from Blueprint to cancel the ability naturally
  **/
  @:ufunction(BlueprintCallable) @:final public function K2_CancelAbility() : Void;
  
  /**
    Sets whether the ability should ignore cancel requests. Only valid on instanced abilities
  **/
  @:ufunction(BlueprintCallable) public function SetCanBeCanceled(bCanBeCanceled : Bool) : Void;
  
  /**
    Attempts to commit the ability (spend resources, etc). This our last chance to fail. Child classes that override ActivateAbility must call this themselves!
  **/
  @:ufunction(BlueprintCallable) public function K2_CommitAbility() : Bool;
  
  /**
    Attempts to commit the ability's cooldown only. If BroadcastCommitEvent is true, it will broadcast the commit event that tasks like WaitAbilityCommit are listening for.
  **/
  @:ufunction(BlueprintCallable) public function K2_CommitAbilityCooldown(BroadcastCommitEvent : Bool = false, ForceCooldown : Bool = false) : Bool;
  
  /**
    Attempts to commit the ability's cost only. If BroadcastCommitEvent is true, it will broadcast the commit event that tasks like WaitAbilityCommit are listening for.
  **/
  @:ufunction(BlueprintCallable) public function K2_CommitAbilityCost(BroadcastCommitEvent : Bool = false) : Bool;
  
  /**
    Checks the ability's cooldown, but does not apply it.
  **/
  @:ufunction(BlueprintCallable) public function K2_CheckAbilityCooldown() : Bool;
  
  /**
    Checks the ability's cost, but does not apply it.
  **/
  @:ufunction(BlueprintCallable) public function K2_CheckAbilityCost() : Bool;
  
  /**
    BP event called from CommitAbility
  **/
  @:ufunction(BlueprintImplementableEvent) public function K2_CommitExecute() : Void;
  
  /**
    Returns the currently playing montage for this ability, if any
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCurrentMontage() : unreal.UAnimMontage;
  
  /**
    Returns current level of the Ability
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAbilityLevel() : unreal.Int32;
  
  /**
    Retrieves the SourceObject associated with this ability. Can only be called on instanced abilities.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCurrentSourceObject() : unreal.UObject;
  
  /**
    Invalidates the current prediction key. This should be used in cases where there is a valid prediction window, but the server is doing logic that only he can do, and afterwards performs an action that the client could predict (had the client been able to run the server-only code prior).
    This returns instantly and has no other side effects other than clearing the current prediction key.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function InvalidateClientPredictionKey() : Void;
  
  /**
    Removes the GameplayEffect that granted this ability. Can only be called on instanced abilities.
  **/
  @:ufunction(BlueprintCallable) public function RemoveGrantedByEffect() : Void;
  
  /**
    Active montage being played by this ability
  **/
  @:uproperty private var CurrentMontage : unreal.UAnimMontage;
  
  /**
    List of currently active tasks, do not modify directly
  **/
  @:uproperty private var ActiveTasks : unreal.TArray<unreal.gameplaytasks.UGameplayTask>;
  
  /**
    This ability is blocked if the target actor/component has any of these tags
  **/
  @:uproperty private var TargetBlockedTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    This ability can only be activated if the target actor/component has all of these tags
  **/
  @:uproperty private var TargetRequiredTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    This ability is blocked if the source actor/component has any of these tags
  **/
  @:uproperty private var SourceBlockedTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    This ability can only be activated if the source actor/component has all of these tags
  **/
  @:uproperty private var SourceRequiredTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    This ability is blocked if the activating actor/component has any of these tags
  **/
  @:uproperty private var ActivationBlockedTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    This ability can only be activated if the activating actor/component has all of these tags
  **/
  @:uproperty private var ActivationRequiredTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Tags to apply to activating owner while this ability is active
  **/
  @:uproperty private var ActivationOwnedTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Abilities with these tags are blocked while this ability is active
  **/
  @:uproperty private var BlockAbilitiesWithTag : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Abilities with these tags are cancelled when this ability is executed
  **/
  @:uproperty private var CancelAbilitiesWithTag : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Abilities matching query are cancelled when this ability is executed
  **/
  @:uproperty private var CancelAbilitiesMatchingTagQuery : unreal.gameplaytags.FGameplayTagQuery;
  
  /**
    This GameplayEffect represents the cooldown. It will be applied when the ability is committed and the ability cannot be used again until it is expired.
  **/
  @:uproperty private var CooldownGameplayEffectClass : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>;
  
  /**
    Triggers to determine if this ability should execute in response to an event
  **/
  @:uproperty private var AbilityTriggers : unreal.TArray<unreal.gameplayabilities.FAbilityTriggerData>;
  
  /**
    This GameplayEffect represents the cost (mana, stamina, etc) of the ability. It will be applied when the ability is committed.
  **/
  @:uproperty private var CostGameplayEffectClass : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>;
  @:uproperty private var NetExecutionPolicy : unreal.gameplayabilities.EGameplayAbilityNetExecutionPolicy;
  @:uproperty private var CurrentEventData : unreal.gameplayabilities.FGameplayEventData;
  
  /**
    This is information specific to this instance of the ability. E.g, whether it is predicting, authoring, confirmed, etc.
  **/
  @:uproperty private var CurrentActivationInfo : unreal.gameplayabilities.FGameplayAbilityActivationInfo;
  @:uproperty private var InstancingPolicy : unreal.gameplayabilities.EGameplayAbilityInstancingPolicy;
  
  /**
    Protected properties
  **/
  @:uproperty private var ReplicationPolicy : unreal.gameplayabilities.EGameplayAbilityReplicationPolicy;
  
  /**
    Set when the remote instance of this ability has ended (but the local instance may still be running or finishing up
  **/
  @:uproperty public var RemoteInstanceEnded : Bool;
  
  /**
    If true, this ability will always replicate input press/release events to the server.
  **/
  @:uproperty public var bReplicateInputDirectly : Bool;
  
  /**
    This ability has these tags
  **/
  @:uproperty public var AbilityTags : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Returns true if this ability can be activated right now. Has no side effects
  **/
  @:ufunction(BlueprintImplementableEvent) @:thisConst private function K2_ShouldAbilityRespondToEvent(ActorInfo : unreal.gameplayabilities.FGameplayAbilityActorInfo, Payload : unreal.gameplayabilities.FGameplayEventData) : Bool;
  
  /**
    Sends a gameplay event, also creates a prediction window
  **/
  @:ufunction(BlueprintCallable) private function SendGameplayEvent(EventTag : unreal.gameplaytags.FGameplayTag, Payload : unreal.gameplayabilities.FGameplayEventData) : Void;
  
  /**
    Returns true if this ability can be activated right now. Has no side effects
  **/
  @:ufunction(BlueprintImplementableEvent) @:thisConst private function K2_CanActivateAbility(ActorInfo : unreal.gameplayabilities.FGameplayAbilityActorInfo, RelevantTags : unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>) : Bool;
  
  /**
    The main function that defines what an ability does.
     -Child classes will want to override this
     -This function graph should call CommitAbility
     -This function graph should call EndAbility
    
     Latent/async actions are ok in this graph. Note that Commit and EndAbility calling requirements speak to the K2_ActivateAbility graph.
     In C++, the call to K2_ActivateAbility() may return without CommitAbility or EndAbility having been called. But it is expected that this
     will only occur when latent/async actions are pending. When K2_ActivateAbility logically finishes, then we will expect Commit/End to have been called.
  **/
  @:ufunction(BlueprintImplementableEvent) private function K2_ActivateAbility() : Void;
  @:ufunction(BlueprintImplementableEvent) private function K2_ActivateAbilityFromEvent(EventData : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayEventData>>) : Void;
  
  /**
    Call from kismet to end the ability naturally
  **/
  @:ufunction(BlueprintCallable) private function K2_EndAbility() : Void;
  
  /**
    Kismet event, will be called if an ability ends normally or abnormally
  **/
  @:ufunction(BlueprintImplementableEvent) private function K2_OnEndAbility(bWasCancelled : Bool) : Void;
  
  /**
    Apply a gameplay effect to the owner of this ability
  **/
  @:ufunction(BlueprintCallable) @:final private function BP_ApplyGameplayEffectToOwner(GameplayEffectClass : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>, GameplayEffectLevel : unreal.Int32 = 1, Stacks : unreal.Int32 = 1) : unreal.gameplayabilities.FActiveGameplayEffectHandle;
  
  /**
    Apply a previously created gameplay effect spec to the owner of this ability
  **/
  @:ufunction(BlueprintCallable) @:final private function K2_ApplyGameplayEffectSpecToOwner(EffectSpecHandle : unreal.Const<unreal.gameplayabilities.FGameplayEffectSpecHandle>) : unreal.gameplayabilities.FActiveGameplayEffectHandle;
  
  /**
    Apply a gameplay effect to a Target
  **/
  @:ufunction(BlueprintCallable) @:final private function BP_ApplyGameplayEffectToTarget(TargetData : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle, GameplayEffectClass : unreal.TSubclassOf<unreal.gameplayabilities.UGameplayEffect>, GameplayEffectLevel : unreal.Int32 = 1, Stacks : unreal.Int32 = 1) : unreal.TArray<unreal.gameplayabilities.FActiveGameplayEffectHandle>;
  
  /**
    Apply a previously created gameplay effect spec to a target
  **/
  @:ufunction(BlueprintCallable) @:final private function K2_ApplyGameplayEffectSpecToTarget(EffectSpecHandle : unreal.Const<unreal.gameplayabilities.FGameplayEffectSpecHandle>, TargetData : unreal.gameplayabilities.FGameplayAbilityTargetDataHandle) : unreal.TArray<unreal.gameplayabilities.FActiveGameplayEffectHandle>;
  
  /**
    Removes GameplayEffects from owner which match the given asset level tags
  **/
  @:ufunction(BlueprintCallable) @:final private function BP_RemoveGameplayEffectFromOwnerWithAssetTags(WithAssetTags : unreal.gameplaytags.FGameplayTagContainer, StacksToRemove : unreal.Int32 = -1) : Void;
  
  /**
    Removes GameplayEffects from owner which grant the given tags
  **/
  @:ufunction(BlueprintCallable) @:final private function BP_RemoveGameplayEffectFromOwnerWithGrantedTags(WithGrantedTags : unreal.gameplaytags.FGameplayTagContainer, StacksToRemove : unreal.Int32 = -1) : Void;
  
  /**
    Removes GameplayEffect from owner that match the given handle
  **/
  @:ufunction(BlueprintCallable) @:final private function BP_RemoveGameplayEffectFromOwnerWithHandle(Handle : unreal.gameplayabilities.FActiveGameplayEffectHandle, StacksToRemove : unreal.Int32 = -1) : Void;
  
  /**
    Invoke a gameplay cue on the ability owner
  **/
  @:ufunction(BlueprintCallable) private function K2_ExecuteGameplayCue(GameplayCueTag : unreal.gameplaytags.FGameplayTag, Context : unreal.gameplayabilities.FGameplayEffectContextHandle) : Void;
  
  /**
    Invoke a gameplay cue on the ability owner, with extra parameters
  **/
  @:ufunction(BlueprintCallable) private function K2_ExecuteGameplayCueWithParams(GameplayCueTag : unreal.gameplaytags.FGameplayTag, GameplayCueParameters : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayCueParameters>>) : Void;
  
  /**
    Adds a persistent gameplay cue to the ability owner. Optionally will remove if ability ends
  **/
  @:ufunction(BlueprintCallable) private function K2_AddGameplayCue(GameplayCueTag : unreal.gameplaytags.FGameplayTag, Context : unreal.gameplayabilities.FGameplayEffectContextHandle, bRemoveOnAbilityEnd : Bool = true) : Void;
  
  /**
    Adds a persistent gameplay cue to the ability owner. Optionally will remove if ability ends
  **/
  @:ufunction(BlueprintCallable) private function K2_AddGameplayCueWithParams(GameplayCueTag : unreal.gameplaytags.FGameplayTag, GameplayCueParameter : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayCueParameters>>, bRemoveOnAbilityEnd : Bool = true) : Void;
  
  /**
    Removes a persistent gameplay cue from the ability owner
  **/
  @:ufunction(BlueprintCallable) private function K2_RemoveGameplayCue(GameplayCueTag : unreal.gameplaytags.FGameplayTag) : Void;
  
  /**
    Destroys instanced-per-execution abilities. Instance-per-actor abilities should 'reset'. Non instance abilities - what can we do?
  **/
  @:ufunction(BlueprintCallable) @:final private function ConfirmTaskByInstanceName(InstanceName : unreal.FName, bEndTask : Bool) : Void;
  
  /**
    Add any task with this instance name to a list to be ended (not canceled) next frame.  See also CancelTaskByInstanceName.
  **/
  @:ufunction(BlueprintCallable) @:final private function EndTaskByInstanceName(InstanceName : unreal.FName) : Void;
  
  /**
    Add any task with this instance name to a list to be canceled (not ended) next frame.  See also EndTaskByInstanceName.
  **/
  @:ufunction(BlueprintCallable) @:final private function CancelTaskByInstanceName(InstanceName : unreal.FName) : Void;
  
  /**
    Ends any active ability state task with the given name. If name is 'None' all active states will be ended (in an arbitrary order).
  **/
  @:ufunction(BlueprintCallable) @:final private function EndAbilityState(OptionalStateNameToEnd : unreal.FName) : Void;
  
  /**
    Immediately jumps the active montage to a section
  **/
  @:ufunction(BlueprintCallable) @:final private function MontageJumpToSection(SectionName : unreal.FName) : Void;
  
  /**
    Sets pending section on active montage
  **/
  @:ufunction(BlueprintCallable) @:final private function MontageSetNextSectionName(FromSectionName : unreal.FName, ToSectionName : unreal.FName) : Void;
  
  /**
    Stops the current animation montage.
    
    @param OverrideBlendTime If < 0, will override the BlendOutTime parameter on the AnimMontage instance
  **/
  @:ufunction(BlueprintCallable) @:final private function MontageStop(OverrideBlendOutTime : unreal.Float32 = -1.000000) : Void;
  
  /**
    Creates a target location from where the owner avatar is
  **/
  @:ufunction(BlueprintCallable) @:final private function MakeTargetLocationInfoFromOwnerActor() : unreal.gameplayabilities.FGameplayAbilityTargetingLocationInfo;
  
  /**
    Creates a target location from a socket on the owner avatar's skeletal mesh
  **/
  @:ufunction(BlueprintCallable) @:final private function MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(SocketName : unreal.FName) : unreal.gameplayabilities.FGameplayAbilityTargetingLocationInfo;
  // GameplayTaskOwnerInterface interface implementation
  
}
