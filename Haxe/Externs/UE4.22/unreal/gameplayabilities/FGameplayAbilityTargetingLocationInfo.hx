/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;

/**
  Structure that stores a location in one of several different formats
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Public/Abilities/GameplayAbilityTargetTypes.h")
@:uextern @:ustruct extern class FGameplayAbilityTargetingLocationInfo {
  
  /**
    If SourceComponent is valid, this is the name of the socket transform that will be used. If no Socket is provided, SourceComponent's transform will be used.
  **/
  @:uproperty public var SourceSocketName : unreal.FName;
  
  /**
    Ability that will be using the targeting data
  **/
  @:uproperty public var SourceAbility : unreal.gameplayabilities.UGameplayAbility;
  
  /**
    Socket-based targeting requires a skeletal mesh component to check for the named socket.
  **/
  @:uproperty public var SourceComponent : unreal.UMeshComponent;
  
  /**
    A source actor is needed for Actor-based targeting, but not for Socket-based targeting.
  **/
  @:uproperty public var SourceActor : unreal.AActor;
  
  /**
    A literal world transform can be used, if one has been calculated outside of the actor using the ability.
  **/
  @:uproperty public var LiteralTransform : unreal.FTransform;
  
  /**
    Type of location used - will determine what data is transmitted over the network and what fields are used when calculating position.
  **/
  @:uproperty public var LocationType : unreal.gameplayabilities.EGameplayAbilityTargetingLocationType;
  
}
