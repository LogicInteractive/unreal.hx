/**
 *
 * WARNING! This file was autogenerated by:
 *  _   _ _   _ __   __
 * | | | | | | |\ \ / /
 * | | | | |_| | \ V /
 * | | | |  _  | /   \
 * | |_| | | | |/ /^\ \
 *  \___/\_| |_/\/   \/
 *
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.blueprintmaterialtexturenodes;

/**
  *      Function library class.
  *      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.
  *
  *      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.
  *      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.
  *      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.
  *      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.
  *                              Its lets you name the node using characters not allowed in C++ function names.
  *      CompactNodeTitle - the word(s) that appear on the node.
  *      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.
  *                              Good example is "Print String" node which you can find also by using keyword "log".
  *      Category -      the category your node will be under in the Blueprint drop-down menu.
  *
  *      For more info on custom blueprint nodes visit documentation:
  *      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation
**/
@:umodule("BlueprintMaterialTextureNodes")
@:glueCppIncludes("BlueprintMaterialTextureNodesBPLibrary.h")
@:uextern @:uclass extern class UBlueprintMaterialTextureNodesBPLibrary extends unreal.UBlueprintFunctionLibrary {

  /**
    Samples a texel from a Texture 2D with VectorDisplacement Compression
  **/
  @:ufunction(BlueprintCallable) static public function Texture2D_SampleUV_EditorOnly(Texture : unreal.UTexture2D, UV : unreal.FVector2D) : unreal.FLinearColor;

  /**
    Samples an array of values from a Texture Render Target 2D. Currently only 4 channel formats are supported.
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function RenderTarget_SampleRectangle_EditorOnly(InRenderTarget : unreal.UTextureRenderTarget2D, InRect : unreal.FLinearColor) : unreal.TArray<unreal.FLinearColor>;

  /**
    Samples a value from a Texture Render Target 2D. Currently only 4 channel formats are supported.
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function RenderTarget_SampleUV_EditorOnly(InRenderTarget : unreal.UTextureRenderTarget2D, UV : unreal.FVector2D) : unreal.FLinearColor;

  /**
    Creates a new Material Instance Constant asset
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function CreateMIC_EditorOnly(Material : unreal.UMaterialInterface, @:opt("MIC_") ?Name : unreal.FString ) : unreal.UMaterialInstanceConstant;
  @:ufunction static public function UpdateMIC(MIC : unreal.UMaterialInstanceConstant) : Void;

  /**
    Sets a Scalar Parameter value in a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICScalarParam_EditorOnly(Material : unreal.UMaterialInstanceConstant, @:opt("test") ?ParamName : unreal.FString , Value : unreal.Float32 = 0.000000) : Bool;

  /**
    Sets a Vector Parameter value in a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICVectorParam_EditorOnly(Material : unreal.UMaterialInstanceConstant, ParamName : unreal.FString, @:opt("(R=0.000000,G=0.000000,B=0.000000,A=0.000000)") Value : unreal.FLinearColor) : Bool;

  /**
    Sets a Texture Parameter value in a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICTextureParam_EditorOnly(Material : unreal.UMaterialInstanceConstant, ParamName : unreal.FString, @:opt("None") Texture : unreal.UTexture2D) : Bool;

  /**
    Overrides the Shading Model of a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICShadingModel_EditorOnly(Material : unreal.UMaterialInstanceConstant, ShadingModel : unreal.EMaterialShadingModel = MSM_DefaultLit) : Bool;

  /**
    Overrides the Blend Mode of a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICBlendMode_EditorOnly(Material : unreal.UMaterialInstanceConstant, BlendMode : unreal.EBlendMode = BLEND_Opaque) : Bool;

  /**
    Overrides the Two Sided setting of a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICTwoSided_EditorOnly(Material : unreal.UMaterialInstanceConstant, TwoSided : Bool = false) : Bool;

  /**
    Overrides the Blend Mode of a Material Instance Constant
    Only works in the editor
  **/
  @:ufunction(BlueprintCallable) static public function SetMICDitheredLODTransition_EditorOnly(Material : unreal.UMaterialInstanceConstant, DitheredLODTransition : Bool = false) : Bool;

}
