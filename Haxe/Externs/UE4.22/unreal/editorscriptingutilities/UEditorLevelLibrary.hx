/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editorscriptingutilities;

/**
  Utility class to do most of the common functionalities in the World Editor.
  The editor should not be in play in editor mode.
**/
@:umodule("EditorScriptingUtilities")
@:glueCppIncludes("EditorLevelLibrary.h")
@:uextern @:uclass extern class UEditorLevelLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Find all loaded Actors in the world editor. Exclude actor that are pending kill, in PIE, PreviewEditor, ...
    @return      List of found Actors
  **/
  @:ufunction(BlueprintCallable) static public function GetAllLevelActors() : unreal.TArray<unreal.AActor>;
  
  /**
    Find all loaded ActorComponent own by an actor in the world editor. Exclude actor that are pending kill, in PIE, PreviewEditor, ...
    @return      List of found ActorComponent
  **/
  @:ufunction(BlueprintCallable) static public function GetAllLevelActorsComponents() : unreal.TArray<unreal.UActorComponent>;
  
  /**
    Find all loaded Actors that are selected in the world editor. Exclude actor that are pending kill, in PIE, PreviewEditor, ...
    @param       ActorClass      Actor Class to find.
    @return      List of found Actors
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedLevelActors() : unreal.TArray<unreal.AActor>;
  
  /**
    Clear the current world editor selection and select the provided actors. Exclude actor that are pending kill, in PIE, PreviewEditor, ...
    @param       ActorsToSelect  Actor that should be selected in the world editor.
  **/
  @:ufunction(BlueprintCallable) static public function SetSelectedLevelActors(ActorsToSelect : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>) : Void;
  
  /**
    Create an actor and place it in the world editor. The Actor can be created from a Factory, Archetype, Blueprint, Class or an Asset.
    The actor will be created in the current level and will be selected.
    @param       ObjectToUse             Asset to attempt to use for an actor to place.
    @param       Location                Location of the new actor.
    @return      The created actor.
  **/
  @:ufunction(BlueprintCallable) static public function SpawnActorFromObject(ObjectToUse : unreal.UObject, Location : unreal.FVector, Rotation : unreal.FRotator) : unreal.AActor;
  
  /**
    Create an actor and place it in the world editor. Can be created from a Blueprint or a Class.
    The actor will be created in the current level and will be selected.
    @param       ActorClass              Asset to attempt to use for an actor to place.
    @param       Location                Location of the new actor.
    @return      The created actor.
  **/
  @:ufunction(BlueprintCallable) static public function SpawnActorFromClass(ActorClass : unreal.TSubclassOf<unreal.AActor>, Location : unreal.FVector, Rotation : unreal.FRotator) : unreal.AActor;
  
  /**
    Destroy the actor from the world editor. Notify the Editor that the actor got destroyed.
    @param       ToDestroyActor  Actor to destroy.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DestroyActor(ActorToDestroy : unreal.AActor) : Bool;
  
  /**
    Find the World in the world editor. It can then be used as WorldContext by other libraries like GameplayStatics.
    @return      The World used by the world editor.
  **/
  @:ufunction(BlueprintCallable) static public function GetEditorWorld() : unreal.UWorld;
  
  /**
    Close the current Persistent Level (without saving it). Create a new blank Level and save it. Load the new created level.
    @param       AssetPath               Asset Path of where the level will be saved.
                 ie. /Game/MyFolder/MyAsset
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function NewLevel(AssetPath : unreal.FString) : Bool;
  
  /**
    Close the current Persistent Level (without saving it). Create a new Level base on another level and save it. Load the new created level.
    @param       AssetPath                               Asset Path of where the level will be saved.
                 ie. /Game/MyFolder/MyAsset
    @param       TemplateAssetPath               Level to be used as Template.
                 ie. /Game/MyFolder/MyAsset
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function NewLevelFromTemplate(AssetPath : unreal.FString, TemplateAssetPath : unreal.FString) : Bool;
  
  /**
    Close the current Persistent Level (without saving it). Loads the specified level.
    @param       AssetPath                               Asset Path of the level to be loaded.
                 ie. /Game/MyFolder/MyAsset
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function LoadLevel(AssetPath : unreal.FString) : Bool;
  
  /**
    Saves the specified Level. Must already be saved at lease once to have a valid path.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveCurrentLevel() : Bool;
  
  /**
    Saves all Level currently loaded by the World Editor.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveAllDirtyLevels() : Bool;
  
  /**
    Set the current level used by the world editor.
    If more than one level shares the same name, the first one encounter of that level name will be used.
    @param       LevelName       The name of the Level the actor belongs to (same name as in the ContentBrowser).
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentLevelByName(LevelName : unreal.FName) : Bool;
  
  /**
    Find the references of the material MaterialToReplaced on all the MeshComponents provided and replace it by NewMaterial.
    @param       MeshComponents                  List of MeshComponent to search from.
    @param       MaterialToBeReplaced    Material we want to replace.
    @param       NewMaterial                             Material to replace MaterialToBeReplaced by.
  **/
  @:ufunction(BlueprintCallable) static public function ReplaceMeshComponentsMaterials(MeshComponents : unreal.Const<unreal.PRef<unreal.TArray<unreal.UMeshComponent>>>, MaterialToBeReplaced : unreal.UMaterialInterface, NewMaterial : unreal.UMaterialInterface) : Void;
  
  /**
    Find the references of the material MaterialToReplaced on all the MeshComponents of all the Actors provided and replace it by NewMaterial.
    @param       Actors                                  List of Actors to search from.
    @param       MaterialToBeReplaced    Material we want to replace.
    @param       NewMaterial                             Material to replace MaterialToBeReplaced by.
  **/
  @:ufunction(BlueprintCallable) static public function ReplaceMeshComponentsMaterialsOnActors(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, MaterialToBeReplaced : unreal.UMaterialInterface, NewMaterial : unreal.UMaterialInterface) : Void;
  
  /**
    Find the references of the mesh MeshToBeReplaced on all the MeshComponents provided and replace it by NewMesh.
    The editor should not be in play in editor mode.
    @param       MeshComponents                  List of MeshComponent to search from.
    @param       MeshToBeReplaced                Mesh we want to replace.
    @param       NewMesh                                 Mesh to replace MeshToBeReplaced by.
  **/
  @:ufunction(BlueprintCallable) static public function ReplaceMeshComponentsMeshes(MeshComponents : unreal.Const<unreal.PRef<unreal.TArray<unreal.UStaticMeshComponent>>>, MeshToBeReplaced : unreal.UStaticMesh, NewMesh : unreal.UStaticMesh) : Void;
  
  /**
    Find the references of the mesh MeshToBeReplaced on all the MeshComponents of all the Actors provided and replace it by NewMesh.
    @param       Actors                                  List of Actors to search from.
    @param       MeshToBeReplaced                Mesh we want to replace.
    @param       NewMesh                                 Mesh to replace MeshToBeReplaced by.
  **/
  @:ufunction(BlueprintCallable) static public function ReplaceMeshComponentsMeshesOnActors(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, MeshToBeReplaced : unreal.UStaticMesh, NewMesh : unreal.UStaticMesh) : Void;
  
  /**
    Replace in the level all Actors provided with a new actor of type ActorClass. Destroy all Actors provided.
    @param       Actors                                  List of Actors to replace.
    @param       ActorClass                              Class/Blueprint of the new actor that will be spawn.
    @param       StaticMeshPackagePath   If the list contains Brushes and it is requested to change them to StaticMesh, StaticMeshPackagePath is the package path to where the StaticMesh will be created. ie. /Game/MyFolder/
  **/
  @:ufunction(BlueprintCallable) static public function ConvertActors(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, ActorClass : unreal.TSubclassOf<unreal.AActor>, StaticMeshPackagePath : unreal.FString) : unreal.TArray<unreal.AActor>;
  
  /**
    Create a new Actor in the level that contains a duplicate of all the Actors Static Meshes Component.
    The ActorsToJoin need to be in the same Level.
    This will have a low impact on performance but may help the edition by grouping the meshes under a single Actor.
    @param       ActorsToJoin                    List of Actors to join.
    @param       JoinOptions                             Options on how to join the actors.
    @return The new created actor.
  **/
  @:ufunction(BlueprintCallable) static public function JoinStaticMeshActors(ActorsToJoin : unreal.Const<unreal.PRef<unreal.TArray<unreal.AStaticMeshActor>>>, JoinOptions : unreal.Const<unreal.PRef<unreal.editorscriptingutilities.FEditorScriptingJoinStaticMeshActorsOptions>>) : unreal.AActor;
  
}
