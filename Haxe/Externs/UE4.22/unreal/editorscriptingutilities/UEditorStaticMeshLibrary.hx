/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editorscriptingutilities;

/**
  Utility class to altering and analyzing a StaticMesh and use the common functionalities of the Mesh Editor.
  The editor should not be in play in editor mode.
**/
@:umodule("EditorScriptingUtilities")
@:glueCppIncludes("EditorStaticMeshLibrary.h")
@:uextern @:uclass extern class UEditorStaticMeshLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Remove then add LODs on a static mesh.
    The static mesh must have at least LOD 0.
    The LOD 0 of the static mesh is kept after removal.
    The build settings of LOD 0 will be applied to all subsequent LODs.
    @param       StaticMesh                              Mesh to process.
    @param       ReductionOptions                Options on how to generate LODs on the mesh.
    @return the number of LODs generated on the input mesh.
    An negative value indicates that the reduction could not be performed. See log for explanation.
    No action will be performed if ReductionOptions.ReductionSettings is empty
  **/
  @:ufunction(BlueprintCallable) static public function SetLods(StaticMesh : unreal.UStaticMesh, ReductionOptions : unreal.Const<unreal.PRef<unreal.editorscriptingutilities.FEditorScriptingMeshReductionOptions>>) : unreal.Int32;
  
  /**
    Adds or create a LOD at DestinationLodIndex using the geometry from SourceStaticMesh SourceLodIndex
    @param       DestinationStaticMesh           The static mesh to set the LOD in.
    @param       DestinationLodIndex                     The index of the LOD to set.
    @param       SourceStaticMesh                        The static mesh to get the LOD from.
    @param       SourceLodIndex                          The index of the LOD to get.
    @param       bReuseExistingMaterialSlots     If true, sections from SourceStaticMesh will be remapped to match the material slots of DestinationStaticMesh
                                                                                           when they have the same material assigned. If false, all material slots of SourceStaticMesh will be appended in DestinationStaticMesh.
    @return      The index of the LOD that was set. It can be different than DestinationLodIndex if it wasn't a valid index.
                         A negative value indicates that the LOD was not set. See log for explanation.
  **/
  @:ufunction(BlueprintCallable) static public function SetLodFromStaticMesh(DestinationStaticMesh : unreal.UStaticMesh, DestinationLodIndex : unreal.Int32, SourceStaticMesh : unreal.UStaticMesh, SourceLodIndex : unreal.Int32, bReuseExistingMaterialSlots : Bool) : unreal.Int32;
  
  /**
    Get number of LODs present on a static mesh.
    @param       StaticMesh                              Mesh to process.
    @return the number of LODs present on the input mesh.
    An negative value indicates that the command could not be executed. See log for explanation.
  **/
  @:ufunction(BlueprintCallable) static public function GetLodCount(StaticMesh : unreal.UStaticMesh) : unreal.Int32;
  
  /**
    Remove LODs on a static mesh except LOD 0.
    @param       StaticMesh                      Mesh to remove LOD from.
    @return A boolean indicating if the removal was successful, true, or not.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveLods(StaticMesh : unreal.UStaticMesh) : Bool;
  
  /**
    Get an array of LOD screen sizes for evaluation.
    @param       StaticMesh                      Mesh to process.
    @return array of LOD screen sizes.
  **/
  @:ufunction(BlueprintCallable) static public function GetLodScreenSizes(StaticMesh : unreal.UStaticMesh) : unreal.TArray<unreal.Float32>;
  
  /**
    Add simple collisions to a static mesh.
    This method replicates what is done when invoking menu entries "Collision > Add [...] Simplified Collision" in the Mesh Editor.
    @param       StaticMesh                              Mesh to generate simple collision for.
    @param       ShapeType                               Options on which simple collision to add to the mesh.
    @return An integer indicating the index of the collision newly created.
    A negative value indicates the addition failed.
  **/
  @:ufunction(BlueprintCallable) static public function AddSimpleCollisions(StaticMesh : unreal.UStaticMesh, ShapeType : unreal.Const<unreal.editorscriptingutilities.EScriptingCollisionShapeType>) : unreal.Int32;
  
  /**
    Get number of simple collisions present on a static mesh.
    @param       StaticMesh                              Mesh to query on.
    @return An integer representing the number of simple collisions on the input static mesh.
    An negative value indicates that the command could not be executed. See log for explanation.
  **/
  @:ufunction(BlueprintCallable) static public function GetSimpleCollisionCount(StaticMesh : unreal.UStaticMesh) : unreal.Int32;
  
  /**
    Get the Collision Trace behavior of a static mesh
    @param       StaticMesh                              Mesh to query on.
    @return the Collision Trace behavior.
  **/
  @:ufunction(BlueprintCallable) static public function GetCollisionComplexity(StaticMesh : unreal.UStaticMesh) : unreal.ECollisionTraceFlag;
  
  /**
    Get number of convex collisions present on a static mesh.
    @param       StaticMesh                              Mesh to query on.
    @return An integer representing the number of convex collisions on the input static mesh.
    An negative value indicates that the command could not be executed. See log for explanation.
  **/
  @:ufunction(BlueprintCallable) static public function GetConvexCollisionCount(StaticMesh : unreal.UStaticMesh) : unreal.Int32;
  
  /**
    Add a convex collision to a static mesh.
    Any existing collisions will be removed from the static mesh.
    This method replicates what is done when invoking menu entry "Collision > Auto Convex Collision" in the Mesh Editor.
    @param       StaticMesh                              Static mesh to add convex collision on.
    @param       HullCount                               Maximum number of convex pieces that will be created. Must be positive.
    @param       MaxHullVerts                    Maximum number of vertices allowed for any generated convex hull.
    @param       HullPrecision                   Number of voxels to use when generating collision. Must be positive.
    @return A boolean indicating if the addition was successful or not.
  **/
  @:ufunction(BlueprintCallable) static public function SetConvexDecompositionCollisions(StaticMesh : unreal.UStaticMesh, HullCount : unreal.Int32, MaxHullVerts : unreal.Int32, HullPrecision : unreal.Int32) : Bool;
  
  /**
    Remove collisions from a static mesh.
    This method replicates what is done when invoking menu entries "Collision > Remove Collision" in the Mesh Editor.
    @param       StaticMesh                      Static mesh to remove collisions from.
    @return A boolean indicating if the removal was successful or not.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveCollisions(StaticMesh : unreal.UStaticMesh) : Bool;
  
  /**
    Enables/disables mesh section collision for a specific LOD.
    @param       StaticMesh                      Static mesh to Enables/disables collisions from.
    @param       bCollisionEnabled       If the collision is enabled or not.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       SectionIndex            Index of the StaticMesh Section.
  **/
  @:ufunction(BlueprintCallable) static public function EnableSectionCollision(StaticMesh : unreal.UStaticMesh, bCollisionEnabled : Bool, LODIndex : unreal.Int32, SectionIndex : unreal.Int32) : Void;
  
  /**
    Checks if a specific LOD mesh section has collision.
    @param       StaticMesh                      Static mesh to remove collisions from.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       SectionIndex            Index of the StaticMesh Section.
    @return True is the collision is enabled for the specified LOD of the StaticMesh section.
  **/
  @:ufunction(BlueprintCallable) static public function IsSectionCollisionEnabled(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, SectionIndex : unreal.Int32) : Bool;
  
  /**
    Enables/disables mesh section shadow casting for a specific LOD.
    @param       StaticMesh                      Static mesh to Enables/disables shadow casting from.
    @param       bCastShadow                     If the section should cast shadow.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       SectionIndex            Index of the StaticMesh Section.
  **/
  @:ufunction(BlueprintCallable) static public function EnableSectionCastShadow(StaticMesh : unreal.UStaticMesh, bCastShadow : Bool, LODIndex : unreal.Int32, SectionIndex : unreal.Int32) : Void;
  
  /**
    Check whether a static mesh has vertex colors
  **/
  @:ufunction(BlueprintCallable) static public function HasVertexColors(StaticMesh : unreal.UStaticMesh) : Bool;
  
  /**
    Check whether a static mesh component has vertex colors
  **/
  @:ufunction(BlueprintCallable) static public function HasInstanceVertexColors(StaticMeshComponent : unreal.UStaticMeshComponent) : Bool;
  
  /**
    Set Generate Lightmap UVs for StaticMesh
  **/
  @:ufunction(BlueprintCallable) static public function SetGenerateLightmapUVs(StaticMesh : unreal.UStaticMesh, bGenerateLightmapUVs : Bool) : Bool;
  
  /**
    Get number of StaticMesh verts for an LOD
  **/
  @:ufunction(BlueprintCallable) static public function GetNumberVerts(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Sets StaticMeshFlag bAllowCPUAccess
  **/
  @:ufunction(BlueprintCallable) static public function SetAllowCPUAccess(StaticMesh : unreal.UStaticMesh, bAllowCPUAccess : Bool) : Void;
  
  /**
    Returns the number of UV channels for the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh to query.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @return the number of UV channels.
  **/
  @:ufunction(BlueprintCallable) static public function GetNumUVChannels(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Adds an empty UV channel at the end of the existing channels on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to add a UV channel.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @return true if a UV channel was added.
  **/
  @:ufunction(BlueprintCallable) static public function AddUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32) : Bool;
  
  /**
    Inserts an empty UV channel at the specified channel index on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to insert a UV channel.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       UVChannelIndex          Index where to insert the UV channel.
    @return true if a UV channel was added.
  **/
  @:ufunction(BlueprintCallable) static public function InsertUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, UVChannelIndex : unreal.Int32) : Bool;
  
  /**
    Removes the UV channel at the specified channel index on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to remove the UV channel.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       UVChannelIndex          Index where to remove the UV channel.
    @return true if the UV channel was removed.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, UVChannelIndex : unreal.Int32) : Bool;
  
  /**
    Generates planar UV mapping in the specified UV channel on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to generate the UV mapping.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       UVChannelIndex          Channel where to save the UV mapping.
    @param       Position                        Position of the center of the projection gizmo.
    @param       Orientation                     Rotation to apply to the projection gizmo.
    @param       Tiling                          The UV tiling to use to generate the UV mapping.
    @return true if the UV mapping was generated.
  **/
  @:ufunction(BlueprintCallable) static public function GeneratePlanarUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, UVChannelIndex : unreal.Int32, Position : unreal.Const<unreal.PRef<unreal.FVector>>, Orientation : unreal.Const<unreal.PRef<unreal.FRotator>>, Tiling : unreal.Const<unreal.PRef<unreal.FVector2D>>) : Bool;
  
  /**
    Generates cylindrical UV mapping in the specified UV channel on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to generate the UV mapping.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       UVChannelIndex          Channel where to save the UV mapping.
    @param       Position                        Position of the center of the projection gizmo.
    @param       Orientation                     Rotation to apply to the projection gizmo.
    @param       Tiling                          The UV tiling to use to generate the UV mapping.
    @return true if the UV mapping was generated.
  **/
  @:ufunction(BlueprintCallable) static public function GenerateCylindricalUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, UVChannelIndex : unreal.Int32, Position : unreal.Const<unreal.PRef<unreal.FVector>>, Orientation : unreal.Const<unreal.PRef<unreal.FRotator>>, Tiling : unreal.Const<unreal.PRef<unreal.FVector2D>>) : Bool;
  
  /**
    Generates box UV mapping in the specified UV channel on the given LOD of a StaticMesh.
    @param       StaticMesh                      Static mesh on which to generate the UV mapping.
    @param       LODIndex                        Index of the StaticMesh LOD.
    @param       UVChannelIndex          Channel where to save the UV mapping.
    @param       Position                        Position of the center of the projection gizmo.
    @param       Orientation                     Rotation to apply to the projection gizmo.
    @param       Size                            The size of the box projection gizmo.
    @return true if the UV mapping was generated.
  **/
  @:ufunction(BlueprintCallable) static public function GenerateBoxUVChannel(StaticMesh : unreal.UStaticMesh, LODIndex : unreal.Int32, UVChannelIndex : unreal.Int32, Position : unreal.Const<unreal.PRef<unreal.FVector>>, Orientation : unreal.Const<unreal.PRef<unreal.FRotator>>, Size : unreal.Const<unreal.PRef<unreal.FVector>>) : Bool;
  
}
