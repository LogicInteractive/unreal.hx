/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editorscriptingutilities;

/**
  Utility class to do most of the common functionalities with the ContentBrowser.
  The AssetRegistryHelpers class has more complex utilities. Use FindAssetData to get a FAssetData from an Asset Path.
  The Asset Path can be represented by
              ie. (Reference/Text Path)       StaticMesh'/Game/MyFolder/MyAsset.MyAsset'
              ie. (Full Name)                         StaticMesh /Game/MyFolder/MyAsset.MyAsset
              ie. (Path Name)                         /Game/MyFolder/MyAsset.MyAsset
              ie. (Package Name)                      /Game/MyFolder/MyAsset
  The Directory Path can be represented by
              ie. /Game/MyNewFolder/
              ie. /Game/MyNewFolder
  All operations can be slow. The editor should not be in play in editor mode. It will not work on assets of the type level.
**/
@:umodule("EditorScriptingUtilities")
@:glueCppIncludes("EditorAssetLibrary.h")
@:uextern @:uclass extern class UEditorAssetLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Load an asset from the Content Browser. It will verify if the object is already loaded and only load it if it's necessary.
    @param       AssetPath               Asset Path of the asset (that is not a level).
    @return      Found or loaded asset.
  **/
  @:ufunction(BlueprintCallable) static public function LoadAsset(AssetPath : unreal.FString) : unreal.UObject;
  
  /**
    Load a Blueprint asset from the Content Browser and return its generated class. It will verify if the object is already loaded and only load it if it's necessary.
    @param       AssetPath               Asset Path of the Blueprint asset.
    @return      Found or loaded class.
  **/
  @:ufunction(BlueprintCallable) static public function LoadBlueprintClass(AssetPath : unreal.FString) : unreal.UClass;
  
  /**
    Return a valid AssetPath for a loaded asset. The asset need to be a valid asset in the Content Browser.
    Similar to GetPathName(). The format will be: /Game/MyFolder/MyAsset.MyAsset
    @param       LoadedAsset             Loaded Asset that exist in the Content Browser.
    @return      If valid, the asset Path of the loaded asset.
  **/
  @:ufunction(BlueprintCallable) static public function GetPathNameForLoadedAsset(LoadedAsset : unreal.UObject) : unreal.FString;
  
  /**
    Return the AssetData for the Asset that can then be used with the more complex lib AssetRegistryHelpers.
    @param       AssetPath       Asset Path we are trying to find.
    @return      The AssetData found.
  **/
  @:ufunction(BlueprintCallable) static public function FindAssetData(AssetPath : unreal.FString) : unreal.assetregistry.FAssetData;
  
  /**
    Check if the asset exists in the Content Browser.
    @param       AssetPath               Asset Path of the asset (that is not a level).
    @return      True if it does exist and it is valid.
  **/
  @:ufunction(BlueprintCallable) static public function DoesAssetExist(AssetPath : unreal.FString) : Bool;
  
  /**
    Check if the assets exist in the Content Browser.
    @param       AssetPaths              Asset Path of the assets (that are not a level).
    @return      True if they exist and it is valid.
  **/
  @:ufunction(BlueprintCallable) static public function DoAssetsExist(AssetPaths : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>) : Bool;
  
  /**
    Find Package Referencers for an asset. Only Soft and Hard dependencies would be looked for.
    Soft are dependencies which don't need to be loaded for the object to be used.
    Had are dependencies which are required for correct usage of the source asset and must be loaded at the same time.
    Other references may exist. The asset may be currently used in memory by another asset, by the editor or by code.
    Package dependencies are cached with the asset. False positive can happen until all the assets are loaded and re-saved.
    @param       AssetPath                               Asset Path of the asset that we are looking for (that is not a level).
    @param       bLoadAssetsToConfirm    The asset and the referencers will be loaded (if not a level) to confirm the dependencies.
    @return      The package path of the referencers.
  **/
  @:ufunction(BlueprintCallable) static public function FindPackageReferencersForAsset(AssetPath : unreal.FString, bLoadAssetsToConfirm : Bool = false) : unreal.TArray<unreal.FString>;
  
  /**
    Consolidates an asset by replacing all references/uses of the provided AssetsToConsolidate with references to AssetToConsolidateTo.
    This is useful when you want all references of assets to be replaced by a single asset.
    The function first attempts to directly replace all relevant references located within objects that are already loaded and in memory.
    Next, it deletes the AssetsToConsolidate, leaving behind object redirectors to AssetToConsolidateTo.
    @param       AssetToConsolidateTo    Asset to which all references of the AssetsToConsolidate will instead refer to after this operation completes.
    @param       AssetsToConsolidate             All references to these assets will be modified to reference AssetToConsolidateTo instead.
    @note        The AssetsToConsolidate are DELETED by this function.
    @note        Modified objects will be saved if the operation succeeds.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function ConsolidateAssets(AssetToConsolidateTo : unreal.UObject, AssetsToConsolidate : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>) : Bool;
  
  /**
    Delete an asset from the Content Browser that is already loaded.
    This is a Force Delete. It doesn't check if the asset has references in other Levels or by Actors.
    It will close all the asset editors and may clear the Transaction buffer (Undo History).
    Will try to mark the file as deleted.
    @param       AssetToDelete                   Asset that we want to delete.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteLoadedAsset(AssetToDelete : unreal.UObject) : Bool;
  
  /**
    Delete assets from the Content Browser that are already loaded.
    This is a Force Delete. It doesn't check if the assets have references in other Levels or by Actors.
    It will close all the asset editors and may clear the Transaction buffer (Undo History).
    Will try to mark the files as deleted.
    @param       AssetsToDelete                  Assets that we want to delete.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteLoadedAssets(AssetsToDelete : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>) : Bool;
  
  /**
    Delete the package the assets live in. All objects that live in the package will be deleted.
    This is a Force Delete. It doesn't check if the asset has references in other Levels or by Actors.
    It will close all the asset editors and may clear the Transaction buffer (Undo History).
    Will try to mark the file as deleted. The Asset will be loaded before being deleted.
    @param       AssetPathToDelete               Asset Path of the asset that we want to delete.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteAsset(AssetPathToDelete : unreal.FString) : Bool;
  
  /**
    Delete the packages inside a directory. If the directory is then empty, delete the directory.
    This is a Force Delete. It doesn't check if the assets have references in other Levels or by Actors.
    It will close all the asset editors and may clear the Transaction buffer (Undo History).
    Will try to mark the file as deleted. Assets will be loaded before being deleted.
    The search is always recursive. It will try to delete the sub folders.
    @param       DirectoryPath           Directory that will be mark for delete and deleted.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteDirectory(DirectoryPath : unreal.FString) : Bool;
  
  /**
    Duplicate an asset from the Content Browser that is already loaded. Will try to checkout the file.
    @param       SourceAsset                             Asset that we want to copy from.
    @param       DestinationAssetPath    Asset Path of the duplicated asset.
    @return      The duplicated object if the operation succeeds
  **/
  @:ufunction(BlueprintCallable) static public function DuplicateLoadedAsset(SourceAsset : unreal.UObject, DestinationAssetPath : unreal.FString) : unreal.UObject;
  
  /**
    Duplicate an asset from the Content Browser. Will try to checkout the file. The Asset will be loaded before being duplicated.
    @param       SourceAssetPath                 Asset Path of the asset that we want to copy from.
    @param       DestinationAssetPath    Asset Path of the duplicated asset.
    @return      The duplicated object if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DuplicateAsset(SourceAssetPath : unreal.FString, DestinationAssetPath : unreal.FString) : unreal.UObject;
  
  /**
    Duplicate asset from the Content Browser that are in the folder.
    Will try to checkout the files. The Assets will be loaded before being duplicated.
    @param       SourceDirectoryPath                     Directory of the assets that we want to duplicate from.
    @param       DestinationDirectoryPath        Directory of the duplicated asset.
    @return      The duplicated object if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function DuplicateDirectory(SourceDirectoryPath : unreal.FString, DestinationDirectoryPath : unreal.FString) : Bool;
  
  /**
    Rename an asset from the Content Browser that is already loaded.
    Equivalent to a Move operation. Will try to checkout the files.
    @param       SourceAsset                             Asset that we want to copy from.
    @param       DestinationAssetPath    Asset Path of the duplicated asset.
    @return      The if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function RenameLoadedAsset(SourceAsset : unreal.UObject, DestinationAssetPath : unreal.FString) : Bool;
  
  /**
    Rename an asset from the Content Browser. Equivalent to a Move operation.
    Will try to checkout the file. The Asset will be loaded before being renamed.
    @param       SourceAssetPath                 Asset Path of the asset that we want to copy from.
    @param       DestinationAssetPath    Asset Path of the renamed asset.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function RenameAsset(SourceAssetPath : unreal.FString, DestinationAssetPath : unreal.FString) : Bool;
  
  /**
    Rename assets from the Content Browser that are in the folder.
    Equivalent to a Move operation. Will try to checkout the files. The Assets will be loaded before being renamed.
    @param       SourceDirectoryPath                     Directory of the assets that we want to rename from.
    @param       DestinationDirectoryPath        Directory of the renamed asset.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function RenameDirectory(SourceDirectoryPath : unreal.FString, DestinationDirectoryPath : unreal.FString) : Bool;
  
  /**
    Checkout the asset from the Content Browser.
    @param       AssetToCheckout         Asset to checkout.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function CheckoutLoadedAsset(AssetToCheckout : unreal.UObject) : Bool;
  
  /**
    Checkout the assets from the Content Browser.
    @param       AssetToCheckout         Assets to checkout.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function CheckoutLoadedAssets(AssetsToCheckout : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>) : Bool;
  
  /**
    Checkout the asset from the Content Browser.
    @param       AssetToCheckout         Asset Path of the asset that we want to checkout.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function CheckoutAsset(AssetToCheckout : unreal.FString) : Bool;
  
  /**
    Checkout assets from the Content Browser. It will load the assets if needed.
    All objects that are in the directory will be checkout. Assets will be loaded before being checkout.
    @param       DirectoryPath           Directory of the assets that to checkout.
    @param       bRecursive                      If the AssetPath is a folder, the search will be recursive and will checkout the asset in the sub folders.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function CheckoutDirectory(DirectoryPath : unreal.FString, bRecursive : Bool = true) : Bool;
  
  /**
    Save the packages the assets live in. All objects that live in the package will be saved. Will try to checkout the file.
    @param       AssetToSave                     Asset that we want to save.
    @param       bOnlyIfIsDirty          Only checkout asset that are dirty.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveLoadedAsset(AssetToSave : unreal.UObject, bOnlyIfIsDirty : Bool = true) : Bool;
  
  /**
    Save the packages the assets live in. All objects that live in the package will be saved. Will try to checkout the files.
    @param       AssetToSaves            Assets that we want to save.
    @param       bOnlyIfIsDirty          Only checkout asset that are dirty.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveLoadedAssets(AssetsToSave : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>, bOnlyIfIsDirty : Bool = true) : Bool;
  
  /**
    Save the packages the assets live in. All objects that live in the package will be saved.
    Will try to checkout the file first. The Asset will be loaded before being saved.
    @param       AssetsToSave            Asset Path of the asset that we want to save.
    @param       bOnlyIfIsDirty          Only checkout/save the asset if it's dirty.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveAsset(AssetToSave : unreal.FString, bOnlyIfIsDirty : Bool = true) : Bool;
  
  /**
    Save the packages the assets live in inside the directory. All objects that are in the directory will be saved.
    Will try to checkout the file first. Assets will be loaded before being saved.
    @param       DirectoryPath           Directory that will be checked out and saved.
    @param       bOnlyIfIsDirty          Only checkout asset that are dirty.
    @param       bRecursive                      The search will be recursive and it will save the asset in the sub folders.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function SaveDirectory(DirectoryPath : unreal.FString, bOnlyIfIsDirty : Bool = true, bRecursive : Bool = true) : Bool;
  
  /**
    Check is the directory exist in the Content Browser.
    @param        DirectoryPath           Long Path Name of the directory.
    @return       True if it does exist and it is valid.
  **/
  @:ufunction(BlueprintCallable) static public function DoesDirectoryExist(DirectoryPath : unreal.FString) : Bool;
  
  /**
    Check if there any asset that exist in the directory.
    @param       DirectoryPath           Long Path Name of the directory.
    @return      True if there is any assets.
  **/
  @:ufunction(BlueprintCallable) static public function DoesDirectoryHaveAssets(DirectoryPath : unreal.FString, bRecursive : Bool = true) : Bool;
  
  /**
    Create the directory on disk and in the Content Browser.
    @param       DirectoryPath           Long Path Name of the directory.
    @return      True if the operation succeeds.
  **/
  @:ufunction(BlueprintCallable) static public function MakeDirectory(DirectoryPath : unreal.FString) : Bool;
  
  /**
    Return the list of all the assets found in the DirectoryPath.
    @param       DirectoryPath           Directory path of the asset we want the list from.
    @param       bRecursive                      The search will be recursive and will look in sub folders.
    @param       bIncludeFolder          The result will include folders name.
    @return      The list of asset found.
  **/
  @:ufunction(BlueprintCallable) static public function ListAssets(DirectoryPath : unreal.FString, bRecursive : Bool = true, bIncludeFolder : Bool = false) : unreal.TArray<unreal.FString>;
  
  /**
    Return the list of all the assets that have the pair of Tag/Value.
    @param TagName       The tag associated with the assets requested.
    @param TagValue      The value associated with the assets requested.
    @return      The list of asset found.
  **/
  @:ufunction(BlueprintCallable) static public function ListAssetByTagValue(TagName : unreal.FName, TagValue : unreal.FString) : unreal.TArray<unreal.FString>;
  
  /**
    Get the value associated with the given tag of a loaded asset's metadata.
    @param       Object          The object from which to retrieve the metadata.
    @param       Tag                     The tag to find in the metadata.
    @return      The string value associated with the tag.
  **/
  @:ufunction(BlueprintCallable) static public function GetMetadataTag(Object : unreal.UObject, Tag : unreal.FName) : unreal.FString;
  
  /**
    Set the value associated with a given tag of a loaded asset's metadata.
    @param       Object          The object from which to retrieve the metadata.
    @param       Tag                     The tag to set in the metadata.
    @param       Value           The string value to associate with the tag.
  **/
  @:ufunction(BlueprintCallable) static public function SetMetadataTag(Object : unreal.UObject, Tag : unreal.FName, Value : unreal.FString) : Void;
  
  /**
    Remove the given tag from a loaded asset's metadata.
    @param       Object          The object from which to retrieve the metadata.
    @param       Tag                     The tag to remove from the metadata.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveMetadataTag(Object : unreal.UObject, Tag : unreal.FName) : Void;
  
  /**
    Sync the Content Browser to the given asset(s)
    @param       AssetPaths      The list of asset paths to sync to in the Content Browser
  **/
  @:ufunction(BlueprintCallable) static public function SyncBrowserToObjects(AssetPaths : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>) : Void;
  
}
