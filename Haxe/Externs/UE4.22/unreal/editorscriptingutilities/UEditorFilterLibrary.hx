/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editorscriptingutilities;

/**
  Utility class to filter a list of objects. Object should be in the World Editor.
**/
@:umodule("EditorScriptingUtilities")
@:glueCppIncludes("EditorFilterLibrary.h")
@:uextern @:uclass extern class UEditorFilterLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Filter the array based on the Object's class.
    @param       TargetArray             Array of Object to filter. The array will not change.
    @param       ObjectClass             The Class of the object.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByClass(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>, ObjectClass : unreal.TSubclassOf<unreal.UObject>, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.UObject>;
  
  /**
    Filter the array based on the Object's ID name.
    @param       TargetArray             Array of Object to filter. The array will not change.
    @param       NameSubString   The text the Object's ID name.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @param       StringMatch             Contains the NameSubString OR matches with the wildcard *? OR exactly the same value.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByIDName(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>, NameSubString : unreal.FString, @:opt("Contains") StringMatch : unreal.editorscriptingutilities.EEditorScriptingStringMatchType, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.UObject>;
  
  /**
    Filter the array based on the Actor's label (what we see in the editor)
    @param       TargetArray             Array of Actor to filter. The array will not change.
    @param       NameSubString   The text the Actor's Label.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @param       StringMatch             Contains the NameSubString OR matches with the wildcard *? OR exactly the same value.
    @param       bIgnoreCase             Determines case sensitivity options for string comparisons.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByActorLabel(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, NameSubString : unreal.FString, @:opt("Contains") StringMatch : unreal.editorscriptingutilities.EEditorScriptingStringMatchType, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType, bIgnoreCase : Bool = true) : unreal.TArray<unreal.AActor>;
  
  /**
    Filter the array by Tag the Actor contains
    @param       TargetArray             Array of Actor to filter. The array will not change.
    @param       Tag                             The exact name of the Tag the actor contains.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByActorTag(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, Tag : unreal.FName, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.AActor>;
  
  /**
    Filter the array by Layer the Actor belongs to.
    @param       TargetArray             Array of Actor to filter. The array will not change.
    @param       LayerName               The exact name of the Layer the actor belongs to.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByLayer(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LayerName : unreal.FName, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.AActor>;
  
  /**
    Filter the array by Level the Actor belongs to.
    @param       TargetArray             Array of Actor to filter. The array will not change.
    @param       LevelName               The name of the Level the actor belongs to (same name as in the ContentBrowser).
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function ByLevelName(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LevelName : unreal.FName, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.AActor>;
  
  /**
    Filter the array based on Object's selection.
    @param       TargetArray             Array of Object to filter. The array will not change.
    @param       FilterType              Should include or not the array's item if it respects the condition.
    @return      The filtered list.
  **/
  @:ufunction(BlueprintCallable) static public function BySelection(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, @:opt("Include") FilterType : unreal.editorscriptingutilities.EEditorScriptingFilterType) : unreal.TArray<unreal.AActor>;
  
}
