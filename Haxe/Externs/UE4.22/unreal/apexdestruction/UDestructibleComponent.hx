/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.apexdestruction;

/**
  This component holds the physics data for a DestructibleActor.
  
  The USkeletalMesh pointer in the base class (SkinnedMeshComponent) MUST be a DestructibleMesh
**/
@:umodule("ApexDestruction")
@:glueCppIncludes("DestructibleComponent.h")
@:uextern @:uclass extern class UDestructibleComponent extends unreal.USkinnedMeshComponent implements unreal.IDestructibleInterface {
  
  /**
    Called when a component is touched
  **/
  @:uproperty public var OnComponentFracture : unreal.apexdestruction.FComponentFractureSignature;
  #if WITH_EDITORONLY_DATA
  
  /**
    Provide a blueprint interface for setting the destructible mesh
  **/
  @:uproperty public var DestructibleMesh : unreal.apexdestruction.UDestructibleMesh;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The minimum size required to treat chunks as Large.
  **/
  @:uproperty public var LargeChunkThreshold : unreal.Float32;
  
  /**
    Enable "hard sleeping" for destruction-generated PxActors.  This means that they turn kinematic
    when they sleep, but can be made dynamic again by application of enough damage.
  **/
  @:uproperty public var bEnableHardSleeping : Bool;
  
  /**
    Fracture effects for each fracture level. Used only if Fracture Effect Override is set.
  **/
  @:uproperty public var FractureEffects : unreal.TArray<unreal.FFractureEffect>;
  
  /**
    If set, use this actor's fracture effects instead of the asset's fracture effects.
  **/
  @:uproperty public var bFractureEffectOverride : Bool;
  
  /**
    Take damage
  **/
  @:ufunction(BlueprintCallable) public function ApplyDamage(DamageAmount : unreal.Float32, HitLocation : unreal.Const<unreal.PRef<unreal.FVector>>, ImpulseDir : unreal.Const<unreal.PRef<unreal.FVector>>, ImpulseStrength : unreal.Float32) : Void;
  
  /**
    Take radius damage
  **/
  @:ufunction(BlueprintCallable) public function ApplyRadiusDamage(BaseDamage : unreal.Float32, HurtOrigin : unreal.Const<unreal.PRef<unreal.FVector>>, DamageRadius : unreal.Float32, ImpulseStrength : unreal.Float32, bFullDamage : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDestructibleMesh(NewMesh : unreal.apexdestruction.UDestructibleMesh) : Void;
  @:ufunction(BlueprintCallable) @:final public function GetDestructibleMesh() : unreal.apexdestruction.UDestructibleMesh;
  // DestructibleInterface interface implementation
  
}
