/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.concerttransport;

/**
  Handshake used to negotiate a reliable channel between endpoints (also uses the ReliableChannelId from the base message)
**/
@:umodule("ConcertTransport")
@:glueCppIncludes("Public/ConcertTransportMessages.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FConcertReliableHandshakeData extends unreal.concerttransport.FConcertEndpointDiscoveryEvent {
  
  /**
    It's a timespan encoded in ticks. EndpointTimeoutTick represent the time it takes for the sending endpoint to consider another endpoint timed out
  **/
  @:uproperty public var EndpointTimeoutTick : unreal.Int64;
  
  /**
    The next message index that the remote endpoint is going to send
  **/
  @:uproperty public var NextMessageIndex : unreal.UInt16;
  
  /**
    Channel ID we're going to send reliable messages of
  **/
  @:uproperty public var ReliableChannelId : unreal.UInt16;
  
  /**
    State of the handshake
  **/
  @:uproperty public var HandshakeState : unreal.concerttransport.EConcertReliableHandshakeState;
  
}
