/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.ansel;

@:umodule("Ansel")
@:glueCppIncludes("AnselFunctionLibrary.h")
@:uextern @:uclass extern class UAnselFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Starts a photography session
  **/
  @:ufunction(BlueprintCallable) static public function StartSession(WorldContextObject : unreal.UObject) : Void;
  
  /**
    Stops a photography session
  **/
  @:ufunction(BlueprintCallable) static public function StopSession(WorldContextObject : unreal.UObject) : Void;
  
  /**
    Whether the photography system is available at all.  See CVar r.Photography.Available
  **/
  @:ufunction(BlueprintCallable) static public function IsPhotographyAvailable() : Bool;
  
  /**
    Whether the app is permitting photography at this time.  See CVar r.Photography.Allowed
  **/
  @:ufunction(BlueprintCallable) static public function IsPhotographyAllowed() : Bool;
  
  /**
    Sets whether the app is permitting photography at this time.  See CVar r.Photography.Allowed
  **/
  @:ufunction(BlueprintCallable) static public function SetIsPhotographyAllowed(bIsPhotographyAllowed : Bool) : Void;
  
  /**
    Sets the number of frames between captures in a multi-part shot.  See CVar r.Photography.SettleFrames
  **/
  @:ufunction(BlueprintCallable) static public function SetSettleFrames(NumSettleFrames : unreal.Int32) : Void;
  
  /**
    Sets the normal speed of movement of the photography camera.  See CVar r.Photography.TranslationSpeed
  **/
  @:ufunction(BlueprintCallable) static public function SetCameraMovementSpeed(TranslationSpeed : unreal.Float32) : Void;
  
  /**
    Sets the size of the photography camera for collision purposes; only relevant when default implementation of PlayerCameraManager's PhotographyCameraModify function is used.  See CVar r.Photography.Constrain.CameraSize
  **/
  @:ufunction(BlueprintCallable) static public function SetCameraConstraintCameraSize(CameraSize : unreal.Float32) : Void;
  
  /**
    Sets maximum distance which the camera is allowed to wander from its initial position; only relevant when default implementation of PlayerCameraManager's PhotographyCameraModify function is used.  See CVar r.Photography.Constrain.MaxCameraDistance
  **/
  @:ufunction(BlueprintCallable) static public function SetCameraConstraintDistance(MaxCameraDistance : unreal.Float32) : Void;
  
  /**
    Sets whether the photography system automatically tries to optimize Unreal's postprocessing effects for photography.  See CVar r.Photography.AutoPostprocess
  **/
  @:ufunction(BlueprintCallable) static public function SetAutoPostprocess(bShouldAutoPostprocess : Bool) : Void;
  
  /**
    Sets whether the photography system automatically pauses the game during a photography session.  See CVar r.Photography.AutoPause
  **/
  @:ufunction(BlueprintCallable) static public function SetAutoPause(bShouldAutoPause : Bool) : Void;
  
  /**
    Show or hide controls in the photography UI which let the player tweak standard UE visual effects during photography - for example, depth of field or chromatic aberration.  Note: these controls only exist when SetAutoPostprocess is turned on.  Some may not apply to your application either because you are not using the associated effect or you are using a custom version of the effect.
  **/
  @:ufunction(BlueprintCallable) static public function SetUIControlVisibility(WorldContextObject : unreal.UObject, UIControlTarget : unreal.Const<unreal.ansel.EUIControlEffectTarget>, bIsVisible : Bool) : Void;
  
  /**
    A utility which constrains distance of camera from its start point; may be useful when implementing a custom APlayerCameraManager::PhotographyCameraModify
  **/
  @:ufunction(BlueprintCallable) static public function ConstrainCameraByDistance(WorldContextObject : unreal.UObject, NewCameraLocation : unreal.Const<unreal.FVector>, PreviousCameraLocation : unreal.Const<unreal.FVector>, OriginalCameraLocation : unreal.Const<unreal.FVector>, OutCameraLocation : unreal.PRef<unreal.FVector>, MaxDistance : unreal.Float32) : Void;
  
  /**
    A utility which constrains the camera against collidable geometry; may be useful when implementing a custom APlayerCameraManager::PhotographyCameraModify
  **/
  @:ufunction(BlueprintCallable) static public function ConstrainCameraByGeometry(WorldContextObject : unreal.UObject, NewCameraLocation : unreal.Const<unreal.FVector>, PreviousCameraLocation : unreal.Const<unreal.FVector>, OriginalCameraLocation : unreal.Const<unreal.FVector>, OutCameraLocation : unreal.PRef<unreal.FVector>) : Void;
  
}
