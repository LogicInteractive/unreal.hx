/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.lobby;

/**
  A beacon client used for quality timings to a specified session
**/
@:umodule("Lobby")
@:glueCppIncludes("LobbyBeaconClient.h")
@:uextern @:uclass extern class ALobbyBeaconClient extends unreal.onlinesubsystemutils.AOnlineBeaconClient {
  
  /**
    True once the server has acknowledged our join intent
  **/
  @:uproperty private var LobbyJoinServerState : unreal.lobby.ELobbyBeaconJoinState;
  
  /**
    Player state associated with this beacon (@todo not splitscreen safe)
  **/
  @:uproperty public var PlayerState : unreal.lobby.ALobbyBeaconPlayerState;
  
  /**
    Client view of the lobby state
  **/
  @:uproperty public var LobbyState : unreal.lobby.ALobbyBeaconState;
  
  /**
    Tell the client to join the game
  **/
  @:ufunction(Client) public function ClientJoinGame() : Void;
  
  /**
    Send updated session settings to client
  **/
  @:ufunction(Client) public function ClientSetInviteFlags(Settings : unreal.Const<unreal.PRef<unreal.FJoinabilitySettings>>) : Void;
  
  /**
    Run a cheat command on the server
  **/
  @:ufunction(Server) public function ServerCheat(Msg : unreal.FString) : Void;
  
  /**
    Attempt to login a single local player with the lobby beacon
    
    @param InSessionId session id that the client is expecting to connect with
    @param InUniqueId unique id of the new player
    @param UrlString URL containing player options (name, etc)
  **/
  @:ufunction(Server) private function ServerLoginPlayer(InSessionId : unreal.FString, InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, UrlString : unreal.FString) : Void;
  
  /**
    Make a graceful disconnect with the server
  **/
  @:ufunction(Server) private function ServerDisconnectFromLobby() : Void;
  
  /**
    Make a graceful request to actually join the server
  **/
  @:ufunction(Server) private function ServerNotifyJoiningServer() : Void;
  @:ufunction(Client) private function ClientAckJoiningServer() : Void;
  
  /**
    Make a request to kick a given player
    
    @param PlayerToKick player kick request
    @param Reason reason for the kick to tell client if this succeeds
  **/
  @:ufunction(Server) private function ServerKickPlayer(PlayerToKick : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, Reason : unreal.Const<unreal.PRef<unreal.FText>>) : Void;
  
  /**
    Make a request to set the party owner for the given player
    
    @param InUniqueId id of the requesting player
    @param PartyOwnerUniqueId id the party owner
  **/
  @:ufunction(Server) private function ServerSetPartyOwner(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, InPartyOwnerId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>) : Void;
  
  /**
    Client notification result for a single login attempt
    
    @param InUniqueId id of player involved
    @param bWasSuccessful result of the login attempt
  **/
  @:ufunction(Client) private function ClientLoginComplete(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, bWasSuccessful : Bool) : Void;
  
  /**
    This was client was kicked by the server
    
    @param KickReason reason the server kicked the local player
  **/
  @:ufunction(Client) private function ClientWasKicked(KickReason : unreal.Const<unreal.PRef<unreal.FText>>) : Void;
  
  /**
    Client notification that another player has joined the lobby
    
    @param NewPlayerName display name of new player
    @param InUniqueId unique id of new player
  **/
  @:ufunction(Client) private function ClientPlayerJoined(NewPlayerName : unreal.Const<unreal.PRef<unreal.FText>>, InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>) : Void;
  
  /**
    Client notification that another player has left the lobby
    
    @param InUniqueId unique id of new player
  **/
  @:ufunction(Client) private function ClientPlayerLeft(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>) : Void;
  
}
