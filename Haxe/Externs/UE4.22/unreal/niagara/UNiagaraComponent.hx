/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  UNiagaraComponent is the primitive component for a Niagara System.
  @see ANiagaraActor
  @see UNiagaraSystem
**/
@:umodule("Niagara")
@:glueCppIncludes("NiagaraComponent.h")
@:uextern @:uclass extern class UNiagaraComponent extends unreal.UPrimitiveComponent {
  #if WITH_EDITORONLY_DATA
  @:uproperty public var bWaitForCompilationOnActivate : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Options for how we handle our scale when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
    @see bAutoManageAttachment, EAttachmentRule
  **/
  @:uproperty public var AutoAttachScaleRule : unreal.EAttachmentRule;
  
  /**
    Options for how we handle our rotation when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
    @see bAutoManageAttachment, EAttachmentRule
  **/
  @:uproperty public var AutoAttachRotationRule : unreal.EAttachmentRule;
  
  /**
    Options for how we handle our location when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
    @see bAutoManageAttachment, EAttachmentRule
  **/
  @:uproperty public var AutoAttachLocationRule : unreal.EAttachmentRule;
  
  /**
    Socket we automatically attach to on the AutoAttachParent, if bAutoManageAttachment is true.
    @see bAutoManageAttachment
  **/
  @:uproperty public var AutoAttachSocketName : unreal.FName;
  
  /**
    Component we automatically attach to when activated, if bAutoManageAttachment is true.
    If null during registration, we assign the existing AttachParent and defer attachment until we activate.
    @see bAutoManageAttachment
  **/
  @:uproperty public var AutoAttachParent : unreal.TWeakObjectPtr<unreal.USceneComponent>;
  
  /**
    Called when the particle system is done
  **/
  @:uproperty public var OnSystemFinished : unreal.niagara.FOnNiagaraSystemFinished;
  
  /**
    True if we should automatically attach to AutoAttachParent when activated, and detach from our parent when completed.
    This overrides any current attachment that may be present at the time of activation (deferring initial attachment until activation, if AutoAttachParent is null).
    When enabled, detachment occurs regardless of whether AutoAttachParent is assigned, and the relative transform from the time of activation is restored.
    This also disables attachment on dedicated servers, where we don't actually activate even if bAutoActivate is true.
    @see AutoAttachParent, AutoAttachSocketName, AutoAttachLocationType
  **/
  @:uproperty public var bAutoManageAttachment : Bool;
  @:ufunction(BlueprintCallable) @:final public function SetAsset(InAsset : unreal.niagara.UNiagaraSystem) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAsset() : unreal.niagara.UNiagaraSystem;
  @:ufunction(BlueprintCallable) @:final public function SetForceSolo(bInForceSolo : Bool) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetForceSolo() : Bool;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAgeUpdateMode() : unreal.niagara.ENiagaraAgeUpdateMode;
  
  /**
    Sets the age update mode for the System instance.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAgeUpdateMode(InAgeUpdateMode : unreal.niagara.ENiagaraAgeUpdateMode) : Void;
  
  /**
    Gets the desired age of the System instance.  This is only relevant when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDesiredAge() : unreal.Float32;
  
  /**
    Sets the desired age of the System instance.  This is only relevant when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDesiredAge(InDesiredAge : unreal.Float32) : Void;
  
  /**
    Sets the desired age of the System instance and designates that this change is a seek.  When seeking to a desired age the
              The component can optionally prevent rendering.
  **/
  @:ufunction(BlueprintCallable) @:final public function SeekToDesiredAge(InDesiredAge : unreal.Float32) : Void;
  
  /**
    Sets whether or not the system can render while seeking.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCanRenderWhileSeeking(bInCanRenderWhileSeeking : Bool) : Void;
  
  /**
    Gets the delta value which is used when seeking from the current age, to the desired age.  This is only relevant
          when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSeekDelta() : unreal.Float32;
  
  /**
    Sets the delta value which is used when seeking from the current age, to the desired age.  This is only relevant
          when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSeekDelta(InSeekDelta : unreal.Float32) : Void;
  
  /**
    Sets the maximum time that you can jump within a tick which is used when seeking from the current age, to the desired age.  This is only relevant
          when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMaxSimTime() : unreal.Float32;
  
  /**
    Sets the maximum time that you can jump within a tick which is used when seeking from the current age, to the desired age.  This is only relevant
          when using the DesiredAge age update mode.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetMaxSimTime(InMaxTime : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetAutoDestroy(bInAutoDestroy : Bool) : Void;
  
  /**
    Sets a Niagara FLinearColor parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableLinearColor(InVariableName : unreal.FString, InValue : unreal.Const<unreal.PRef<unreal.FLinearColor>>) : Void;
  
  /**
    Sets a Niagara Vector4 parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableVec4(InVariableName : unreal.FString, InValue : unreal.Const<unreal.PRef<unreal.FVector4>>) : Void;
  
  /**
    Sets a Niagara Vector3 parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableQuat(InVariableName : unreal.FString, InValue : unreal.Const<unreal.PRef<unreal.FQuat>>) : Void;
  
  /**
    Sets a Niagara Vector3 parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableVec3(InVariableName : unreal.FString, InValue : unreal.FVector) : Void;
  
  /**
    Sets a Niagara Vector3 parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableVec2(InVariableName : unreal.FString, InValue : unreal.FVector2D) : Void;
  
  /**
    Sets a Niagara float parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableFloat(InVariableName : unreal.FString, InValue : unreal.Float32) : Void;
  
  /**
    Sets a Niagara int parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableInt(InVariableName : unreal.FString, InValue : unreal.Int32) : Void;
  
  /**
    Sets a Niagara float parameter by name, overriding locally if necessary.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableBool(InVariableName : unreal.FString, InValue : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetNiagaraVariableActor(InVariableName : unreal.FString, Actor : unreal.AActor) : Void;
  
  /**
    Debug accessors for getting positions in blueprints.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetNiagaraParticlePositions_DebugOnly(InEmitterName : unreal.FString) : unreal.TArray<unreal.FVector>;
  
  /**
    Debug accessors for getting a float attribute array in blueprints.  The attribute name should be without namespaces. For example for "Particles.Position", send "Position".
  **/
  @:ufunction(BlueprintCallable) @:final public function GetNiagaraParticleValues_DebugOnly(InEmitterName : unreal.FString, InValueName : unreal.FString) : unreal.TArray<unreal.Float32>;
  
  /**
    Debug accessors for getting a FVector attribute array in blueprints. The attribute name should be without namespaces. For example for "Particles.Position", send "Position".
  **/
  @:ufunction(BlueprintCallable) @:final public function GetNiagaraParticleValueVec3_DebugOnly(InEmitterName : unreal.FString, InValueName : unreal.FString) : unreal.TArray<unreal.FVector>;
  
  /**
    Resets the System to it's initial pre-simulated state.
  **/
  @:ufunction(BlueprintCallable) @:final public function ResetSystem() : Void;
  
  /**
    Called on when an external object wishes to force this System to reinitialize itself from the System data.
  **/
  @:ufunction(BlueprintCallable) @:final public function ReinitializeSystem() : Void;
  
  /**
    Sets whether or not rendering is enabled for this component.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetRenderingEnabled(bInRenderingEnabled : Bool) : Void;
  
  /**
    Advances this system's simulation by the specified number of ticks and delta time.
  **/
  @:ufunction(BlueprintCallable) @:final public function AdvanceSimulation(TickCount : unreal.Int32, TickDeltaSeconds : unreal.Float32) : Void;
  
  /**
    Advances this system's simulation by the specified time in seconds and delta time. Advancement is done in whole ticks of TickDeltaSeconds so actual simulated time will be the nearest lower multiple of TickDeltaSeconds.
  **/
  @:ufunction(BlueprintCallable) @:final public function AdvanceSimulationByTime(SimulateTime : unreal.Float32, TickDeltaSeconds : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetPaused(bInPaused : Bool) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsPaused() : Bool;
  
  /**
    Set AutoAttachParent, AutoAttachSocketName, AutoAttachLocationRule, AutoAttachRotationRule, AutoAttachScaleRule to the specified parameters. Does not change bAutoManageAttachment; that must be set separately.
    @param  Parent                       Component to attach to.
    @param  SocketName           Socket on Parent to attach to.
    @param  LocationRule         Option for how we handle our location when we attach to Parent.
    @param  RotationRule         Option for how we handle our rotation when we attach to Parent.
    @param  ScaleRule            Option for how we handle our scale when we attach to Parent.
    @see bAutoManageAttachment, AutoAttachParent, AutoAttachSocketName, AutoAttachLocationRule, AutoAttachRotationRule, AutoAttachScaleRule
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAutoAttachmentParameters(Parent : unreal.USceneComponent, SocketName : unreal.FName, LocationRule : unreal.EAttachmentRule, RotationRule : unreal.EAttachmentRule, ScaleRule : unreal.EAttachmentRule) : Void;
  
}
