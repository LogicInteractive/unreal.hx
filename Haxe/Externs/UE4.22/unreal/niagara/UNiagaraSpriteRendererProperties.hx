/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

@:umodule("Niagara")
@:glueCppIncludes("NiagaraSpriteRendererProperties.h")
@:uextern @:uclass extern class UNiagaraSpriteRendererProperties extends unreal.niagara.UNiagaraRendererProperties {
  @:uproperty public var SyncId : unreal.Int32;
  
  /**
    Which attribute should we use for Normalized Age?
  **/
  @:uproperty public var NormalizedAgeBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for custom sorting?
  **/
  @:uproperty public var CustomSortingBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for material randoms when generating sprites?
  **/
  @:uproperty public var MaterialRandomBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for UV scale when generating sprites?
  **/
  @:uproperty public var UVScaleBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for camera offset when generating sprites?
  **/
  @:uproperty public var CameraOffsetBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for dynamic material parameters when generating sprites?
  **/
  @:uproperty public var DynamicMaterial3Binding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for dynamic material parameters when generating sprites?
  **/
  @:uproperty public var DynamicMaterial2Binding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for dynamic material parameters when generating sprites?
  **/
  @:uproperty public var DynamicMaterial1Binding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for dynamic material parameters when generating sprites?
  **/
  @:uproperty public var DynamicMaterialBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for sprite sub-image indexing when generating sprites?
  **/
  @:uproperty public var SubImageIndexBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for sprite alignment when generating sprites?
  **/
  @:uproperty public var SpriteAlignmentBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for sprite facing when generating sprites?
  **/
  @:uproperty public var SpriteFacingBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for sprite size when generating sprites?
  **/
  @:uproperty public var SpriteSizeBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for sprite rotation (in degrees) when generating sprites?
  **/
  @:uproperty public var SpriteRotationBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for velocity when generating sprites?
  **/
  @:uproperty public var VelocityBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for color when generating sprites?
  **/
  @:uproperty public var ColorBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for position when generating sprites?
  **/
  @:uproperty public var PositionBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    The distance at which FacingCameraDistanceBlend        is fully FacingCameraPosition
  **/
  @:uproperty public var MaxFacingCameraBlendDistance : unreal.Float32;
  
  /**
    The distance at which FacingCameraDistanceBlend        is fully FacingCamera
  **/
  @:uproperty public var MinFacingCameraBlendDistance : unreal.Float32;
  
  /**
    If true, the particles are only sorted when using a translucent material.
  **/
  @:uproperty public var bSortOnlyWhenTranslucent : Bool;
  
  /**
    If true, removes the HMD view roll (e.g. in VR)
  **/
  @:uproperty public var bRemoveHMDRollInVR : Bool;
  
  /**
    If true, blends the sub-image UV lookup with its next adjacent member using the fractional part of the SubImageIndex float value as the linear interpolation factor.
  **/
  @:uproperty public var bSubImageBlend : Bool;
  
  /**
    When using SubImage lookups for particles, this variable contains the number of columns in X and the number of rows in Y.
  **/
  @:uproperty public var SubImageSize : unreal.FVector2D;
  
  /**
    Determines how we sort the particles prior to rendering.
  **/
  @:uproperty public var SortMode : unreal.niagara.ENiagaraSortMode;
  
  /**
    Determines the location of the pivot point of this particle. It follows Unreal's UV space, which has the upper left of the image at 0,0 and bottom right at 1,1. The middle is at 0.5, 0.5.
  **/
  @:uproperty public var PivotInUVSpace : unreal.FVector2D;
  
  /**
    Used as a per-axis interpolation factor with the CustomFacingVector mode to determine how the billboard orients itself relative to the camera. A value of 1.0 is fully facing the custom vector. A value of 0.0 uses the standard facing strategy.
  **/
  @:uproperty public var CustomFacingVectorMask : unreal.FVector;
  
  /**
    Determines how the particle billboard orients itself relative to the camera.
  **/
  @:uproperty public var FacingMode : unreal.niagara.ENiagaraSpriteFacingMode;
  
  /**
    Imagine the particle texture having an arrow pointing up, these modes define how the particle aligns that texture to other particle attributes.
  **/
  @:uproperty public var Alignment : unreal.niagara.ENiagaraSpriteAlignment;
  
  /**
    The material used to render the particle. Note that it must have the Use with Niagara Sprites flag checked.
  **/
  @:uproperty public var Material : unreal.UMaterialInterface;
  
}
