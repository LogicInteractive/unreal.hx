/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  WARNING: This type was not defined as DLL export on its declaration. Because of that, some of its methods are inaccessible
  
  
**/
@:umodule("Niagara")
@:glueCppIncludes("NiagaraLightRendererProperties.h")
@:noClass @:uextern @:uclass extern class UNiagaraLightRendererProperties extends unreal.niagara.UNiagaraRendererProperties {
  
  /**
    Which attribute should we use for the intensity of the volumetric scattering from this light? This scales the light's intensity and color.
  **/
  @:uproperty public var VolumetricScatteringBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for light radius when generating lights?
  **/
  @:uproperty public var RadiusBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for light color when generating lights?
  **/
  @:uproperty public var ColorBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for position when generating lights?
  **/
  @:uproperty public var PositionBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use for the light's exponent when inverse squared falloff is disabled?
  **/
  @:uproperty public var LightExponentBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use to check if light rendering should be enabled for a particle?
  **/
  @:uproperty public var LightRenderingEnabledBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    A static color shift applied to each rendered light
  **/
  @:uproperty public var ColorAdd : unreal.FVector;
  
  /**
    A factor used to scale each particle light radius
  **/
  @:uproperty public var RadiusScale : unreal.Float32;
  
  /**
    By default, a light is spawned for each particle. Enable this to control the spawn-rate on a per-particle basis.
  **/
  @:uproperty public var bOverrideRenderingEnabled : Bool;
  
  /**
    Whether lights from this renderer should affect translucency.
    Use with caution - if enabled, create only a few particle lights at most, and the smaller they are, the less they will cost.
  **/
  @:uproperty public var bAffectsTranslucency : Bool;
  
  /**
    Whether to use physically based inverse squared falloff from the light.  If unchecked, the value from the LightExponent binding will be used instead.
  **/
  @:uproperty public var bUseInverseSquaredFalloff : Bool;
  
}
