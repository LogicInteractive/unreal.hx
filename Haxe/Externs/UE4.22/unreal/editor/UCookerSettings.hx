/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  Various cooker settings.
**/
@:umodule("UnrealEd")
@:glueCppIncludes("CookerSettings.h")
@:uextern @:uclass extern class UCookerSettings extends unreal.UDeveloperSettings {
  
  /**
    If true, the editor will be able to open cooked assets (limited to a subset of supported asset types).
  **/
  @:uproperty public var bAllowCookedDataInEditorBuilds : Bool;
  
  /**
    Quality of 0 means smallest (12x12 block size), 4 means best (4x4 block size)
  **/
  @:uproperty public var DefaultASTCQualityBySize : unreal.Int32;
  
  /**
    Quality of 0 means fastest, 3 means best quality
  **/
  @:uproperty public var DefaultASTCQualityBySpeed : unreal.Int32;
  
  /**
    Quality of 0 means fastest, 4 means best quality
  **/
  @:uproperty public var DefaultPVRTCQuality : unreal.Int32;
  
  /**
    List of r values that need to be versioned
  **/
  @:uproperty public var VersionedIntRValues : unreal.TArray<unreal.FString>;
  
  /**
    List of module names to exclude when cooking for dedicated client
  **/
  @:uproperty public var ModulesExcludedOnDedicatedClient : unreal.TArray<unreal.FString>;
  
  /**
    List of class names to exclude when cooking for dedicated client
  **/
  @:uproperty public var ClassesExcludedOnDedicatedClient : unreal.TArray<unreal.FString>;
  
  /**
    List of module names to exclude when cooking for dedicated server
  **/
  @:uproperty public var ModulesExcludedOnDedicatedServer : unreal.TArray<unreal.FString>;
  
  /**
    List of class names to exclude when cooking for dedicated server
  **/
  @:uproperty public var ClassesExcludedOnDedicatedServer : unreal.TArray<unreal.FString>;
  
  /**
    Generate optimized component data to speed up Blueprint construction at runtime. This option can increase the overall Blueprint memory usage in a cooked build. Requires Event-Driven Loading (EDL), which is enabled by default.
  **/
  @:uproperty public var BlueprintComponentDataCookingMethod : unreal.editor.EBlueprintComponentDataCookingMethod;
  
  /**
    Whether or not to compile Blueprints in development mode when cooking.
  **/
  @:uproperty public var bCompileBlueprintsInDevelopmentMode : Bool;
  
  /**
    Ignore native header file changes when doing iterative cooking, either in editor or out of editor
  **/
  @:uproperty public var bIgnoreScriptPackagesOutOfDateForIteration : Bool;
  
  /**
    Ignore ini changes when doing iterative cooking, either in editor or out of editor
  **/
  @:uproperty public var bIgnoreIniSettingsOutOfDateForIteration : Bool;
  
  /**
    Controls log output of the cooker
  **/
  @:uproperty public var CookProgressDisplayMode : unreal.editor.ECookProgressDisplayMode;
  
  /**
    Enable -cookonthefly for launch on
  **/
  @:uproperty public var bCookOnTheFlyForLaunchOn : Bool;
  
  /**
    Enable -iterate for launch on
  **/
  @:uproperty public var bIterativeCookingForFileCookContent : Bool;
  
  /**
    Enable -iterate for launch on
  **/
  @:uproperty public var bIterativeCookingForLaunchOn : Bool;
  @:uproperty public var bEnableBuildDDCInBackground : Bool;
  @:uproperty public var bEnableCookOnTheSide : Bool;
  
}
