/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.houdininiagara;

@:umodule("HoudiniNiagara")
@:glueCppIncludes("HoudiniCSV.h")
@:uextern @:uclass extern class UHoudiniCSV extends unreal.UObject {
  
  /**
    Returns the number of points found in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumberOfPoints() : unreal.Int32;
  
  /**
    Returns the number of rows found in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumberOfRows() : unreal.Int32;
  
  /**
    Returns the number of columns found in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumberOfColumns() : unreal.Int32;
  
  /**
    Returns the column index for a given string
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetColumnIndexFromString(ColumnTitle : unreal.FString, ColumnIndex : unreal.Int32) : Bool;
  
  /**
    Returns the float value at a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFloatValue(rowIndex : unreal.Int32, colIndex : unreal.Int32, value : unreal.Float32) : Bool;
  
  /**
    Returns the float value at a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFloatValueForString(rowIndex : unreal.Int32, ColumnTitle : unreal.FString, value : unreal.Float32) : Bool;
  
  /**
    // Returns the string value at a given point in the CSV file
    bool GetCSVStringValue( const int32& rowIndex, const int32& colIndex, FString& value );
    // Returns the string value at a given point in the CSV file
    bool GetCSVStringValue( const int32& rowIndex, const FString& ColumnTitle, FString& value );
    // Returns a Vector3 for a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVectorValue(rowIndex : unreal.Int32, colIndex : unreal.Int32, value : unreal.PRef<unreal.FVector>, DoSwap : Bool = true, DoScale : Bool = true) : Bool;
  
  /**
    Returns a time value for a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTimeValue(rowIndex : unreal.Int32, value : unreal.Float32) : Bool;
  
  /**
    Returns a Position Vector3 for a given point in the CSV file (converted to unreal's coordinate system)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPositionValue(rowIndex : unreal.Int32, value : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Returns a Normal Vector3 for a given point in the CSV file (converted to unreal's coordinate system)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNormalValue(rowIndex : unreal.Int32, value : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Returns a Color for a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetColorValue(rowIndex : unreal.Int32, value : unreal.PRef<unreal.FLinearColor>) : Bool;
  
  /**
    Returns a Velocity Vector3 for a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVelocityValue(rowIndex : unreal.Int32, value : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Returns an Impulse float value for a given point in the CSV file
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetImpulseValue(rowIndex : unreal.Int32, value : unreal.Float32) : Bool;
  
  /**
    Get the last row index for a given time value (the row with a time smaller or equal to desiredTime)
    If the CSV file doesn't have time informations, returns false and set LastRowIndex to the last row in the file
    If desiredTime is smaller than the time value in the first row, LastRowIndex will be set to -1
    If desiredTime is higher than the last time value in the last row of the csv file, LastIndex will be set to the last row's index
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastRowIndexAtTime(desiredTime : unreal.Float32, lastRowIndex : unreal.Int32) : Bool;
  
  /**
    Get the last pointID of the points to be spawned at time t
    Invalid Index are used to indicate edge cases:
    -1 will be returned if there is no points to spawn ( t is smaller than the first point time )
    NumberOfRows will be returned if all points in the CSV have been spawned ( t is higher than the last point time )
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastPointIDToSpawnAtTime(time : unreal.Float32, lastIndex : unreal.Int32) : Bool;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointIDsToSpawnAtTime(desiredTime : unreal.Float32, MinID : unreal.Int32, MaxID : unreal.Int32, Count : unreal.Int32, LastSpawnedPointID : unreal.Int32, LastSpawnTime : unreal.Float32) : Bool;
  
  /**
    Returns the previous and next indexes for reading the values of a specified point at a given time
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetRowIndexesForPointAtTime(PointID : unreal.Int32, desiredTime : unreal.Float32, PrevIndex : unreal.Int32, NextIndex : unreal.Int32, PrevWeight : unreal.Float32) : Bool;
  
  /**
    Returns the value for a point at a given time value (linearly interpolated)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointValueAtTime(PointID : unreal.Int32, ColumnIndex : unreal.Int32, desiredTime : unreal.Float32, Value : unreal.Float32) : Bool;
  
  /**
    Returns the Vector Value for a given point at a given time value (linearly interpolated)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointVectorValueAtTime(PointID : unreal.Int32, ColumnIndex : unreal.Int32, desiredTime : unreal.Float32, Vector : unreal.PRef<unreal.FVector>, DoSwap : Bool, DoScale : Bool) : Bool;
  
  /**
    Returns the Position Value for a given point at a given time value (linearly interpolated)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointPositionAtTime(PointID : unreal.Int32, desiredTime : unreal.Float32, Vector : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Return a given point's life value at spawn
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointLife(PointID : unreal.Int32, Value : unreal.Float32) : Bool;
  
  /**
    Return a point's life for a given time value
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointLifeAtTime(PointID : unreal.Int32, DesiredTime : unreal.Float32, Value : unreal.Float32) : Bool;
  
  /**
    Return a point's type at spawn
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointType(PointID : unreal.Int32, Value : unreal.Int32) : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    Importing data and options used for this asset
  **/
  @:uproperty public var AssetImportData : unreal.UAssetImportData;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The final column titles used by the asset after parsing.
    Describes the content of each column.
    Packed vector values are expended, so additional column might have been inserted.
    Use the indexes in this array to access your data.
  **/
  @:uproperty public var ColumnTitleArray : unreal.TArray<unreal.FString>;
  
  /**
    The source title row, describing the content of each column and used to locate specific values in the CSV file.
    Editing this will trigger a re-import of the CSV file.
  **/
  @:uproperty public var SourceTitleRow : unreal.FString;
  
  /**
    The number of points found in the CSV file
  **/
  @:uproperty public var NumberOfPoints : unreal.Int32;
  
  /**
    The number of value TYPES stored in the CSV file
  **/
  @:uproperty public var NumberOfColumns : unreal.Int32;
  
  /**
    The number of values stored in the CSV file (excluding the title row)
  **/
  @:uproperty public var NumberOfRows : unreal.Int32;
  
  /**
    MEMBER VARIABLES
  **/
  @:uproperty public var FileName : unreal.FString;
  
}
