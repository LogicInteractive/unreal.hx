/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.virtualcamera;

@:umodule("VirtualCamera")
@:glueCppIncludes("VirtualCameraPlayerControllerBase.h")
@:uextern @:uclass extern class AVirtualCameraPlayerControllerBase extends unreal.APlayerController {
  
  /**
    Target camera that is spawned or possessed on begin play for the sequence controller
  **/
  @:uproperty private var TargetCameraActor : unreal.cinematiccamera.ACineCameraActor;
  
  /**
    Controller for level sequence playback
  **/
  @:uproperty private var LevelSequencePlaybackController : unreal.virtualcamera.ULevelSequencePlaybackController;
  @:uproperty public var RootActor : unreal.vputilities.AVPRootActor;
  @:uproperty public var OnOffsetReset : unreal.virtualcamera.FVirtualCameraResetOffsetsDelegate;
  
  /**
    Array of any properties that should be recorded
  **/
  @:uproperty public var RequiredSequencerRecorderCameraSettings : unreal.TArray<unreal.FName>;
  
  /**
    Class of CameraActor to spawn to allow user to use their own customized camera
  **/
  @:uproperty public var TargetCameraActorClass : unreal.TSubclassOf<unreal.cinematiccamera.ACineCameraActor>;
  
  /**
    Offset applied to calculated location after tracker transform is added
  **/
  @:uproperty public var TrackerPostOffset : unreal.virtualcamera.FTrackingOffset;
  
  /**
    Offset applied to calculated location before tracker transform is added
  **/
  @:uproperty public var TrackerPreOffset : unreal.virtualcamera.FTrackingOffset;
  
  /**
    Controller for level sequence playback
  **/
  @:uproperty public var LiveLinkTargetName : unreal.FName;
  
  /**
    Allows user to select which tracker input should be used
  **/
  @:uproperty(BlueprintSetter=SetInputSource) public var InputSource : unreal.virtualcamera.ETrackerInputSource;
  
  /**
    Overridable function to allow user to get tracker data from blueprints.
    @param OutTrackerLocation - The current location of the tracker being used
    @param OutTrackerRotation - The current rotation of the tracker being used
  **/
  @:ufunction(BlueprintImplementableEvent) public function GetCustomTrackerLocationAndRotation(OutTrackerLocation : unreal.PRef<unreal.FVector>, OutTrackerRotation : unreal.PRef<unreal.FRotator>) : Void;
  
  /**
    Blueprint Event for updating position of autofocus reticle.
    @param NewReticleLocation - The new location of the autofocus reticle
  **/
  @:ufunction(BlueprintImplementableEvent) public function UpdateFocusReticle(NewReticleLocation : unreal.FVector) : Void;
  
  /**
    Blueprint Event for updating if a sequence can be recorded or not.
    @param bIsRecordEnabled - If the loaded sequence can record or not.
  **/
  @:ufunction(BlueprintImplementableEvent) public function OnRecordEnabledStateChanged(bIsRecordEnabled : Bool) : Void;
  
  /**
    Blueprint Event for when a sequence stops playing.
  **/
  @:ufunction(BlueprintImplementableEvent) public function OnStopped() : Void;
  
  /**
    Sets the autofocus point to the correct starting location at the center of the screen
  **/
  @:ufunction(BlueprintCallable) @:final public function InitializeAutoFocusPoint() : Void;
  
  /**
    Returns the target camera that was spawned for this play
  **/
  @:ufunction(BlueprintCallable) @:final public function GetTargetCamera() : unreal.cinematiccamera.ACineCameraActor;
  
  /**
    Set the input source
  **/
  @:ufunction(BlueprintCallable) @:final public function SetInputSource(InInputSource : unreal.virtualcamera.ETrackerInputSource) : Void;
  
  /**
    Blueprint event for when the focus method is changed.
    @param NewFocuMethod - The focus method
  **/
  @:ufunction(BlueprintImplementableEvent) public function FocusMethodChanged(NewFocusMethod : unreal.virtualcamera.EVirtualCameraFocusMethod) : Void;
  
  /**
    Converts a distance in unreal units (cm) to other units of measurement for display.
    @param InputDistance - A distance in Unreal Units to be converted
    @param ConversionUnit - The desired unit of distance to be used
    @return the distance converted and put into a string for display
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDistanceInDesiredUnits(InputDistance : unreal.Float32, ConversionUnit : unreal.Const<unreal.EUnit>) : unreal.FString;
  
  /**
    Broadcast offset resets when movement component broadcasts
  **/
  @:ufunction @:final private function BroadcastOffsetReset() : Void;
  
  /**
    * Is this machine should display the Virtual Camera UI and establish a connection with the remote session app.
  **/
  @:ufunction(BlueprintNativeEvent) @:thisConst private function IsVirtualCameraControlledByRemoteSession() : Bool;
  
  /**
    * In multi user session, how should we update the information across different sessions.
  **/
  @:ufunction(BlueprintNativeEvent) @:thisConst private function ShouldUpdateTargetCameraTransform() : Bool;
  
  /**
    Adjusts the aperture of the camera to an adjacent preset value.
    @param bShiftUp - If true, the aperture will increase; if false, it will decrease
    @return the new aperture of the camera
  **/
  @:ufunction(BlueprintCallable) @:final public function ChangeAperturePreset(bShiftUp : Bool) : unreal.Float32;
  
  /**
    Adjust the focal length of the camera to an adjecent preset value.
    @param bShiftUp - If true, the focal length will increase; if false, it will decrease
    @return the new focal length of the camera in mm
  **/
  @:ufunction(BlueprintCallable) @:final public function ChangeFocalLengthPreset(bShiftUp : Bool) : unreal.Float32;
  
  /**
    Clears the current level sequence player, needed when recording clean takes of something
  **/
  @:ufunction(BlueprintCallable) @:final public function ClearActiveLevelSequence() : Void;
  
  /**
    Deletes a preset using its name as the key.
    @param PresetName - The name of the preset to delete
    @return the number of values associated with the key
  **/
  @:ufunction(BlueprintCallable) @:final public function DeletePreset(PresetName : unreal.FString) : unreal.Int32;
  
  /**
    Deletes a screenshot, using its name as the key.
    @param ScreenshotName - The name of the screenshot to delete
    @return the number of values associated with the key
  **/
  @:ufunction(BlueprintCallable) @:final public function DeleteScreenshot(ScreenshotName : unreal.FString) : unreal.Int32;
  
  /**
    Deletes a waypoint, using its name as the key.
    @param WaypointName - The name of the waypoint to delete
    @return the number of values associated with the key
  **/
  @:ufunction(BlueprintCallable) @:final public function DeleteWaypoint(WaypointName : unreal.FString) : unreal.Int32;
  
  /**
    Returns the asset name of the currently selected sequence
    @return the name of the crrent selected sequence; returns empty string if no selected sequence
  **/
  @:ufunction(BlueprintCallable) @:final public function GetActiveLevelSequenceName() : unreal.FString;
  
  /**
    Returns the currently selected sequence
    @return the current selected sequence; returns nullptr if no selected sequence
  **/
  @:ufunction(BlueprintCallable) @:final public function GetActiveLevelSequence() : unreal.levelsequence.ULevelSequence;
  
  /**
    Gets stabalization scale for a specific axis.
    @param AxisToRetrieve - The axis of the stabilization value needed
    @return the stabilization scale for the given axis
  **/
  @:ufunction(BlueprintCallable) @:final public function GetAxisStabilizationScale(AxisToRetrieve : unreal.virtualcamera.EVirtualCameraAxis) : unreal.Float32;
  
  /**
    Gets movement scale for a specific axis.
    @param AxisToRetrieve - The axis of the scale value needed
    @return the movement scale for the given axis
  **/
  @:ufunction(BlueprintCallable) @:final public function GetAxisMovementScale(AxisToRetrieve : unreal.virtualcamera.EVirtualCameraAxis) : unreal.Float32;
  
  /**
    Get the current aperture value on the camera.
    @return the current aperture of the camera component
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentAperture() : unreal.Float32;
  
  /**
    Get the name of the current preset filmback option on the camera.
    @return the name of the current preset filmback option
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentFilmbackName() : unreal.FString;
  
  /**
    Get the current focal length value on the camera.
    @return the current focal length of the camera being viewed
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentFocalLength() : unreal.Float32;
  
  /**
    Returns the current focus distance of the camera.
    @return the focal distance of the camera
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentFocusDistance() : unreal.Float32;
  
  /**
    Returns the current focus method.
    @return the focus method being used
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentFocusMethod() : unreal.virtualcamera.EVirtualCameraFocusMethod;
  
  /**
    Get the end position of the currently selected sequence
    @return the end position of the sequence in FrameNumber
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentSequencePlaybackEnd() : unreal.FFrameNumber;
  
  /**
    Get the start position of the currently selected sequence
    @return the start position of the sequence in FrameNumber
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentSequencePlaybackStart() : unreal.FFrameNumber;
  
  /**
    Gets the locked to camera cut from the active LevelSequence
  **/
  @:ufunction(BlueprintCallable) @:final public function IsSequencerLockedToCameraCut() : Bool;
  
  /**
    Sets the locked to camera cut from the active LevelSequence
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSequencerLockedToCameraCut(bLockView : Bool) : Void;
  
  /**
    Get the frame rate of the currently selected sequence
    @return the frame rate in frames per second
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentSequenceFrameRate() : unreal.FFrameRate;
  
  /**
    Set the matte aspect ratio to a new value.
    @return DesiredUnits - The new unit to use for distance measures like focus distance
  **/
  @:ufunction(BlueprintCallable) @:final public function GetDesiredDistanceUnits() : unreal.EUnit;
  
  /**
    Get the current color of the focus plane that should be used
    @return - The name of the current or next sequence that will be recorded
  **/
  @:ufunction(BlueprintCallable) @:final public function GetFocusPlaneColor() : unreal.FColor;
  
  /**
    Stores the names of all available filmback presets into an array.
    @param OutFilmbackPresets - Upon return, will contain all available filmback presets
    @return true if operation was successful
  **/
  @:ufunction(BlueprintCallable) @:final public function GetFilmbackPresetOptions(OutFilmbackPresetsArray : unreal.PRef<unreal.TArray<unreal.FString>>) : Bool;
  
  /**
    Gets the length of the currently selected level sequence
    @return the length of the level sequence in FrameNumber
  **/
  @:ufunction(BlueprintCallable) @:final public function GetLevelSequenceLength() : unreal.FFrameNumber;
  
  /**
    Returns the names of each level sequence asset in the project
    @param OutLevelSequenceNames - Upon return, array will contain all available level sequence names
  **/
  @:ufunction(BlueprintCallable) @:final public function GetLevelSequences(OutLevelSequenceNames : unreal.PRef<unreal.TArray<unreal.virtualcamera.FLevelSequenceData>>) : Void;
  
  /**
    Returns the current matte aspect ratio.
    @return the current matte setting
  **/
  @:ufunction(BlueprintCallable) @:final public function GetMatteAspectRatio() : unreal.Float32;
  
  /**
    Set the matte aspect ratio to a new value.
    @return The desired matte opacity to use
  **/
  @:ufunction(BlueprintCallable) @:final public function GetMatteOpacity() : unreal.Float32;
  
  /**
    Returns the values of all matte options.
    @param OutMatteValues - Upon return, array will contain all matte values.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetMatteValues(OutMatteValues : unreal.PRef<unreal.TArray<unreal.Float32>>) : Void;
  
  /**
    Gets the playback position of the level sequence
    @return the current playback position
  **/
  @:ufunction(BlueprintCallable) @:final public function GetPlaybackPosition() : unreal.FFrameTime;
  
  /**
    Gets the playback Timecode of the level sequence
    @return the current playback Timecode
  **/
  @:ufunction(BlueprintCallable) @:final public function GetPlaybackTimecode() : unreal.FTimecode;
  
  /**
    Returns the information associated with a Screenshot.
    @param ScreenshotName - The name of the screenshot to retrieve
    @param OutScreenshotInfo - Upon return, will hold the info for the screenshot.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetScreenshotInfo(ScreenshotName : unreal.FString, OutScreenshotInfo : unreal.PRef<unreal.virtualcamera.FVirtualCameraScreenshot>) : Void;
  
  /**
    Collects a list of existing screenshot names.
    @param OutArray - Upon return, will store screenshot names.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetScreenshotNames(OutArray : unreal.PRef<unreal.TArray<unreal.FString>>) : Void;
  
  /**
    Sets the current state of touch input.
    @return the current state of the input
  **/
  @:ufunction(BlueprintCallable) @:final public function GetTouchInputState() : unreal.virtualcamera.ETouchInputState;
  
  /**
    Returns the information associated with a waypoint.
    @param WaypointName - The name of the waypoint to retrieve
    @param OutWaypointInfo - Upon return, will hold the info for that waypoint.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetWaypointInfo(WaypointName : unreal.FString, OutWaypointInfo : unreal.PRef<unreal.virtualcamera.FVirtualCameraWaypoint>) : Void;
  
  /**
    Collects a list of existing waypoint names.
    @param OutArray - Upon return, will store the waypoint names.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetWaypointNames(OutArray : unreal.PRef<unreal.TArray<unreal.FString>>) : Void;
  
  /**
    Checks if an axis is locked.
    @param AxisToCheck - The axis being checked
    @return true if locked false otherwise
  **/
  @:ufunction(BlueprintCallable) @:final public function IsAxisLocked(AxisToCheck : unreal.virtualcamera.EVirtualCameraAxis) : Bool;
  
  /**
    Checks whether or not focus visualization can activate
    @return the current state of touch event visualization
  **/
  @:ufunction(BlueprintCallable) @:final public function IsFocusVisualizationAllowed() : Bool;
  
  /**
    Check to see if the sequence is playing
    @return if the sequence is playing
  **/
  @:ufunction(BlueprintCallable) @:final public function IsPlaying() : Bool;
  
  /**
    Helper to check if touch input state is in a touch focus mode.
    @return if touch input is in touch focus mode
  **/
  @:ufunction(BlueprintCallable) @:final public function IsTouchInputInFocusMode() : Bool;
  
  /**
    Get whether or not global boom is being used when navigating with the joysticks
    @param bShouldUseGlobalBoom - True if using global Z axis, false if using local Z axis
  **/
  @:ufunction(BlueprintCallable) @:final public function IsUsingGlobalBoom() : Bool;
  
  /**
    Goes to the end of the level sequence and pauses
  **/
  @:ufunction(BlueprintCallable) @:final public function JumpToLevelSequenceEnd() : Void;
  
  /**
    Goes to the start of the level sequence and pauses
  **/
  @:ufunction(BlueprintCallable) @:final public function JumpToLevelSequenceStart() : Void;
  
  /**
    Sets the playback position of the level sequence.
    @param InFrameNumber - New FrameNumber to jump to.
  **/
  @:ufunction(BlueprintCallable) @:final public function JumpToPlaybackPosition(InFrameNumber : unreal.Const<unreal.PRef<unreal.FFrameNumber>>) : Void;
  
  /**
    Loads a preset using its name as a string key.
    @returns true if successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) @:final public function LoadPreset(PresetName : unreal.FString) : Bool;
  
  /**
    Moves a camera to the location where a screenshot was taken and restores camera settings used for that screenshot.
    @param ScreenshotIndex - The index of the screenshot in the Screenshots array
    @return whether or not the load was successful
  **/
  @:ufunction(BlueprintCallable) @:final public function LoadScreenshotView(ScreenshotName : unreal.FString) : Bool;
  
  /**
    Pauses the playing of the current level sequence.
  **/
  @:ufunction(BlueprintCallable) @:final public function PauseLevelSequence() : Void;
  
  /**
    Plays current level sequence
  **/
  @:ufunction(BlueprintCallable) @:final public function PlayLevelSequence() : Void;
  
  /**
    Plays current level sequence in reverse
  **/
  @:ufunction(BlueprintCallable) @:final public function PlayLevelSequenceInReverse() : Void;
  
  /**
    Moves the camera back to actor root and aligns rotation with the input tracker.
  **/
  @:ufunction(BlueprintCallable) @:final public function ResetCameraOffsetsToTracker() : Void;
  
  /**
    Plays current level sequence from the current time.
  **/
  @:ufunction(BlueprintCallable) @:final public function ResumeLevelSequencePlay() : Void;
  
  /**
    Stores the new home waypoint location.
    @param NewHomeWaypointName - The name of the new home waypoint to use
  **/
  @:ufunction(BlueprintCallable) @:final public function SaveHomeWaypoint(NewHomeWaypointName : unreal.FString) : Void;
  
  /**
    Saves a preset into the list of presets.
    @param bSaveCameraSettings - Should this preset save camera settings
    @param bSaveStabilization - Should this preset save stabilization settings
    @param bSaveAxisLocking - Should this preset save axis locking settings
    @param bSaveMotionScale - Should this preset save motion scaled settings
    @return the name of the preset
  **/
  @:ufunction(BlueprintCallable) @:final public function SavePreset(bSaveCameraSettings : Bool, bSaveStabilization : Bool, bSaveAxisLocking : Bool, bSaveMotionScale : Bool) : unreal.FString;
  
  /**
    Stores the current pawn location as a waypoint.
    @return the index of the new waypoint in the saved waypoints array
  **/
  @:ufunction(BlueprintCallable) @:final public function SaveWaypoint() : unreal.FString;
  
  /**
    Changes the active level sequence to a new level sequence.
    @param LevelSequenceName - The name of the level sequence to select
    @return true if a valid level sequence player was found, false if no level sequence player is currently available
  **/
  @:ufunction(BlueprintCallable) @:final public function SetActiveLevelSequence(InNewLevelSequence : unreal.levelsequence.ULevelSequence) : Bool;
  
  /**
    Sets whether or not to use focus visualization
    @param bShouldAllowFocusVisualization - the current state of touch event visualization
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAllowFocusPlaneVisualization(bShouldAllowFocusVisualization : Bool) : Void;
  
  /**
    Sets the stabilization rate for a given lock.
    @param AxisToAdjust - The axis whose stabilization rate should be changed
    @param NewStabilizationAmount - The stabilization amount we should attempt to set the value
    @return the actual value the stabilization amount was set to after clamping
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAxisStabilizationScale(AxisToAdjust : unreal.virtualcamera.EVirtualCameraAxis, NewStabilizationAmount : unreal.Float32) : unreal.Float32;
  
  /**
    Set the current aperture value on the camera.
    @param NewAperture - The current aperture of the camera component
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurrentAperture(NewAperture : unreal.Float32) : Void;
  
  /**
    Sets the current focal length of the cinematic camera to a given value.
    @param NewFocalLength - The target focal length of the camera
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurrentFocalLength(NewFocalLength : unreal.Float32) : Void;
  
  /**
    Sets the current focus distance of the cinematic camera to a given value.
    @param NewFocusDistance - The target focus distance of the camera
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurrentFocusDistance(NewFocusDistance : unreal.Float32) : Void;
  
  /**
    Set the matte aspect ratio to a new value.
    @param DesiredUnits - The new unit to use for distance measures like focus distance
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDesiredDistanceUnits(DesiredUnits : unreal.Const<unreal.EUnit>) : Void;
  
  /**
    Set the filmback settings to a new filmback preset.
    @return true if operation was successful; false if NewFilmbackPreset is not a valid option
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilmbackPresetOption(NewFilmbackPreset : unreal.FString) : Bool;
  
  /**
    Sets the camera focus method.
    @param NewFocusMethod - The new focus method to be used by the camera
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFocusMethod(NewFocusMethod : unreal.Const<unreal.virtualcamera.EVirtualCameraFocusMethod>) : Void;
  
  /**
    Changes focus plane color.
    @param - The new color for the focus plane when focus Visualization is activate
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFocusPlaneColor(NewFocusPlaneColor : unreal.Const<unreal.FColor>) : Void;
  
  /**
    Toggles focus visualization tools on camera.
    @param bShowFocusVisualization - The desired state of the visualization tools
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFocusVisualization(bShowFocusVisualization : Bool) : Void;
  
  /**
    Checks whether or not focus visualization is activate
    @return the current state of touch event visualization
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsFocusVisualizationActivated() : Bool;
  
  /**
    Set the matte aspect ratio to a new value.
    @param NewMatteAspectRatio - The desired matte aspect to use
    @return true if operation was successful; false if NewMattePreset is not a valid input
  **/
  @:ufunction(BlueprintCallable) @:final public function SetMatteAspectRatio(NewMatteAspectRatio : unreal.Float32) : Bool;
  
  /**
    Set the matte aspect ratio to a new value.
    @param NewMatteOpacity - The desired matte aspect opacity to use
  **/
  @:ufunction(BlueprintCallable) @:final public function SetMatteOpacity(NewMatteOpacity : unreal.Float32) : Void;
  
  /**
    Sets the movement scale of the camera actor.
    @param AxisToAdjust - The axis to set movement scale on (setting for rotation axes is allowed but has no effect)
    @param NewMovementScale - The desired scaling factor for calculating movement along this axis
  **/
  @:ufunction(BlueprintCallable) @:final public function SetMovementScale(AxisToAdjust : unreal.Const<unreal.virtualcamera.EVirtualCameraAxis>, NewMovementScale : unreal.Float32) : Void;
  
  /**
    Sets whether or not a preset is favorited
    @param PresetName - The name of the preset to adjust favorite setting for
    @param bIsFavorite - Whether settings should be saved
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPresetFavoriteStatus(PresetName : unreal.FString, bIsFavorite : Bool) : Void;
  
  /**
    Sets whether settings should be saved on exit.
    @param bShouldSettingsSave - Whether settings should be saved
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSaveSettingsWhenClosing(bShouldSettingsSave : Bool) : Void;
  
  /**
    Sets whether or not a screenshot is favorited
    @param ScreenshotName - The name of the screenshot to adjust favorite setting for
    @param bIsFavorite - Whether settings should be saved
  **/
  @:ufunction(BlueprintCallable) @:final public function SetScreenshotFavoriteStatus(ScreenshotName : unreal.FString, bIsFavorite : Bool) : Void;
  
  /**
    Sets the current state of touch input.
    @param NewInputState - The new state of the input
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTouchInputState(NewInputState : unreal.virtualcamera.ETouchInputState) : Void;
  
  /**
    Sets whether or not global boom should be used when navigating with the joysticks
    @param bShouldUseGlobalBoom - True to use global Z axis, false to use local Z axis
  **/
  @:ufunction(BlueprintCallable) @:final public function SetUseGlobalBoom(bShouldUseGlobalBoom : Bool) : Void;
  
  /**
    Sets whether or not a waypoint is favorited
    @param WaypointName - The name of the waypoint to adjust favorite setting for
    @param bIsFavorite - Whether settings should be saved
  **/
  @:ufunction(BlueprintCallable) @:final public function SetWaypointFavoriteStatus(WaypointName : unreal.FString, bIsFavorite : Bool) : Void;
  
  /**
    Set the value for the option to zero out dutch when locking that axis.
    @param bInValue - The new setting to use for zeroing dutch on lock
  **/
  @:ufunction(BlueprintCallable) @:final public function SetZeroDutchOnLock(bInValue : Bool) : Void;
  
  /**
    Check whether settings should save when closing
    @return whether settings should save when closing
  **/
  @:ufunction(BlueprintCallable) @:final public function ShouldSaveSettingsWhenClosing() : Bool;
  
  /**
    Stops the currently playing level sequence.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopLevelSequencePlay() : Void;
  
  /**
    Takes a screenshot from the current view and saves the location and camera settings.
    @return the index of the saved screenshot in the screenshots array
  **/
  @:ufunction(BlueprintCallable) @:final public function TakeScreenshot() : unreal.FString;
  
  /**
    Teleports to the current marked home waypoint.
  **/
  @:ufunction(BlueprintCallable) @:final public function TeleportToHomeWaypoint() : Void;
  
  /**
    Teleports the pawn to a specific location.
    @param WaypointIndex - The index of the target waypoint in the waypoints array
    @return if the teleport was successful, return true
  **/
  @:ufunction(BlueprintCallable) @:final public function TeleportToWaypoint(WaypointIndex : unreal.FString) : Bool;
  
  /**
    Toggles the freeze on a given axis; returns new frozen state.
    @param AxisToToggle - The axis whose lock should be toggled
    @return the new frozen state of AxisToToggle (true = frozen)
  **/
  @:ufunction(BlueprintCallable) @:final public function ToggleAxisFreeze(AxisToToggle : unreal.Const<unreal.virtualcamera.EVirtualCameraAxis>) : Bool;
  
  /**
    Toggles the lock on a given axis; returns new locked state.
    @param AxisToToggle - The axis whose lock should be turned on/off
    @return the new locked state of AxisToToggle (true = locked)
  **/
  @:ufunction(BlueprintCallable) @:final public function ToggleAxisLock(AxisToToggle : unreal.Const<unreal.virtualcamera.EVirtualCameraAxis>) : Bool;
  
}
