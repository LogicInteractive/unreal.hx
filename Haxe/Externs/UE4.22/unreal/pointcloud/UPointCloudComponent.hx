/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.pointcloud;

/**
  Component for rendering a point cloud
**/
@:umodule("PointCloud")
@:glueCppIncludes("PointCloudComponent.h")
@:uextern @:uclass extern class UPointCloudComponent extends unreal.UMeshComponent {
  
  /**
    The material to render with
  **/
  @:uproperty public var PointCloudMaterial : unreal.UMaterialInterface;
  
  /**
    The size of the point when rendering
  **/
  @:uproperty public var PointSize : unreal.Float32;
  
  /**
    The color to render the points with
  **/
  @:uproperty public var PointColor : unreal.FLinearColor;
  
  /**
    Point cloud color data that will be used for rendering
  **/
  @:uproperty public var PointColors : unreal.TArray<unreal.FColor>;
  
  /**
    Point cloud data that will be used for rendering, assumes each point is in world space
  **/
  @:uproperty public var PointCloud : unreal.TArray<unreal.FVector>;
  
  /**
    If true, each tick the component will render its point cloud
  **/
  @:uproperty public var bIsVisible : Bool;
  
  /**
    Changes the visibility setting
  **/
  @:ufunction(BlueprintCallable) @:final public function SetIsVisible(bNewVisibility : Bool) : Void;
  
  /**
    Updates the point cloud data with the new set of points
    
    @param Points the new set of points to use
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointCloud(Points : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>) : Void;
  
  /**
    Updates the point cloud data with the new set of points and colors
    
    @param Points the new set of points to use
    @param Colors the new set of colors to use, must match points size
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointCloudWithColors(Points : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, Colors : unreal.Const<unreal.PRef<unreal.TArray<unreal.FColor>>>) : Void;
  
  /**
    Empties the point cloud
  **/
  @:ufunction(BlueprintCallable) @:final public function ClearPointCloud() : Void;
  
  /**
    Allows you to change the color of the points being rendered
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointColor(Color : unreal.Const<unreal.PRef<unreal.FLinearColor>>) : Void;
  
  /**
    Allows you to change the size of the points being rendered
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointSize(Size : unreal.Float32) : Void;
  
  /**
    Determines which points are within the box and returns those to the caller
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointsInBox(WorldSpaceBox : unreal.Const<unreal.PRef<unreal.FBox>>) : unreal.TArray<unreal.FVector>;
  
  /**
    Determines which points are outside the box and returns those to the caller
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPointsOutsideBox(WorldSpaceBox : unreal.Const<unreal.PRef<unreal.FBox>>) : unreal.TArray<unreal.FVector>;
  
}
