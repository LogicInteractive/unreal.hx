/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.sequencerscriptingeditor;

/**
  This is a set of helper functions to access various parts of the Sequencer API via Python. Because Sequencer itself is not suitable for exposing, most functionality
  gets wrapped by UObjects that have an easier API to work with. This UObject provides access to these wrapper UObjects where needed.
**/
@:umodule("SequencerScriptingEditor")
@:glueCppIncludes("SequencerTools.h")
@:uextern @:uclass extern class USequencerToolsFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Attempts to render a sequence to movie based on the specified settings. This will automatically detect
    if we're rendering via a PIE instance or a new process based on the passed in settings. Will return false
    if the state is not valid (ie: null or missing required parameters, capture in progress, etc.), true otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function RenderMovie(InCaptureSettings : unreal.moviescenecapture.UMovieSceneCapture, OnFinishedCallback : unreal.sequencerscriptingeditor.FOnRenderMovieStopped) : Bool;
  
  /**
    Returns if Render to Movie is currently in progress.
  **/
  @:ufunction(BlueprintCallable) static public function IsRenderingMovie() : Bool;
  
  /**
    Attempts to cancel an in-progress Render to Movie. Does nothing if there is no render in progress.
  **/
  @:ufunction(BlueprintCallable) static public function CancelMovieRender() : Void;
  
}
