/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

@:umodule("AudioMixer")
@:glueCppIncludes("AudioMixerBlueprintLibrary.h")
@:uextern @:uclass extern class UAudioMixerBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Adds a submix effect preset to the master submix.
  **/
  @:ufunction(BlueprintCallable) static public function AddMasterSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Removes a submix effect preset from the master submix.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveMasterSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Clears all master submix effects.
  **/
  @:ufunction(BlueprintCallable) static public function ClearMasterSubmixEffects(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Start recording audio. By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StartRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExpectedDuration : unreal.Float32, @:opt("None") SubmixToRecord : unreal.USoundSubmix) : Void;
  
  /**
    Stop recording audio. Path can be absolute, or relative (to the /Saved/BouncedWavFiles folder). By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StopRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExportType : unreal.EAudioRecordingExportType, Name : unreal.FString, Path : unreal.FString, @:opt("None") SubmixToRecord : unreal.USoundSubmix, @:opt("None") ExistingSoundWaveToOverwrite : unreal.USoundWave) : unreal.USoundWave;
  
  /**
    Pause recording audio, without finalizing the recording to disk. By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function PauseRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToPause : unreal.USoundSubmix) : Void;
  
  /**
    Resume recording audio after pausing. By leaving the Submix To Pause field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function ResumeRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToPause : unreal.USoundSubmix) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StartAnalyzingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix, @:opt("DefaultSize") FFTSize : unreal.audiomixer.EFFTSize, @:opt("Linear") InterpolationMethod : unreal.audiomixer.EFFTPeakInterpolationMethod, @:opt("Hann") WindowType : unreal.audiomixer.EFFTWindowType, HopSize : unreal.Float32 = 0.000000) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Stop Analyzing blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StopAnalyzingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToStopAnalyzing : unreal.USoundSubmix) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function GetMagnitudeForFrequencies(WorldContextObject : unreal.Const<unreal.UObject>, Frequencies : unreal.Const<unreal.PRef<unreal.TArray<unreal.Float32>>>, Magnitudes : unreal.PRef<unreal.TArray<unreal.Float32>>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function GetPhaseForFrequencies(WorldContextObject : unreal.Const<unreal.UObject>, Frequencies : unreal.Const<unreal.PRef<unreal.TArray<unreal.Float32>>>, Phases : unreal.PRef<unreal.TArray<unreal.Float32>>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix) : Void;
  
  /**
    Adds source effect entry to preset chain. Only effects the instance of the preset chain
  **/
  @:ufunction(BlueprintCallable) static public function AddSourceEffectToPresetChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, Entry : unreal.FSourceEffectChainEntry) : Void;
  
  /**
    Adds source effect entry to preset chain. Only affects the instance of preset chain.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveSourceEffectFromPresetChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, EntryIndex : unreal.Int32) : Void;
  
  /**
    Set whether or not to bypass the effect at the source effect chain index.
  **/
  @:ufunction(BlueprintCallable) static public function SetBypassSourceEffectChainEntry(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, EntryIndex : unreal.Int32, bBypassed : Bool) : Void;
  
  /**
    Returns the number of effect chain entries in the given source effect chain.
  **/
  @:ufunction(BlueprintCallable) static public function GetNumberOfEntriesInSourceEffectChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain) : unreal.Int32;
  
}
