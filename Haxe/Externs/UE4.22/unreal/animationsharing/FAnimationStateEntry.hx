/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animationsharing;

@:umodule("AnimationSharing")
@:glueCppIncludes("Public/AnimationSharingTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FAnimationStateEntry {
  
  /**
    Whether or not this animation requires curves or morphtargets to function correctly for slave components
  **/
  @:uproperty public var bRequiresCurves : Bool;
  
  /**
    Percentage of 'wiggle' frames, this is used when we run out of available entries in Components, if one of the on-demand animations has started SequenceLength * WiggleFramePercentage ago or earlier,
          it is used instead of a brand new one
  **/
  @:uproperty public var WiggleTimePercentage : unreal.Float32;
  
  /**
    Number of instances that will be created for this state (platform-specific)
  **/
  @:uproperty public var MaximumNumberOfConcurrentInstances : unreal.FPerPlatformInt;
  
  /**
    State value to which the actors part of an on demand state should be set to when its animation has finished
  **/
  @:uproperty public var NextState : unreal.UInt8;
  @:uproperty public var bSetNextState : Bool;
  
  /**
    Flag whether or not we should return to the previous state, only used when this state is an on-demand one
  **/
  @:uproperty public var bReturnToPreviousState : Bool;
  
  /**
    Duration of blending when blending to this state
  **/
  @:uproperty public var BlendTime : unreal.Float32;
  
  /**
    Whether or not this state is an additive state
  **/
  @:uproperty public var bAdditive : Bool;
  
  /**
    Flag whether or not this state is an on-demand state, this means that we kick off a unique animation when needed
  **/
  @:uproperty public var bOnDemand : Bool;
  
  /**
    Per state animation setup
  **/
  @:uproperty public var AnimationSetups : unreal.TArray<unreal.animationsharing.FAnimationSetup>;
  
  /**
    Enum value linked to this state
  **/
  @:uproperty public var State : unreal.UInt8;
  
}
