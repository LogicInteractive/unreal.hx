/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.concertsynccore;

/**
  The request passed from the client to the server to fetch or add a key/value pair
  from/in the data store. The end user should not use this structure directly, but use the
  IConcertClientDataStore::FetchOrAdd() API instead. The response type for this request is
  FConcertDataStore_Response.
  @see IConcertClientDataStore::FetchOrAdd() methods.
**/
@:umodule("ConcertSyncCore")
@:glueCppIncludes("Public/ConcertDataStoreMessages.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FConcertDataStore_FetchOrAddRequest extends unreal.concertsynccore.FConcertDataStore_Request {
  
  /**
    The property value to add if it doesn't already exist, in its serialized form.
    This implies the serialization is consistent across platforms and that no padding
    is serialized. When this is true, the serialized data is compact, binary comparable
    and the data store backend doesn't need to know the content format, it can only map
    a name and a blob and use memcmp() to compare and exchange a value.
  **/
  @:uproperty public var SerializedValue : unreal.concert.FConcertSessionSerializedPayload;
  
}
