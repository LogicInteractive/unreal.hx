/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.concertsynccore;

/**
  The request passed from the client to the server to compare and exchange a stored value.
  The end user should not use this structure directly, but use the IConcertClientDataStore::CompareExchange()
  API instead. The response type for this request is a FConcertDataStore_Response.
  @see IConcertClientDataStore::CompareExchange() methods.
**/
@:umodule("ConcertSyncCore")
@:glueCppIncludes("Public/ConcertDataStoreMessages.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FConcertDataStore_CompareExchangeRequest extends unreal.concertsynccore.FConcertDataStore_Request {
  
  /**
    The desired value to store. @see FConcertDataStore_FetchOrAdd request for more explanation about the format.
  **/
  @:uproperty public var Desired : unreal.concert.FConcertSessionSerializedPayload;
  
  /**
    The expected value if 'ExpectedVersion' is zero. The field is ignored if
    'ExpectedVersion' is not zero and should be left empty.
    @see FConcertDataStore_FetchOrAddRequest for more explanation about the format.
  **/
  @:uproperty public var Expected : unreal.concert.FConcertSessionSerializedPayload;
  
  /**
    The expected version of the value. If non-zero, the server uses this
    fields to identify the expected value and ignore the 'Expected' field.
    This is an optimization implemented in the client/server protocol. If the
    expected payload is large and correspond to the value currently cached
    in the client, the client will send the expected version rather than
    the expected value to save bandwidth. The server will compare version
    and if they match, will perform the exchange.
  **/
  @:uproperty public var ExpectedVersion : unreal.FakeUInt32;
  
}
