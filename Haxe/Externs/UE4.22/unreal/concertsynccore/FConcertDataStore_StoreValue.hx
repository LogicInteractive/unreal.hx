/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.concertsynccore;

/**
  A value and its meta-data as stored by a Concert data store and transported between a client and a server.
**/
@:umodule("ConcertSyncCore")
@:glueCppIncludes("Public/ConcertDataStoreMessages.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FConcertDataStore_StoreValue {
  
  /**
    Contains the value in its serialized and compact form. @see DeserializeUnchecked().
  **/
  @:uproperty public var SerializedValue : unreal.concert.FConcertSessionSerializedPayload;
  
  /**
    The value version number set by the server. Starting at 1 when a key/value pair
    is inserted, incremented by one every time it is exchanged. As an optimization
    in the implementation, the client may substitute, when possible, the expected
    value by its expected version during a CompareExchange operation if the value
    is large.
  **/
  @:uproperty public var Version : unreal.FakeUInt32;
  
  /**
    The data type name as returned by TConcertDataStoreType::GetFName().
  **/
  @:uproperty public var TypeName : unreal.FName;
  
}
