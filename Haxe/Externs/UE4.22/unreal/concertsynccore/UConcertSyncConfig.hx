/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.concertsynccore;

@:umodule("ConcertSyncCore")
@:glueCppIncludes("ConcertSyncSettings.h")
@:uextern @:uclass extern class UConcertSyncConfig extends unreal.UObject {
  
  /**
    Array of transient class properties that we should send transaction updates for even if usually filtered out.
  **/
  @:uproperty public var AllowedTransientProperties : unreal.TArray<unreal.FSoftObjectPath>;
  
  /**
    Array of additional Transaction class filter.
    Objects that matches those filters, will prevent the whole transaction from propagation.
    @note These filters takes precedence over the IncludeObjectClassFilters
  **/
  @:uproperty public var ExcludeTransactionClassFilters : unreal.TArray<unreal.concertsynccore.FTransactionClassFilter>;
  
  /**
    Array of Transaction class filter.
    Only objects that pass those filters will be included in transaction updates.
    @note If this is empty, then all class types will send transaction updates.
  **/
  @:uproperty public var IncludeObjectClassFilters : unreal.TArray<unreal.concertsynccore.FTransactionClassFilter>;
  
  /**
    Number of snapshot transactions (eg, moving an object or dragging a slider) that should be sent per-second to other clients.
  **/
  @:uproperty public var SnapshotTransactionsPerSecond : unreal.Float32;
  
  /**
    Should we show presence when in PIE?
  **/
  @:uproperty public var bShowPresenceInPIE : Bool;
  
  /**
    Should we ask before hot-reloading changed packages?
    If disabled we will clobber any local changes when reloading packages.
  **/
  @:uproperty public var bInteractiveHotReload : Bool;
  
}
