/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.vreditor;

/**
  VREditor default interactor
**/
@:umodule("VREditor")
@:glueCppIncludes("VREditorInteractor.h")
@:uextern @:uclass extern class UVREditorInteractor extends unreal.viewportinteraction.UViewportInteractor {
  
  /**
    Initialize default values
  **/
  @:ufunction(BlueprintNativeEvent) public function Init(InVRMode : unreal.vreditor.UVREditorMode) : Void;
  
  /**
    Sets up all components
  **/
  @:ufunction(BlueprintNativeEvent) public function SetupComponent(OwningActor : unreal.AActor) : Void;
  
  /**
    @return Returns the type of HMD we're dealing with
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetHMDDeviceType() : unreal.FName;
  
  /**
    Get the motioncontroller component of this interactor
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMotionControllerComponent() : unreal.headmounteddisplay.UMotionControllerComponent;
  
  /**
    Sets the EControllerHand for this motioncontroller
  **/
  @:ufunction(BlueprintCallable) @:final public function SetControllerHandSide(InControllerHandSide : unreal.Const<unreal.FName>) : Void;
  
  /**
    Returns the slide delta for pushing and pulling objects. Needs to be implemented by derived classes (e.g. touchpad for vive controller or scrollweel for mouse )
  **/
  @:ufunction(BlueprintNativeEvent) @:thisConst public function GetSlideDelta() : unreal.Float32;
  
  /**
    Set if we want to force to show the laser
  **/
  @:ufunction(BlueprintCallable) @:final public function SetForceShowLaser(bInForceShow : Bool) : Void;
  
  /**
    Check if the touchpad is currently touched
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsTouchingTrackpad() : Bool;
  
  /**
    Get the current position of the trackpad or analog stick
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTrackpadPosition() : unreal.FVector2D;
  
  /**
    Get the last position of the trackpad or analog stick
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastTrackpadPosition() : unreal.FVector2D;
  
  /**
    Getters and setters
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLaserStart() : unreal.Const<unreal.PRef<unreal.FVector>>;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLaserEnd() : unreal.Const<unreal.PRef<unreal.FVector>>;
  
  /**
    Next frame this will be used as color for the laser
  **/
  @:ufunction(BlueprintCallable) @:final public function SetForceLaserColor(InColor : unreal.Const<unreal.PRef<unreal.FLinearColor>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function GetTeleportActor() : unreal.vreditor.AVREditorTeleporter;
  
  /**
    Get the side of the controller
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetControllerSide() : unreal.inputcore.EControllerHand;
  
  /**
    Returns what controller type this is for asymmetric control schemes
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetControllerType() : unreal.vreditor.EControllerType;
  
  /**
    Set what controller type this is for asymmetric control schemes
  **/
  @:ufunction(BlueprintCallable) @:final public function SetControllerType(InControllerType : unreal.Const<unreal.vreditor.EControllerType>) : Void;
  
  /**
    Temporary set what controller type this is for asymmetric control schemes.
    You can't override the controller type when there's already an override.
    Remove the temporary controller type with EControllerType::Unknown
    @return true if the controller type was changed
  **/
  @:ufunction(BlueprintCallable) @:final public function TryOverrideControllerType(InControllerType : unreal.Const<unreal.vreditor.EControllerType>) : Bool;
  
  /**
    Gets if this interactor is hovering over UI
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsHoveringOverUI() : Bool;
  
  /**
    Gets if the interactor is clicking on any UI
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsClickingOnUI() : Bool;
  
  /**
    Gets the trigger value
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSelectAndMoveTriggerValue() : unreal.Float32;
  
  /**
    The mode that owns this interactor
  **/
  @:uproperty private var VRMode : unreal.vreditor.UVREditorMode;
  
  /**
    Right or left hand
  **/
  @:uproperty private var ControllerMotionSource : unreal.FName;
  
  /**
    Mesh for this hand
  **/
  @:uproperty private var HandMeshComponent : unreal.UStaticMeshComponent;
  
  /**
    Motion controller component which handles late-frame transform updates of all parented sub-components
  **/
  @:uproperty private var MotionControllerComponent : unreal.headmounteddisplay.UMotionControllerComponent;
  
}
