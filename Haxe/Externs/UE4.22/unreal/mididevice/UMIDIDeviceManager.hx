/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mididevice;

@:umodule("MIDIDevice")
@:glueCppIncludes("MIDIDeviceManager.h")
@:uextern @:uclass extern class UMIDIDeviceManager extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Enumerates all of the connected MIDI devices and reports back with the IDs and names of those devices.  This operation is a little expensive
    so only do it once at startup, or if you think that a new device may have been connected.
    
    @param       OutMIDIDevices  A list of available MIDI devices
  **/
  @:ufunction(BlueprintCallable) static public function FindMIDIDevices(OutMIDIDevices : unreal.PRef<unreal.TArray<unreal.mididevice.FFoundMIDIDevice>>) : Void;
  
  /**
    Enumerates all of the MIDI input and output devices and reports back useful infos such as IDs and names of those devices. This operation is a little expensive
    so only do it once at startup, or if you think that a new device may have been connected.
    
    @param       OutMIDIInputDevices             A list of available MIDI Input devices
    @param       OutMIDIOutputDevices    A list of available MIDI Output devices
  **/
  @:ufunction(BlueprintCallable) static public function FindAllMIDIDeviceInfo(OutMIDIInputDevices : unreal.PRef<unreal.TArray<unreal.mididevice.FMIDIDeviceInfo>>, OutMIDIOutputDevices : unreal.PRef<unreal.TArray<unreal.mididevice.FMIDIDeviceInfo>>) : Void;
  
  /**
    Retrieves the MIDI input device ID by name. Call "Find All MIDI Device Info" beforehand to enumerate the available input devices.
    
    @param       DeviceName              The Name of the MIDI device you want to talk to.
    @param       DeviceID                The Device ID of the MIDI device with that name.
  **/
  @:ufunction(BlueprintCallable) static public function GetMIDIInputDeviceIDByName(DeviceName : unreal.Const<unreal.FString>, DeviceID : unreal.Int32) : Void;
  
  /**
    Retrieves the default MIDI input device ID. Call "Find All MIDI Device Info" beforehand to enumerate the available input devices.
    
    @param       DeviceID                The Device ID of the MIDI input device with that name.
  **/
  @:ufunction(BlueprintCallable) static public function GetDefaultIMIDIInputDeviceID(DeviceID : unreal.Int32) : Void;
  
  /**
    Retrieves the MIDI output device ID by name. Call "Find All MIDI Device Info" beforehand to enumerate the available output devices.
    
    @param       DeviceName              The Name of the MIDI device you want to talk to.
    @param       DeviceID                The Device ID of the MIDI output device associated with that name.
  **/
  @:ufunction(BlueprintCallable) static public function GetMIDIOutputDeviceIDByName(DeviceName : unreal.Const<unreal.FString>, DeviceID : unreal.Int32) : Void;
  
  /**
    Retrieves the default MIDI output device ID. Call "Find All MIDI Device Info" beforehand to enumerate the available input devices.
    
    @param       DeviceID                The Device ID of the MIDI output device with that name.
  **/
  @:ufunction(BlueprintCallable) static public function GetDefaultIMIDIOutputDeviceID(DeviceID : unreal.Int32) : Void;
  
  /**
    Creates an instance of a MIDI device controller that can be used to interact with a connected MIDI device
    
    @param       DeviceID                The ID of the MIDI device you want to talk to.  Call "Find MIDI Devices" to enumerate the available devices.
    @param       MIDIBufferSize  How large the buffer size (in number of MIDI events) should be for incoming MIDI data.  Larger values can incur higher latency costs for incoming events, but don't set it too low or you'll miss events and your stuff will sound bad.
    
    @return      If everything goes okay, a valid MIDI device controller object will be returned.  If anything goes wrong, a null reference will be returned.
  **/
  @:ufunction(BlueprintCallable) static public function CreateMIDIDeviceController(DeviceID : unreal.Int32, MIDIBufferSize : unreal.Int32 = 1024) : unreal.mididevice.UMIDIDeviceController;
  
  /**
    Creates an instance of a MIDI device controller that can be used to interact with a connected MIDI device
    
    @param       DeviceID                The ID of the MIDI device you want to talk to.  Call "Find MIDI Devices" to enumerate the available devices.
    @param       MIDIBufferSize  How large the buffer size (in number of MIDI events) should be for incoming MIDI data.  Larger values can incur higher latency costs for incoming events, but don't set it too low or you'll miss events and your stuff will sound bad.
    
    @return      If everything goes okay, a valid MIDI device controller object will be returned.  If anything goes wrong, a null reference will be returned.
  **/
  @:ufunction(BlueprintCallable) static public function CreateMIDIDeviceInputController(DeviceID : unreal.Int32, MIDIBufferSize : unreal.Int32 = 1024) : unreal.mididevice.UMIDIDeviceInputController;
  
  /**
    Creates an instance of a MIDI output device controller that can be used to interact with a connected MIDI device
    
    @param       DeviceID                The ID of the MIDI device you want to talk to.  Call "Find MIDI Devices" to enumerate the available devices.
    @param       MIDIBufferSize  How large the buffer size (in number of MIDI events) should be for incoming MIDI data.  Larger values can incur higher latency costs for incoming events, but don't set it too low or you'll miss events and your stuff will sound bad.
    
    @return      If everything goes okay, a valid MIDI device controller object will be returned.  If anything goes wrong, a null reference will be returned.
  **/
  @:ufunction(BlueprintCallable) static public function CreateMIDIDeviceOutputController(DeviceID : unreal.Int32) : unreal.mididevice.UMIDIDeviceOutputController;
  
}
