/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mididevice;

@:umodule("MIDIDevice")
@:glueCppIncludes("Public/MIDIDeviceController.h")
@:uname("EMIDIEventType")
@:class @:uextern @:uenum extern enum EMIDIEventType {
  
  /**
    Unrecognized MIDI event type.  You can look at Raw Event Type to see what it is.
  **/
  Unknown;
  
  /**
    Note is released.  Velocity will contain the key pressure for devices that support that.
  **/
  NoteOff;
  
  /**
    Note is pressed down.  Velocity will contain the key pressure for devices that support that.
  **/
  NoteOn;
  
  /**
    Polyphonic key pressure.  This is sent after a key 'bottoms out' for devices that support it.  Velocity will contain the pressure value.
  **/
  NoteAfterTouch;
  
  /**
    This is sent for things like pedals when their controller state changes.  Velocity will contain the new value for the controller.  This event also is used for 'Channel Mode Changes' (Channels between 120-127), which encompass a variety of different features.  For those events, you'll need to interpret the values yourself.
  **/
  ControlChange;
  
  /**
    This is sent for some devices that support changing patches.  Velocity is usually ignored
  **/
  ProgramChange;
  
  /**
    Channel pressure value.  This is sent after a channel button 'bottoms out' for devices that support it.  Velocity will contain the pressure value.
  **/
  ChannelAfterTouch;
  
  /**
    For devices with levers or wheels, this indicates a change of state.  The data is interpreted a bit differently here, where the new value is actually 14-bits that contained within both the Control ID and Velocity // @todo midi: Ideally set velocity to correct values in this case so Blueprints don't have to
  **/
  PitchBend;
  
}
