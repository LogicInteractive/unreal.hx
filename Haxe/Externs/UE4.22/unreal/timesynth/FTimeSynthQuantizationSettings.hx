/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.timesynth;

/**
  Struct defining the time synth global quantization settings
**/
@:umodule("TimeSynth")
@:glueCppIncludes("Classes/TimeSynthComponent.h")
@:uextern @:ustruct extern class FTimeSynthQuantizationSettings {
  
  /**
    This is the rate at which FOnTimeSynthEvent callbacks are made.
  **/
  @:uproperty public var GlobalQuantization : unreal.timesynth.ETimeSynthEventQuantization;
  
  /**
    The amount of latency to add to time synth events to allow BP delegates to perform logic on game thread
  **/
  @:uproperty public var EventDelaySeconds : unreal.Float32;
  
  /**
    Amount of beats in a whole note. Defines number of beats in a measure.
  **/
  @:uproperty public var BeatDivision : unreal.timesynth.ETimeSynthBeatDivision;
  
  /**
    Defines numerator when determining beat time in seconds
  **/
  @:uproperty public var BeatsPerBar : unreal.Int32;
  
  /**
    The beats per minute of the pulse. Musical convention gives this as BPM for "quarter notes" (BeatDivision = 4).
  **/
  @:uproperty public var BeatsPerMinute : unreal.Float32;
  
}
