/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;

@:umodule("LeapMotion")
@:glueCppIncludes("Public/LeapMotionData.h")
@:uextern @:ustruct extern class FLeapOptions {
  
  /**
    Fixed offset in leap space for all tracking data. Useful for setting Leap->HMD real world offset
  **/
  @:uproperty public var HMDRotationOffset : unreal.FRotator;
  
  /**
    Fixed offset in leap space for all tracking data. Useful for setting Leap->HMD real world offset
  **/
  @:uproperty public var HMDPositionOffset : unreal.FVector;
  
  /**
    Number of frames we should predict forward (positive) or back (negative) from right now for fingers
  **/
  @:uproperty public var FingerInterpFactor : unreal.Float32;
  
  /**
    Number of frames we should predict forward (positive) or back (negative) from right now for hands
  **/
  @:uproperty public var HandInterpFactor : unreal.Float32;
  
  /**
    Linear factor, useful for inverting timewarp effects for certain platforms (e.g. Oculus)
  **/
  @:uproperty public var TimewarpFactor : unreal.Float32;
  
  /**
    Timewarp offset sampling in microseconds. The higher, the further back in time.
  **/
  @:uproperty public var TimewarpOffset : unreal.Float32;
  
  /**
    Should all leap data be transported to HMD space?
  **/
  @:uproperty public var bTransformOriginToHMD : Bool;
  
  /**
    Whether leap should use frame interpolation for smooth tracking
  **/
  @:uproperty public var bUseInterpolation : Bool;
  
  /**
    Should leap use Temporal warping to align HMD rotation with leap samples
  **/
  @:uproperty public var bUseTimeWarp : Bool;
  
  /**
    Verbosity of additional log updates from the leap service
  **/
  @:uproperty public var LeapServiceLogLevel : unreal.leapmotion.ELeapServiceLogLevel;
  
  /**
    Set your tracking fidelity from low latency to smooth. If not set to custom, some of the low level settings may be overwritten
  **/
  @:uproperty public var TrackingFidelity : unreal.leapmotion.ELeapTrackingFidelity;
  
  /**
    Optimize for desktop facing upward or VR facing outward?
  **/
  @:uproperty public var Mode : unreal.leapmotion.ELeapMode;
  
}
