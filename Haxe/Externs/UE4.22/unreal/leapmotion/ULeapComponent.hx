/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;

@:umodule("LeapMotion")
@:glueCppIncludes("LeapComponent.h")
@:uextern @:uclass extern class ULeapComponent extends unreal.UActorComponent {
  
  /**
    Tracking mode optimization
  **/
  @:uproperty public var TrackingMode : unreal.leapmotion.ELeapMode;
  
  /**
    Event called if leap service connection gets lost. Track won't work if this event gets called.
  **/
  @:uproperty public var OnLeapServiceDisconnected : unreal.leapmotion.FLeapEventSignature;
  
  /**
    Event called when the leap service connects. Will likely be called before game begin play so some component won't receive this call.
  **/
  @:uproperty public var OnLeapServiceConnected : unreal.leapmotion.FLeapEventSignature;
  
  /**
    Event called when a device image is ready. Requires setting image policy first
  **/
  @:uproperty public var OnImageEvent : unreal.leapmotion.FLeapImageEventSignature;
  
  /**
    Event called when the right hand begins tracking
  **/
  @:uproperty public var OnRightHandVisibilityChanged : unreal.leapmotion.FLeapVisibilityBoolSignature;
  
  /**
    Event called when the left hand tracking changes
  **/
  @:uproperty public var OnLeftHandVisibilityChanged : unreal.leapmotion.FLeapVisibilityBoolSignature;
  
  /**
    Event called when a leap hand exits the field of view and stops tracking
  **/
  @:uproperty public var OnHandEndTracking : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when a leap hand enters the field of view and begins tracking
  **/
  @:uproperty public var OnHandBeginTracking : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when a leap hand unpinch gesture is detected
  **/
  @:uproperty public var OnHandUnpinched : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when a leap hand pinch gesture is detected
  **/
  @:uproperty public var OnHandPinched : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when a leap hand release gesture is detected
  **/
  @:uproperty public var OnHandReleased : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when a leap hand grab gesture is detected
  **/
  @:uproperty public var OnHandGrabbed : unreal.leapmotion.FLeapHandSignature;
  
  /**
    Event called when new tracking data is available, typically every game tick.
  **/
  @:uproperty public var OnLeapTrackingData : unreal.leapmotion.FLeapFrameSignature;
  
  /**
    Called when a device disconnects from the leap service
  **/
  @:uproperty public var OnLeapDeviceDetatched : unreal.leapmotion.FLeapDeviceSignature;
  
  /**
    Called when a device connects to the leap service, this may happen before the game starts and you may not get the call
  **/
  @:uproperty public var OnLeapDeviceAttached : unreal.leapmotion.FLeapDeviceSignature;
  
  /**
    Utility function to check if a hand is visible and tracked at this moment
  **/
  @:ufunction(BlueprintCallable) @:final public function AreHandsVisible(LeftIsVisible : Bool, RightIsVisible : Bool) : Void;
  
  /**
    Polling function to get latest data
  **/
  @:ufunction(BlueprintCallable) @:final public function GetLatestFrameData(OutData : unreal.PRef<unreal.leapmotion.FLeapFrameData>) : Void;
  
}
