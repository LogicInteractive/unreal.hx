/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.applearkitfacesupport;

/**
  This component is updated by the ARSystem with face data on devices that have support for it
**/
@:umodule("AppleARKitFaceSupport")
@:glueCppIncludes("AppleARKitFaceMeshComponent.h")
@:uextern @:uclass extern class UAppleARKitFaceMeshComponent extends unreal.proceduralmeshcomponent.UProceduralMeshComponent {
  
  /**
    Create the initial face mesh from raw mesh data
    
    @param  Vertices                        Vertex buffer of all vertex positions to use for this mesh section.
    @param  Triangles                       Index buffer indicating which vertices make up each triangle. Length must be a multiple of 3.
    @param  UV0                                     Optional array of texture co-ordinates for each vertex. If supplied, must be same length as Vertices array.
  **/
  @:ufunction(BlueprintCallable) @:final public function CreateMesh(Vertices : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, Triangles : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, UV0 : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector2D>>>) : Void;
  
  /**
    Sets the amount for a given blend shape
    
    @param  BlendShape                      The blend shape to modify
    @param  Amount                          The amount of the blend shape to apply (0..1)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetBlendShapeAmount(BlendShape : unreal.augmentedreality.EARFaceBlendShape, Amount : unreal.Float32) : Void;
  
  /**
    Returns the value of the specified blend shape
    
    @param BlendShape                    The blend shape to query
    
    @return the current amount the blend shape should be applied
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFaceBlendShapeAmount(BlendShape : unreal.augmentedreality.EARFaceBlendShape) : unreal.Float32;
  
  /**
    Create/replace the face mesh from the current set of blend shapes if the device supports it
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateMeshFromBlendShapes() : Void;
  
  /**
    Updates the face mesh vertices. The topology and UVs do not change post creation so only vertices are updated
    
    @param  Vertices                        Vertex buffer of all vertex positions to use for this mesh section.
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateMesh(Vertices : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>) : Void;
  
  /**
    If auto bind is true, then this component will update itself from the local face tracking data each tick. If auto bind is off, ticking is disabled
    
    @param       bAutoBind                       true to enable, false to disable
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAutoBind(bAutoBind : Bool) : Void;
  
  /**
    Returns the frame number that was last used to update this component
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastUpdateFrameNumber() : unreal.Int32;
  
  /**
    Returns the frame timestamp that was last used to update this component
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastUpdateTimestamp() : unreal.Float32;
  
  /**
    Starts LiveLink publishing of this face component's data so that it can be used by the animation system
  **/
  @:ufunction(BlueprintCallable) @:final public function PublishViaLiveLink(SubjectName : unreal.FName) : Void;
  
  /**
    Get the transform that the AR camera has detected
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTransform() : unreal.FTransform;
  
  /**
    The set of changed curves to replicate to the other clients
  **/
  @:uproperty public var RemoteCurves : unreal.TArray<unreal.applearkitfacesupport.FNetQuantizeFaceCurve>;
  
  /**
    Used to identify this component's face ar data uniquely as part of the LiveLink animation pipeline
  **/
  @:uproperty public var LiveLinkSubjectName : unreal.FName;
  
  /**
    Used when rendering the face mesh (mostly debug reasons)
  **/
  @:uproperty public var FaceMaterial : unreal.UMaterialInterface;
  
  /**
    If true, the face mesh will be rotated to face out of the screen (-X) rather than into the screen (+X) and corresponding axises to match
  **/
  @:uproperty public var bFlipTrackedRotation : Bool;
  
  /**
    Determines how the transform from tracking data and the component's transform are mixed together
  **/
  @:uproperty public var TransformSetting : unreal.applearkitfacesupport.EARFaceComponentTransformMixing;
  
  /**
    If true, the mesh data will come from the local ARKit face mesh data. The face mesh will update every tick and will handle loss of face tracking
  **/
  @:uproperty public var bAutoBindToLocalFaceMesh : Bool;
  
  /**
    Indicates whether collision should be created for this face mesh. This adds significant cost, so only use if you need to trace against the face mesh.
  **/
  @:uproperty public var bWantsCollision : Bool;
  
  /**
    Indicates whether the face mesh data should be built for rendering or not
  **/
  @:uproperty public var bWantsMeshUpdates : Bool;
  
}
