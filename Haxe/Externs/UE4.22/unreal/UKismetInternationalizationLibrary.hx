/**
 *
 * WARNING! This file was autogenerated by:
 *  _   _ _   _ __   __
 * | | | | | | |\ \ / /
 * | | | | |_| | \ V /
 * | | | |  _  | /   \
 * | |_| | | | |/ /^\ \
 *  \___/\_| |_/\/   \/
 *
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Kismet/KismetInternationalizationLibrary.h")
@:uextern @:uclass extern class UKismetInternationalizationLibrary extends unreal.UBlueprintFunctionLibrary {

  /**
    Set the current culture.
    @note This function is a sledgehammer, and will set both the language and locale, as well as clear out any asset group cultures that may be set.
    @param Culture The culture to set, as an IETF language tag (eg, "zh-Hans-CN").
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
    @return True if the culture was set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentCulture(Culture : unreal.FString, SaveToConfig : Bool = false) : Bool;

  /**
    Get the current culture as an IETF language tag:
     - A two-letter ISO 639-1 language code (eg, "zh").
     - An optional four-letter ISO 15924 script code (eg, "Hans").
     - An optional two-letter ISO 3166-1 country code (eg, "CN").
    @note This function exists for legacy API parity with SetCurrentCulture and is equivalent to GetCurrentLanguage.
    @return The culture as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentCulture() : unreal.FString;

  /**
    Set *only* the current language (for localization).
    @note Unless you're doing something advanced, you likely want SetCurrentLanguageAndLocale or SetCurrentCulture instead.
    @param Culture The language to set, as an IETF language tag (eg, "zh-Hans-CN").
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
    @return True if the language was set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentLanguage(Culture : unreal.FString, SaveToConfig : Bool = false) : Bool;

  /**
    Get the current language (for localization) as an IETF language tag:
     - A two-letter ISO 639-1 language code (eg, "zh").
     - An optional four-letter ISO 15924 script code (eg, "Hans").
     - An optional two-letter ISO 3166-1 country code (eg, "CN").
    @return The language as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentLanguage() : unreal.FString;

  /**
    Set *only* the current locale (for internationalization).
    @note Unless you're doing something advanced, you likely want SetCurrentLanguageAndLocale or SetCurrentCulture instead.
    @param Culture The locale to set, as an IETF language tag (eg, "zh-Hans-CN").
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
    @return True if the locale was set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentLocale(Culture : unreal.FString, SaveToConfig : Bool = false) : Bool;

  /**
    Get the current locale (for internationalization) as an IETF language tag:
     - A two-letter ISO 639-1 language code (eg, "zh").
     - An optional four-letter ISO 15924 script code (eg, "Hans").
     - An optional two-letter ISO 3166-1 country code (eg, "CN").
    @return The locale as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentLocale() : unreal.FString;

  /**
    Set the current language (for localization) and locale (for internationalization).
    @param Culture The language and locale to set, as an IETF language tag (eg, "zh-Hans-CN").
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
    @return True if the language and locale were set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentLanguageAndLocale(Culture : unreal.FString, SaveToConfig : Bool = false) : Bool;

  /**
    Set the given asset group category culture from an IETF language tag (eg, "zh-Hans-CN").
    @param AssetGroup The asset group to set the culture for.
    @param Culture The culture to set, as an IETF language tag (eg, "zh-Hans-CN").
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
    @return True if the culture was set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentAssetGroupCulture(AssetGroup : unreal.Const<unreal.FName>, Culture : unreal.FString, SaveToConfig : Bool = false) : Bool;

  /**
    Get the given asset group category culture.
    @note Returns the current language if the group category doesn't have a culture override.
    @param AssetGroup The asset group to get the culture for.
    @return The culture as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentAssetGroupCulture(AssetGroup : unreal.Const<unreal.FName>) : unreal.FString;

  /**
    Clear the given asset group category culture.
    @param AssetGroup The asset group to clear the culture for.
    @param SaveToConfig If true, save the new setting to the users' "GameUserSettings" config so that it persists after a reload.
  **/
  @:ufunction(BlueprintCallable) static public function ClearCurrentAssetGroupCulture(AssetGroup : unreal.Const<unreal.FName>, SaveToConfig : Bool = false) : Void;

  /**
    Get the native culture for the given localization category.
    @param Category The localization category to query.
    @return The culture as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetNativeCulture(TextCategory : unreal.Const<unreal.ELocalizedTextSourceCategory>) : unreal.FString;

  /**
    Get the list of cultures that have localization data available for them.
    @param IncludeGame Check for localized game resources.
    @param IncludeEngine Check for localized engine resources.
    @param IncludeEditor Check for localized editor resources.
    @param IncludeAdditional Check for localized additional (eg, plugin) resources.
    @return The list of cultures as IETF language tags (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetLocalizedCultures(IncludeGame : Bool = true, IncludeEngine : Bool = false, IncludeEditor : Bool = false, IncludeAdditional : Bool = false) : unreal.TArray<unreal.FString>;

  /**
    Given a list of available cultures, try and find the most suitable culture from the list based on culture prioritization.
      eg) If your list was [en, fr, de] and the given culture was "en-US", this function would return "en".
      eg) If your list was [zh, ar, pl] and the given culture was "en-US", this function would return the fallback culture.
    @param AvailableCultures List of available cultures to filter against (see GetLocalizedCultures).
    @param CultureToMatch Culture to try and match (see GetCurrentLanguage).
    @param FallbackCulture The culture to return if there is no suitable match in the list (typically your native culture, see GetNativeCulture).
    @return The culture as an IETF language tag (eg, "zh-Hans-CN").
  **/
  @:ufunction(BlueprintCallable) static public function GetSuitableCulture(AvailableCultures : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, CultureToMatch : unreal.FString, @:opt("en") ?FallbackCulture : unreal.FString ) : unreal.FString;

  /**
    Get the display name of the given culture.
    @param Culture The culture to get the display name of, as an IETF language tag (eg, "zh-Hans-CN")
    @param Localized True to get the localized display name (the name of the culture in its own language), or False to get the display name in the current language.
    @return The display name of the culture, or the given culture code on failure.
  **/
  @:ufunction(BlueprintCallable) static public function GetCultureDisplayName(Culture : unreal.FString, Localized : Bool = true) : unreal.FString;

}
