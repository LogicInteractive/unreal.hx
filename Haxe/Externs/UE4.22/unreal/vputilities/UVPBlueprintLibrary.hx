/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.vputilities;

/**
  Functionality added to prototype the VR scouting tools
**/
@:umodule("VPUtilities")
@:glueCppIncludes("VPBlueprintLibrary.h")
@:uextern @:uclass extern class UVPBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Spawn a virtual production tickable actor
  **/
  @:ufunction(BlueprintCallable) static public function SpawnVPTickableActor(ContextObject : unreal.UObject, ActorClass : unreal.Const<unreal.TSubclassOf<unreal.vputilities.AVPViewportTickableActorBase>>, Location : unreal.Const<unreal.FVector>, Rotation : unreal.Const<unreal.FRotator>) : unreal.vputilities.AVPViewportTickableActorBase;
  
  /**
    Spawn a virtual production bookmark
  **/
  @:ufunction(BlueprintCallable) static public function SpawnBookmarkAtCurrentLevelEditorPosition(ActorClass : unreal.Const<unreal.TSubclassOf<unreal.AActor>>, CreationContext : unreal.Const<unreal.vpbookmark.FVPBookmarkCreationContext>, Offset : unreal.Const<unreal.FVector>, bFlattenRotation : Bool = true) : unreal.AActor;
  
  /**
    Jump to a virtual production bookmark
  **/
  @:ufunction(BlueprintCallable) static public function JumpToBookmarkInLevelEditor(Bookmark : unreal.Const<unreal.vpbookmark.UVPBookmark>) : Bool;
  
  /**
    The machine role(s) in a virtual production context.
  **/
  @:ufunction(BlueprintCallable) static public function GetVirtualProductionRole() : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Get the location of the 2D viewport camera
  **/
  @:ufunction(BlueprintCallable) static public function GetEditorViewportTransform() : unreal.FTransform;
  
  /**
    Get the location of the VR HMD
  **/
  @:ufunction(BlueprintCallable) static public function GetEditorVRHeadTransform() : unreal.FTransform;
  
  /**
    Get the VR room transform (the playable area shown as a wireframe cage on Vive and Rift
  **/
  @:ufunction(BlueprintCallable) static public function GetEditorVRRoomTransform() : unreal.FTransform;
  
  /**
    Set the VR flight speed cvar
  **/
  @:ufunction(BlueprintCallable) static public function SetMaxFlightSpeed(Speed : unreal.Float32) : Void;
  
  /**
    Set the VR grab speed cvar
  **/
  @:ufunction(BlueprintCallable) static public function SetGrabSpeed(Speed : unreal.Float32) : Void;
  
  /**
    Get whether the user is in editor VR mode
  **/
  @:ufunction(BlueprintCallable) static public function IsVREditorModeActive() : Bool;
  
  /**
    Get the hitlocation of the interaction controller's laser pointer, in world space
  **/
  @:ufunction(BlueprintCallable) static public function GetVREditorLaserHoverLocation() : unreal.FVector;
  
  /**
    Trigger an UnrealEd Undo
  **/
  @:ufunction(BlueprintCallable) static public function EditorUndo() : Bool;
  
  /**
    Trigger an UnrealEd Redo
  **/
  @:ufunction(BlueprintCallable) static public function EditorRedo() : Bool;
  
  /**
    Trigger an UnrealEd Delete
  **/
  @:ufunction(BlueprintCallable) static public function EditorDeleteSelectedObjects() : Bool;
  
}
