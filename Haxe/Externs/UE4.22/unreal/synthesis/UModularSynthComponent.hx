/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.synthesis;

/**
  UModularSynthComponent
  Implementation of a USynthComponent.
**/
@:umodule("Synthesis")
@:glueCppIncludes("SynthComponents/EpicSynth1Component.h")
@:uextern @:uclass extern class UModularSynthComponent extends unreal.audiomixer.USynthComponent {
  
  /**
    The voice count to use for the synthesizer. Cannot be changed
  **/
  @:uproperty public var VoiceCount : unreal.Int32;
  
  /**
    Play a new note. Optionally pass in a duration to automatically turn off the note.
  **/
  @:ufunction(BlueprintCallable) @:final public function NoteOn(Note : unreal.Float32, Velocity : unreal.Int32, Duration : unreal.Float32 = -1.000000) : Void;
  
  /**
    Stop the note (will only do anything if a voice is playing with that note)
  **/
  @:ufunction(BlueprintCallable) @:final public function NoteOff(Note : unreal.Float32, bAllNotesOff : Bool = false, bKillAllNotes : Bool = false) : Void;
  
  /**
    Sets whether or not to use polyphony for the synthesizer.
    @param bEnablePolyphony Whether or not to enable polyphony for the synth.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnablePolyphony(bEnablePolyphony : Bool) : Void;
  
  /**
    Set the oscillator gain.
    @param OscIndex Which oscillator to set the type for.
    @param OscGain The oscillator gain.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscGain(OscIndex : unreal.Int32, OscGain : unreal.Float32) : Void;
  
  /**
    Set the oscillator gain modulation.
    @param OscIndex Which oscillator to set the type for.
    @param OscGainMod The oscillator gain modulation to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscGainMod(OscIndex : unreal.Int32, OscGainMod : unreal.Float32) : Void;
  
  /**
    Set the oscillator frequency modulation
    @param OscIndex Which oscillator to set the type for.
    @param OscFreqMod The oscillator frequency modulation to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscFrequencyMod(OscIndex : unreal.Int32, OscFreqMod : unreal.Float32) : Void;
  
  /**
    Set the oscillator type.
    @param OscIndex Which oscillator to set the type for.
    @param OscType The oscillator type to set.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscType(OscIndex : unreal.Int32, OscType : unreal.synthesis.ESynth1OscType) : Void;
  
  /**
    Sets the oscillator octaves
    @param OscIndex Which oscillator to set the type for.
    @param Octave Which octave to set the oscillator to (relative to base frequency/pitch).
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscOctave(OscIndex : unreal.Int32, Octave : unreal.Float32) : Void;
  
  /**
    Sets the oscillator semitones.
    @param OscIndex Which oscillator to set the type for.
    @param Semitones The amount of semitones to set the oscillator to (relative to base frequency/pitch).
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscSemitones(OscIndex : unreal.Int32, Semitones : unreal.Float32) : Void;
  
  /**
    Sets the oscillator cents.
    @param OscIndex Which oscillator to set the type for.
    @param Cents The amount of cents to set the oscillator to (relative to base frequency/pitch)..
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscCents(OscIndex : unreal.Int32, Cents : unreal.Float32) : Void;
  
  /**
    Sets the synth pitch bend amount.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPitchBend(PitchBend : unreal.Float32) : Void;
  
  /**
    Sets the synth portamento [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPortamento(Portamento : unreal.Float32) : Void;
  
  /**
    Sets the square wave pulsewidth [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscPulsewidth(OscIndex : unreal.Int32, Pulsewidth : unreal.Float32) : Void;
  
  /**
    Sets whether or not the synth is in unison mode (i.e. no spread)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableUnison(EnableUnison : Bool) : Void;
  
  /**
    Set whether or not to slave the phase of osc2 to osc1
  **/
  @:ufunction(BlueprintCallable) @:final public function SetOscSync(bIsSynced : Bool) : Void;
  
  /**
    Sets the pan of the synth [-1.0, 1.0].
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPan(Pan : unreal.Float32) : Void;
  
  /**
    Sets the amount of spread of the oscillators. [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSpread(Spread : unreal.Float32) : Void;
  
  /**
    Sets the LFO frequency in hz
    @param LFOIndex Which LFO to set the frequency for.
    @param FrequencyHz The LFO frequency to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOFrequency(LFOIndex : unreal.Int32, FrequencyHz : unreal.Float32) : Void;
  
  /**
    Sets the LFO frequency modulation in hz
    @param LFOIndex Which LFO to set the frequency for.
    @param FrequencyModHz The LFO frequency to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOFrequencyMod(LFOIndex : unreal.Int32, FrequencyModHz : unreal.Float32) : Void;
  
  /**
    Sets the LFO gain factor
    @param LFOIndex Which LFO to set the frequency for.
    @param Gain The gain factor to use for the LFO.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOGain(LFOIndex : unreal.Int32, Gain : unreal.Float32) : Void;
  
  /**
    Sets the LFO gain mod factor (external modulation)
    @param LFOIndex Which LFO to set the frequency for.
    @param Gain The gain factor to use for the LFO.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOGainMod(LFOIndex : unreal.Int32, GainMod : unreal.Float32) : Void;
  
  /**
    Sets the LFO type
    @param LFOIndex Which LFO to set the frequency for.
    @param LFOType The LFO type to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOType(LFOIndex : unreal.Int32, LFOType : unreal.synthesis.ESynthLFOType) : Void;
  
  /**
    Sets the LFO type
    @param LFOIndex Which LFO to set the frequency for.
    @param LFOMode The LFO mode to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOMode(LFOIndex : unreal.Int32, LFOMode : unreal.synthesis.ESynthLFOMode) : Void;
  
  /**
    Sets the LFO patch type. LFO patch determines what parameter is modulated by the LFO.
    @param LFOIndex Which LFO to set the frequency for.
    @param LFOPatchType The LFO patch type to use.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLFOPatch(LFOIndex : unreal.Int32, LFOPatchType : unreal.synthesis.ESynthLFOPatchType) : Void;
  
  /**
    Sets the synth gain in decibels.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetGainDb(GainDb : unreal.Float32) : Void;
  
  /**
    Sets the envelope attack time in msec.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAttackTime(AttackTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets the envelope decay time in msec.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDecayTime(DecayTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets the envelope sustain gain value.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSustainGain(SustainGain : unreal.Float32) : Void;
  
  /**
    Sets the envelope release time in msec.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetReleaseTime(ReleaseTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets whether or not to modulate a param based on the envelope. Uses bias envelope output (offset from sustain gain).
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvPatch(InPatchType : unreal.Const<unreal.synthesis.ESynthModEnvPatch>) : Void;
  
  /**
    Sets whether or not to modulate a param based on the envelope. Uses bias envelope output (offset from sustain gain).
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvBiasPatch(InPatchType : unreal.Const<unreal.synthesis.ESynthModEnvBiasPatch>) : Void;
  
  /**
    Sets whether or not to invert the envelope modulator.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvInvert(bInvert : Bool) : Void;
  
  /**
    Sets whether or not to invert the bias output of the envelope modulator.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvBiasInvert(bInvert : Bool) : Void;
  
  /**
    Sets the envelope modulator depth (amount to apply the output modulation)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvDepth(Depth : unreal.Float32) : Void;
  
  /**
    Sets the envelope modulator attack time in msec
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvAttackTime(AttackTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets the envelope modulator attack time in msec
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvDecayTime(DecayTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets the envelope modulator sustain gain
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvSustainGain(SustainGain : unreal.Float32) : Void;
  
  /**
    Sets the envelope modulator release
  **/
  @:ufunction(BlueprintCallable) @:final public function SetModEnvReleaseTime(Release : unreal.Float32) : Void;
  
  /**
    Sets whether or not to use legato for the synthesizer.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableLegato(LegatoEnabled : Bool) : Void;
  
  /**
    Sets whether or not to retrigger envelope per note on.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableRetrigger(RetriggerEnabled : Bool) : Void;
  
  /**
    Sets the filter cutoff frequency in hz.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterFrequency(FilterFrequencyHz : unreal.Float32) : Void;
  
  /**
    Sets the filter cutoff frequency in hz.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterFrequencyMod(FilterFrequencyHz : unreal.Float32) : Void;
  
  /**
    Sets the filter Q (resonance)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterQ(FilterQ : unreal.Float32) : Void;
  
  /**
    Sets a modulated filter Q (resonance)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterQMod(FilterQ : unreal.Float32) : Void;
  
  /**
    Sets the filter type.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterType(FilterType : unreal.synthesis.ESynthFilterType) : Void;
  
  /**
    Sets the filter algorithm.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterAlgorithm(FilterAlgorithm : unreal.synthesis.ESynthFilterAlgorithm) : Void;
  
  /**
    Sets whether not stereo delay is enabled.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayIsEnabled(StereoDelayEnabled : Bool) : Void;
  
  /**
    Sets whether not stereo delay is enabled.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayMode(StereoDelayMode : unreal.synthesis.ESynthStereoDelayMode) : Void;
  
  /**
    Sets the amount of stereo delay time in msec.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayTime(DelayTimeMsec : unreal.Float32) : Void;
  
  /**
    Sets the amount of stereo delay feedback [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayFeedback(DelayFeedback : unreal.Float32) : Void;
  
  /**
    Sets the amount of stereo delay wetlevel [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayWetlevel(DelayWetlevel : unreal.Float32) : Void;
  
  /**
    Sets the amount of stereo delay ratio between left and right delay lines [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStereoDelayRatio(DelayRatio : unreal.Float32) : Void;
  
  /**
    Sets whether or not chorus is enabled.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetChorusEnabled(EnableChorus : Bool) : Void;
  
  /**
    Sets the chorus depth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetChorusDepth(Depth : unreal.Float32) : Void;
  
  /**
    Sets the chorus feedback
  **/
  @:ufunction(BlueprintCallable) @:final public function SetChorusFeedback(Feedback : unreal.Float32) : Void;
  
  /**
    Sets the chorus frequency
  **/
  @:ufunction(BlueprintCallable) @:final public function SetChorusFrequency(Frequency : unreal.Float32) : Void;
  
  /**
    Sets the preset struct for the synth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSynthPreset(SynthPreset : unreal.Const<unreal.PRef<unreal.synthesis.FModularSynthPreset>>) : Void;
  
  /**
    Creates a new modular synth patch between a modulation source and a set of modulation destinations
  **/
  @:ufunction(BlueprintCallable) @:final public function CreatePatch(PatchSource : unreal.Const<unreal.synthesis.ESynth1PatchSource>, PatchCables : unreal.Const<unreal.PRef<unreal.TArray<unreal.synthesis.FSynth1PatchCable>>>, bEnableByDefault : Bool) : unreal.synthesis.FPatchId;
  @:ufunction(BlueprintCallable) @:final public function SetEnablePatch(PatchId : unreal.Const<unreal.synthesis.FPatchId>, bIsEnabled : Bool) : Bool;
  
}
