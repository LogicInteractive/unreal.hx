/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.synthesis;

@:umodule("Synthesis")
@:glueCppIncludes("Classes/SynthComponents/EpicSynth1Component.h")
@:uextern @:ustruct extern class FModularSynthPreset extends unreal.FTableRowBase {
  
  /**
    The modular synth patch chords to use for the synth. Allows routing the LFO1/LFO2 and Modulation Envelope to any patchable destination.
  **/
  @:uproperty public var Patches : unreal.TArray<unreal.synthesis.FEpicSynth1Patch>;
  
  /**
    The chorus LFO frequency [0.0, 20.0]
  **/
  @:uproperty public var ChorusFrequency : unreal.Float32;
  
  /**
    The amount of feedback in the chorus effect [0.0, 1.0]
  **/
  @:uproperty public var ChorusFeedback : unreal.Float32;
  
  /**
    The depth of the chorus effect [0.0, 1.0]
  **/
  @:uproperty public var ChorusDepth : unreal.Float32;
  
  /**
    Whether or not the chorus effect is enabled
  **/
  @:uproperty public var bChorusEnabled : Bool;
  
  /**
    The ratio between left and right stereo delay lines (wider value is more separation) [0.0, 1.0]
  **/
  @:uproperty public var StereoDelayRatio : unreal.Float32;
  
  /**
    The output wet level to use for the stereo delay time [0.0, 1.0]
  **/
  @:uproperty public var StereoDelayWetlevel : unreal.Float32;
  
  /**
    The amount of feedback in the stereo delay line [0.0, 1.0]
  **/
  @:uproperty public var StereoDelayFeedback : unreal.Float32;
  
  /**
    The stereo delay time (in ms) [0.0, 2000.0]
  **/
  @:uproperty public var StereoDelayTime : unreal.Float32;
  
  /**
    The stereo delay mode of the synth
  **/
  @:uproperty public var StereoDelayMode : unreal.synthesis.ESynthStereoDelayMode;
  
  /**
    Whether or not stereo delay is enabled on the synth
  **/
  @:uproperty public var bStereoDelayEnabled : Bool;
  
  /**
    The output filter circuit/algorithm type (one-pole ladder, ladder, state-variable)
  **/
  @:uproperty public var FilterAlgorithm : unreal.synthesis.ESynthFilterAlgorithm;
  
  /**
    The output filter type (lowpass, highpass, bandpass, bandstop)
  **/
  @:uproperty public var FilterType : unreal.synthesis.ESynthFilterType;
  
  /**
    The output filter resonance (Q) [0.5, 10]
  **/
  @:uproperty public var FilterQ : unreal.Float32;
  
  /**
    The output filter cutoff frequency (hz) [0.0, 20000.0]
  **/
  @:uproperty public var FilterFrequency : unreal.Float32;
  
  /**
    Whether or not to use retrigger mode.
  **/
  @:uproperty public var bRetrigger : Bool;
  
  /**
    Whether or not to use legato mode.
  **/
  @:uproperty public var bLegato : Bool;
  
  /**
    The modulation envelope release time (in ms) [0.0, 10000]
  **/
  @:uproperty public var ModulationEnvelopeReleaseTime : unreal.Float32;
  
  /**
    The modulation envelope sustain gain (linear gain) [0.0, 1.0]
  **/
  @:uproperty public var ModulationEnvelopeSustainGain : unreal.Float32;
  
  /**
    The modulation envelope decay time (in ms) [0.0, 10000]
  **/
  @:uproperty public var ModulationEnvelopeDecayTime : unreal.Float32;
  
  /**
    The modulation envelope attack time (in ms) [0.0, 10000]
  **/
  @:uproperty public var ModulationEnvelopeAttackTime : unreal.Float32;
  
  /**
    The "depth" (i.e. how much) modulation envelope to use. This scales the modulation envelope output. [0.0, 1.0]
  **/
  @:uproperty public var ModulationEnvelopeDepth : unreal.Float32;
  
  /**
    Whether or not to invert the modulation envelope bias output
  **/
  @:uproperty public var bInvertModulationEnvelopeBias : Bool;
  
  /**
    Whether or not to invert the modulation envelope
  **/
  @:uproperty public var bInvertModulationEnvelope : Bool;
  
  /**
    The built-in patch type for the envelope modulator bias output. Bias is when the envelope output is offset by the sustain gain.
  **/
  @:uproperty public var ModEnvBiasPatchType : unreal.synthesis.ESynthModEnvBiasPatch;
  
  /**
    The built-in patch type for the envelope modulator
  **/
  @:uproperty public var ModEnvPatchType : unreal.synthesis.ESynthModEnvPatch;
  
  /**
    The amplitude envelope release time (in ms) [0.0, 10000]
  **/
  @:uproperty public var ReleaseTime : unreal.Float32;
  
  /**
    The amplitude envelope sustain amount (linear gain) [0.0, 1.0]
  **/
  @:uproperty public var SustainGain : unreal.Float32;
  
  /**
    The amplitude envelope decay time (in ms)[0.0, 10000]
  **/
  @:uproperty public var DecayTime : unreal.Float32;
  
  /**
    The amplitude envelope attack time (in ms) [0.0, 10000]
  **/
  @:uproperty public var AttackTime : unreal.Float32;
  
  /**
    The overall gain to use for the synthesizer in dB [-90.0, 20.0]
  **/
  @:uproperty public var GainDb : unreal.Float32;
  
  /**
    The built-in patch type to use for LFO 2 (you can route this to any patchable parameter using the Patches parameter)
  **/
  @:uproperty public var LFO2PatchType : unreal.synthesis.ESynthLFOPatchType;
  
  /**
    The mode to use for LFO 2
  **/
  @:uproperty public var LFO2Mode : unreal.synthesis.ESynthLFOMode;
  
  /**
    The type of LFO to use for LFO 2
  **/
  @:uproperty public var LFO2Type : unreal.synthesis.ESynthLFOType;
  
  /**
    The linear gain to use for LFO 2 [0.0, 1.0]
  **/
  @:uproperty public var LFO2Gain : unreal.Float32;
  
  /**
    The frequency to use for LFO 2 (in hz) [0.0, 50.0]
  **/
  @:uproperty public var LFO2Frequency : unreal.Float32;
  
  /**
    The built-in patch type to use for LFO 1 (you can route this to any patchable parameter using the Patches parameter)
  **/
  @:uproperty public var LFO1PatchType : unreal.synthesis.ESynthLFOPatchType;
  
  /**
    The mode to use for LFO 1
  **/
  @:uproperty public var LFO1Mode : unreal.synthesis.ESynthLFOMode;
  
  /**
    The type of LFO to use for LFO 1
  **/
  @:uproperty public var LFO1Type : unreal.synthesis.ESynthLFOType;
  
  /**
    The linear gain to use for LFO 1 [0.0, 1.0]
  **/
  @:uproperty public var LFO1Gain : unreal.Float32;
  
  /**
    The frequency to use for LFO 1 (in hz) [0.0, 50.0]
  **/
  @:uproperty public var LFO1Frequency : unreal.Float32;
  
  /**
    The stereo pan to use. 0.0 is center. -1.0 is left, 1.0 is right.
  **/
  @:uproperty public var Pan : unreal.Float32;
  
  /**
    The amount of stereo spread to use between oscillator 1 and oscillator 2 [0.0, 1.0]
  **/
  @:uproperty public var Spread : unreal.Float32;
  
  /**
    Whether or not oscillator sync is enabled. Oscillator sync forces oscillator 2's phase to align with oscillator 1's phase.
  **/
  @:uproperty public var bEnableOscillatorSync : Bool;
  
  /**
    Enables forcing the oscillators to have no stereo spread.
  **/
  @:uproperty public var bEnableUnison : Bool;
  
  /**
    The amount of portamento to use, which is the amount of pitch sliding from current note to next [0.0, 1.0]
  **/
  @:uproperty public var Portamento : unreal.Float32;
  
  /**
    The pulsewidth of oscillator 2 (when using a square wave type oscillator). [0.0, 1.0]
  **/
  @:uproperty public var Osc2PulseWidth : unreal.Float32;
  
  /**
    The cents (hundreds of a semitone) of oscillator 2. [-100.0, 100.0]
  **/
  @:uproperty public var Osc2Cents : unreal.Float32;
  
  /**
    The semi-tones of oscillator 2. [-12.0, 12.0]
  **/
  @:uproperty public var Osc2Semitones : unreal.Float32;
  
  /**
    The octave of oscillator 2. [-8.0, 8.0]
  **/
  @:uproperty public var Osc2Octave : unreal.Float32;
  
  /**
    The linear gain of oscillator 2 [0.0, 1.0]
  **/
  @:uproperty public var Osc2Gain : unreal.Float32;
  
  /**
    What type of oscillator to use for oscillator 2
  **/
  @:uproperty public var Osc2Type : unreal.synthesis.ESynth1OscType;
  
  /**
    The pulsewidth of oscillator 1 (when using a square wave type oscillator). [0.0, 1.0]
  **/
  @:uproperty public var Osc1PulseWidth : unreal.Float32;
  
  /**
    The cents (hundreds of a semitone) of oscillator 1. [-100.0, 100.0]
  **/
  @:uproperty public var Osc1Cents : unreal.Float32;
  
  /**
    The semi-tones of oscillator 1. [-12.0, 12.0]
  **/
  @:uproperty public var Osc1Semitones : unreal.Float32;
  
  /**
    The octave of oscillator 1. [-8.0, 8.0]
  **/
  @:uproperty public var Osc1Octave : unreal.Float32;
  
  /**
    The linear gain of oscillator 1 [0.0, 1.0]
  **/
  @:uproperty public var Osc1Gain : unreal.Float32;
  
  /**
    What type of oscillator to use for oscillator 1
  **/
  @:uproperty public var Osc1Type : unreal.synthesis.ESynth1OscType;
  
  /**
    Whether or not to allow multiple synth voices.
  **/
  @:uproperty public var bEnablePolyphony : Bool;
  
}
