/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.synthesis;

/**
  A simple widget that shows a sliding bar with a handle that allows you to control the value between 0..1.
  
  * No Children
**/
@:umodule("Synthesis")
@:glueCppIncludes("UI/Synth2DSlider.h")
@:uextern @:uclass extern class USynth2DSlider extends unreal.umg.UWidget {
  
  /**
    Called when the value is changed by slider or typing.
  **/
  @:uproperty public var OnValueChangedY : unreal.synthesis.FOnFloatValueChangedEventSynth2D;
  
  /**
    Called when the value is changed by slider or typing.
  **/
  @:uproperty public var OnValueChangedX : unreal.synthesis.FOnFloatValueChangedEventSynth2D;
  
  /**
    Invoked when the controller capture ends.
  **/
  @:uproperty public var OnControllerCaptureEnd : unreal.synthesis.FOnControllerCaptureEndEventSynth2D;
  
  /**
    Invoked when the controller capture begins.
  **/
  @:uproperty public var OnControllerCaptureBegin : unreal.synthesis.FOnControllerCaptureBeginEventSynth2D;
  
  /**
    Invoked when the mouse is released and a capture ends.
  **/
  @:uproperty public var OnMouseCaptureEnd : unreal.synthesis.FOnMouseCaptureEndEventSynth2D;
  
  /**
    Invoked when the mouse is pressed and a capture begins.
  **/
  @:uproperty public var OnMouseCaptureBegin : unreal.synthesis.FOnMouseCaptureBeginEventSynth2D;
  
  /**
    Should the slider be focusable?
  **/
  @:uproperty public var IsFocusable : Bool;
  
  /**
    The amount to adjust the value by, when using a controller or keyboard
  **/
  @:uproperty public var StepSize : unreal.Float32;
  
  /**
    Whether the handle is interactive or fixed.
  **/
  @:uproperty public var Locked : Bool;
  
  /**
    Whether the slidable area should be indented to fit the handle.
  **/
  @:uproperty public var IndentHandle : Bool;
  
  /**
    The color to draw the slider handle in.
  **/
  @:uproperty public var SliderHandleColor : unreal.FLinearColor;
  
  /**
    The progress bar style
  **/
  @:uproperty public var WidgetStyle : unreal.synthesis.FSynth2DSliderStyle;
  
  /**
    A bindable delegate to allow logic to drive the value of the widget
  **/
  @:uproperty public var ValueYDelegate : unreal.umg.FGetFloat;
  
  /**
    A bindable delegate to allow logic to drive the value of the widget
  **/
  @:uproperty public var ValueXDelegate : unreal.umg.FGetFloat;
  @:uproperty public var ValueY : unreal.Float32;
  @:uproperty public var ValueX : unreal.Float32;
  
  /**
    Gets the current value of the slider.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetValue() : unreal.FVector2D;
  
  /**
    Sets the current value of the slider.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetValue(InValue : unreal.FVector2D) : Void;
  
  /**
    Sets if the slidable area should be indented to fit the handle
  **/
  @:ufunction(BlueprintCallable) @:final public function SetIndentHandle(InValue : Bool) : Void;
  
  /**
    Sets the handle to be interactive or fixed
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLocked(InValue : Bool) : Void;
  
  /**
    Sets the amount to adjust the value by, when using a controller or keyboard
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStepSize(InValue : unreal.Float32) : Void;
  
  /**
    Sets the color of the handle bar
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSliderHandleColor(InValue : unreal.FLinearColor) : Void;
  
}
