/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrcontroller;

@:umodule("GoogleVRController")
@:glueCppIncludes("GoogleVRLaserVisualComponent.h")
@:uextern @:uclass extern class UGoogleVRLaserVisualComponent extends unreal.googlevrcontroller.UGoogleVRLaserVisual {
  
  /**
    Size of the reticle (in meters) as seen from 1 meter
  **/
  @:uproperty public var ReticleSize : unreal.Float32;
  
  /**
    Maximum distance of the pointer (in meters).
  **/
  @:uproperty public var LaserDistanceMax : unreal.Float32;
  
  /**
    Distance from the pointer that raycast hits will be detected.
  **/
  @:uproperty public var MaxPointerDistance : unreal.Float32;
  
  /**
    Distance from the pointer that the reticle will be drawn at when hitting nothing.
  **/
  @:uproperty public var DefaultReticleDistance : unreal.Float32;
  
  /**
    TranslucentSortPriority to use when rendering.
    The reticle, the laser, and the controller mesh use TranslucentSortPriority.
    The controller touch point mesh uses TranslucentSortPriority+1, this makes sure that
    the touch point doesn't z-fight with the controller mesh.
  **/
  @:uproperty public var TranslucentSortPriority : unreal.Int32;
  
  /**
    Material used for the reticle billboard.
  **/
  @:uproperty public var ControllerReticleMaterial : unreal.UMaterialInterface;
  
  /**
    Static mesh used to represent the laser.
  **/
  @:uproperty public var LaserPlaneMesh : unreal.UStaticMesh;
  
  /**
    Get the MaterialBillboardComponent used to represent the reticle.
    Can be used if you desire to modify the reticle at runtime
    @return reticle billboard component.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetReticle() : unreal.UMaterialBillboardComponent;
  
  /**
    Get the Laser Plane Component.
    Can be used if you desire to modify the laser at runtime
    @return Laser Plane Component.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLaser() : unreal.googlevrcontroller.UGoogleVRLaserPlaneComponent;
  
  /**
    Get the MaterialInstanceDynamic used to represent the laser material.
    Can be used if you desire to modify the laser at runtime
    (i.e. change laser color when pointing at object).
    @return laser dynamic material instance.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLaserMaterial() : unreal.UMaterialInstanceDynamic;
  
  /**
    Set the distance of the pointer.
    This will update the distance of the laser and the reticle
    based upon the min and max distances.
    @param Distance - new distance
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointerDistance(Distance : unreal.Float32, WorldToMetersScale : unreal.Float32, CameraLocation : unreal.FVector) : Void;
  
}
