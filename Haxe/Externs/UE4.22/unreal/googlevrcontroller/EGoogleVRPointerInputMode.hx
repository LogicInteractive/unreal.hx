/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrcontroller;

@:umodule("GoogleVRController")
@:glueCppIncludes("Classes/GoogleVRPointer.h")
@:uname("EGoogleVRPointerInputMode")
@:class @:uextern @:uenum extern enum EGoogleVRPointerInputMode {
  
  /**
    Sweep a sphere based on the pointer's radius from the camera through the target of the pointer.
    This is ideal for reticles that are always rendered on top.
    The object that is selected will always be the object that appears
    underneath the reticle from the perspective of the camera.
    This also prevents the reticle from appearing to "jump" when it starts/stops hitting an object.
    
    Note: This will prevent the user from pointing around an object to hit something that is out of sight.
    This isn't a problem in a typical use case.
  **/
  Camera;
  
  /**
    Sweep a sphere based on the pointer's radius directly from the pointer origin.
    This is ideal for full-length laser pointers.
  **/
  Direct;
  
  /**
    *  Default method for casting ray.
    *  Combines the Camera and Direct raycast modes.
    *  Uses a Direct ray up until the CameraRayIntersectionDistance, and then switches to use
    *  a Camera ray starting from the point where the two rays intersect.
    *
    *  This is the most versatile raycast mode. Like Camera mode, this prevents the reticle
    *  appearing jumpy. Additionally, it still allows the user to target objects that are close
    *  to them by using the laser as a visual reference.
  **/
  HybridExperimental;
  
}
