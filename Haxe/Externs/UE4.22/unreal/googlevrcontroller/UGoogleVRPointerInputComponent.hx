/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrcontroller;

/**
  GoogleVRPointerInputComponent is used to interact with Actors and Widgets by
  using a 3D pointer. The pointer can be a cardboard reticle, or a daydream controller.
  
  @see UGoogleVRMotionControllerComponent
  @see UGoogleVRGazeReticleComponent
**/
@:umodule("GoogleVRController")
@:glueCppIncludes("GoogleVRPointerInputComponent.h")
@:uextern @:uclass extern class UGoogleVRPointerInputComponent extends unreal.UActorComponent {
  
  /**
    Returns true if there was a blocking hit.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsBlockingHit() : Bool;
  
  /**
    The actor that is being pointed at.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetHitActor() : unreal.AActor;
  
  /**
    The component that the actor being pointed at.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetHitComponent() : unreal.UPrimitiveComponent;
  
  /**
    The world location where the pointer intersected with the hit actor.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetIntersectionLocation() : unreal.FVector;
  
  /**
    Get the result of the latest hit detection.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLatestHitResult() : unreal.FHitResult;
  
  /**
    Event that occurs once when the pointer ends a click.
  **/
  @:uproperty public var OnPointerReleasedEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs once when the pointer initiates a click.
  **/
  @:uproperty public var OnPointerPressedEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs once when the pointer is clicked.
    A click is when the pointer is pressed and then released while pointing at the same component.
  **/
  @:uproperty public var OnPointerClickComponentEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs once when the pointer is clicked.
    A click is when the pointer is pressed and then released while pointing at the same actor.
  **/
  @:uproperty public var OnPointerClickActorEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs once when the pointer is hovering over a component.
  **/
  @:uproperty public var OnPointerHoverComponentEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs once when the pointer is hovering over an actor.
  **/
  @:uproperty public var OnPointerHoverActorEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs when the pointer exits a component.
  **/
  @:uproperty public var OnPointerExitComponentEvent : unreal.googlevrcontroller.FGoogleVRInputExitComponentDelegate;
  
  /**
    Event that occurs when the pointer exits an actor.
  **/
  @:uproperty public var OnPointerExitActorEvent : unreal.googlevrcontroller.FGoogleVRInputExitActorDelegate;
  
  /**
    Event that occurs when the pointer enters a component.
  **/
  @:uproperty public var OnPointerEnterComponentEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    Event that occurs when the pointer enters an actor.
  **/
  @:uproperty public var OnPointerEnterActorEvent : unreal.googlevrcontroller.FGoogleVRInputDelegate;
  
  /**
    WidgetInteractionComponent used to integrate pointer input with UMG widgets.
  **/
  @:uproperty public var WidgetInteraction : unreal.googlevrcontroller.UGoogleVRWidgetInteractionComponent;
  
  /**
    Determines if pointer clicks will occur from touching the screen.
  **/
  @:uproperty public var UseTouchClick : Bool;
  
  /**
    Determines if pointer clicks will occur from controller clicks.
  **/
  @:uproperty public var UseControllerClick : Bool;
  
  /**
    The minimum distance an object needs to be from the camera for the pointer to hit it.
    Note: Only used when PointerInputMode is set to Camera.
  **/
  @:uproperty public var NearClippingDistance : unreal.Float32;
  
  /**
    The maximum distance an object can be from the start of the pointer for the pointer to hit it.
  **/
  @:uproperty public var FarClippingDistance : unreal.Float32;
  
}
