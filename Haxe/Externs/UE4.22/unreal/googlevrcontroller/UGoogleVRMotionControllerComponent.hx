/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrcontroller;

/**
  GoogleVRMotionControllerComponent is a customizable Daydream Motion Controller.
  
  It uses the standard unreal MotionControllerComponent to control position and orientation,
  and adds the following features:
  
  Controller Visualization:
  Renders a skinnable 3D model that responds to button presses on the controller,
  as well as a laser and reticle.
  
  Pointer Input Integration:
  Integrates with GoogleVRPointerInputComponent so that the motion controller can easily be used to interact with
  Actors and widgets.
  
  Controller Connection Status:
  The controller visual and pointer input will automatically be turned off when the controller is disconnected.
  If the component is activated while the controller is disconnected, then the controller visual and pointer input
  will be off initially. When the controller becomes connected, they will automatically turn on.
**/
@:umodule("GoogleVRController")
@:glueCppIncludes("GoogleVRMotionControllerComponent.h")
@:uextern @:uclass extern class UGoogleVRMotionControllerComponent extends unreal.USceneComponent implements unreal.googlevrcontroller.IGoogleVRPointer {
  
  /**
    TranslucentSortPriority to use when rendering.
    The reticle, the laser, and the controller mesh use TranslucentSortPriority.
    The controller touch point mesh uses TranslucentSortPriority+1, this makes sure that
    the touch point doesn't z-fight with the controller mesh.
  **/
  @:uproperty public var TranslucentSortPriority : unreal.Int32;
  
  /**
    If true, the root of the pose is locked to the local position of the player's head.
  **/
  @:uproperty public var IsLockedToHead : Bool;
  
  /**
    If true, then a GoogleVRInputComponent will automatically be created if one doesn't already exist.
  **/
  @:uproperty public var RequireInputComponent : Bool;
  
  /**
    Determines the method used to detect what the pointer hits.
  **/
  @:uproperty public var PointerInputMode : unreal.googlevrcontroller.EGoogleVRPointerInputMode;
  
  /**
    The name of the LaserVisualComponent to use.
  **/
  @:uproperty public var LaserVisualComponentTag : unreal.FName;
  
  /**
    The exit radius for the ray is the sprite size multiplied by this value.
    See IGoogleVRPointer.h for details.
  **/
  @:uproperty public var ExitRadiusCoeff : unreal.Float32;
  
  /**
    The enter radius for the ray is the sprite size multiplied by this value.
    See IGoogleVRPointer.h for details.
  **/
  @:uproperty public var EnterRadiusCoeff : unreal.Float32;
  
  /**
    Texture used for the battery charging state.
  **/
  @:uproperty public var BatteryChargingTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery critcally low state.
  **/
  @:uproperty public var BatteryCriticalLowTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery low state.
  **/
  @:uproperty public var BatteryLowTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery medium state.
  **/
  @:uproperty public var BatteryMediumTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery almost full state.
  **/
  @:uproperty public var BatteryAlmostFullTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery full state.
  **/
  @:uproperty public var BatteryFullTexture : unreal.UTexture2D;
  
  /**
    Texture used for the battery unknown state.
  **/
  @:uproperty public var BatteryUnknownTexture : unreal.UTexture2D;
  
  /**
    Texture parameter name for the battery material.
  **/
  @:uproperty public var BatteryTextureParameterName : unreal.FName;
  
  /**
    Mesh used for controller battery state.
  **/
  @:uproperty public var ControllerBatteryMesh : unreal.UStaticMesh;
  
  /**
    Parameter collection used to set the alpha of all components.
    Must include property named "GoogleVRMotionControllerAlpha".
  **/
  @:uproperty public var ParameterCollection : unreal.UMaterialParameterCollection;
  
  /**
    Material used for touch point when touching the touch pad.
  **/
  @:uproperty public var ControllerTouchPointMaterial : unreal.UMaterialInterface;
  
  /**
    Material used when pressing the system button.
  **/
  @:uproperty public var SystemMaterial : unreal.UMaterialInterface;
  
  /**
    Material used when pressing the app button.
  **/
  @:uproperty public var AppMaterial : unreal.UMaterialInterface;
  
  /**
    Material used when pressing the touchpad button.
  **/
  @:uproperty public var TouchpadMaterial : unreal.UMaterialInterface;
  
  /**
    Material used when idle.
  **/
  @:uproperty public var IdleMaterial : unreal.UMaterialInterface;
  
  /**
    Mesh used for controller touch point.
  **/
  @:uproperty public var ControllerTouchPointMesh : unreal.UStaticMesh;
  
  /**
    Mesh used for controller.
  **/
  @:uproperty public var ControllerMesh : unreal.UStaticMesh;
  
  /**
    Get the MotionControllerComponent.
    This is the MotionControllerComponent being used to position the
    Controller visuals.
    Can be used if you desire to attach any additional components
    As part of your visualization of the controller.
    @return motion controller component
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMotionController() : unreal.headmounteddisplay.UMotionControllerComponent;
  
  /**
    Get the StaticMeshComponent used to represent the controller.
    Can be used if you desire to modify the controller at runtime
    @return controller static mesh component.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetControllerMesh() : unreal.UStaticMeshComponent;
  
  /**
    Get the MaterialInstanceDynamic used to represent the laser material.
    Can be used if you desire to modify the laser at runtime
    (i.e. change laser color when pointing at object).
    @return laser dynamic material instance.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLaserMaterial() : unreal.UMaterialInstanceDynamic;
  
  /**
    Set the distance of the pointer.
    This will update the distance of the laser and the reticle
    based upon the min and max distances.
    @param Distance - new distance
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPointerDistance(Distance : unreal.Float32) : Void;
  
  /**
    Get the Current Pointer Distance.
    Can be used for debugging your scene
    @return the distance used.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCurrentPointerDistance() : unreal.Float32;
  // GoogleVRPointer interface implementation
  
}
