/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrcontroller;

/**
  GoogleVRController Extensions Function Library
**/
@:umodule("GoogleVRController")
@:glueCppIncludes("GoogleVRControllerFunctionLibrary.h")
@:uextern @:uclass extern class UGoogleVRControllerFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Get the GoogleVR Controller API status
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerAPIStatus() : unreal.googlevrcontroller.EGoogleVRControllerAPIStatus;
  
  /**
    Get the GoogleVR Controller state
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerState(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : unreal.googlevrcontroller.EGoogleVRControllerState;
  
  /**
    Get user's handedness preference from GVRSDK
    @return A EGoogleVRControllerHandedness indicates the user's handedness preference in GoogleVR Settings.
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerHandedness() : unreal.googlevrcontroller.EGoogleVRControllerHandedness;
  
  /**
    This function return the controller acceleration in gvr controller space.
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerRawAccel(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : unreal.FVector;
  
  /**
    This function return the controller angular velocity about each axis (positive means clockwise when sighting along axis) in gvr controller space.
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerRawGyro(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : unreal.FVector;
  
  /**
    This function return the orientation of the controller in unreal space.
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerOrientation(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : unreal.FRotator;
  
  /**
    Return a pointer to the UGoogleVRControllerEventManager to hook up GoogleVR Controller specific event.
  **/
  @:ufunction(BlueprintCallable) static public function GetGoogleVRControllerEventManager() : unreal.googlevrcontroller.UGoogleVRControllerEventManager;
  
  /**
    Determine if the arm model is enabled
    @return true if the arm model is enabled
  **/
  @:ufunction(BlueprintCallable) static public function IsArmModelEnabled() : Bool;
  
  /**
    Set the arm model enabled/disabled
    @param bArmModelEnabled - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetArmModelEnabled(bArmModelEnabled : Bool) : Void;
  
  /**
    Returns the local position of the pointer in the unreal coordinate system relative to the motion controller.
    The pointer is similar to the controller, except that it is slightly forward and rotated down by the
    pointer tilt angle. This is used to create more ergonomic comfort when pointing at things.
    This should be used for any reticle / laser implementation.
    @return pointer position.
  **/
  @:ufunction(BlueprintCallable) static public function GetArmModelPointerPositionOffset() : unreal.FVector;
  
  /**
    Get the elbow height used by the arm model in meters.
    Used in the mathematical model for calculating the controller position/rotation.
    @return user height.
  **/
  @:ufunction(BlueprintCallable) static public function GetArmModelAddedElbowHeight() : unreal.Float32;
  
  /**
    Set the elbow height used by the arm model in meters.
    Used in the mathematical model for calculating the controller position/rotation.
    @param HeightMeters - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetArmModelAddedElbowHeight(ElbowHeight : unreal.Float32) : Void;
  
  /**
    Get the elbow depth used by the arm model in meters.
    Used in the mathematical model for calculating the controller position/rotation.
    @return user height.
  **/
  @:ufunction(BlueprintCallable) static public function GetArmModelAddedElbowDepth() : unreal.Float32;
  
  /**
    Set the elbow depth used by the arm model in meters.
    Used in the mathematical model for calculating the controller position/rotation.
    @param HeightMeters - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetArmModelAddedElbowDepth(ElbowDepth : unreal.Float32) : Void;
  
  /**
    Get the pointer tilt angle.
    @return degrees downward that the pointer tilts.
  **/
  @:ufunction(BlueprintCallable) static public function GetArmModelPointerTiltAngle() : unreal.Float32;
  
  /**
    Set the pointer tilt angle.
    Defaults to 15 degrees, which is comfortable for most use cases.
    @param TiltAngle - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetArmModelPointerTiltAngle(TiltAngle : unreal.Float32) : Void;
  
  /**
    Get if the arm model will use accelerometer data
    If this is turned on, then the arm model will estimate the position of the controller in space
    using accelerometer data. This is useful when trying to make the player feel like they are moving
    around a physical object. Not as useful when just interacting with UI.
    @return true if accelerometer use is enabled
  **/
  @:ufunction(BlueprintCallable) static public function WillArmModelUseAccelerometer() : Bool;
  
  /**
    Set if the arm model will use accelerometer data
    If this is turned on, then the arm model will estimate the position of the controller in space
    using accelerometer data. This is useful when trying to make the player feel like they are moving
    around a physical object. Not as useful when just interacting with UI.
    @param UseAccelerometer - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetWillArmModelUseAccelerometer(UseAccelerometer : Bool) : Void;
  
  /**
    Set if the Arm Model will be locked to the head Pose.
    @param IsLockedToHead - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetArmModelIsLockedToHead(IsLockedToHead : Bool) : Void;
  
  /**
    Get if the Arm Model will be locked to the head Pose.
    @return true if it is locked to the Head Pose
  **/
  @:ufunction(BlueprintCallable) static public function GetArmModelIsLockedToHead() : Bool;
  
  /**
    Controller distance from the face after which the alpha value decreases (meters).
    @return fade distance from face in meters.
  **/
  @:ufunction(BlueprintCallable) static public function GetFadeDistanceFromFace() : unreal.Float32;
  
  /**
    Controller distance from the face after which the alpha value decreases (meters).
    @param DistanceFromFace - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetFadeDistanceFromFace(DistanceFromFace : unreal.Float32) : Void;
  
  /**
    Controller distance from the face after which the tooltips appear (meters).
    @return tooltip mininum distance from face in meters.
  **/
  @:ufunction(BlueprintCallable) static public function GetTooltipMinDistanceFromFace() : unreal.Float32;
  
  /**
    Controller distance from the face after which the tooltips appear (meters).
    @param DistanceFromFace - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetTooltipMinDistanceFromFace(DistanceFromFace : unreal.Float32) : Void;
  
  /**
    When the angle (degrees) between the controller and the head is larger than
    this value, the tooltip disappears.
    If the value is 180, then the tooltips are always shown.
    If the value is 90, the tooltips are only shown when they are facing the camera.
    @return tooltip max angle from camera in degrees.
  **/
  @:ufunction(BlueprintCallable) static public function GetTooltipMaxAngleFromCamera() : unreal.Int32;
  
  /**
    When the angle (degrees) between the controller and the head is larger than
    this value, the tooltip disappears.
    If the value is 180, then the tooltips are always shown.
    If the value is 90, the tooltips are only shown when they are facing the camera.
    @param AngleFromCamera - value to set
  **/
  @:ufunction(BlueprintCallable) static public function SetTooltipMaxAngleFromCamera(AngleFromCamera : unreal.Int32) : Void;
  
  /**
    Get the current desired alpha value of the controller visual.
    This changes based on the FadeDistanceFromFace, and is used to prevent the controller
    From clipping awkwardly into the user's face.
    @return value between 0 and 1.
  **/
  @:ufunction(BlueprintCallable) static public function GetControllerAlphaValue() : unreal.Float32;
  
  /**
    Get the current desired alpha value of the tooltip visual.
    When the controller is farther than TooltipMinDistanceFromFace this becomes 0
    When the controller is closer than FadeDistanceFromFace this becomes 0
    This is used so that the tooltips are only visible when the controller is being held up.
    @return value between 0 and 1.
  **/
  @:ufunction(BlueprintCallable) static public function GetTooltipAlphaValue() : unreal.Float32;
  
  /**
    Get whether the controller battery is currently charging.
    This may not be real time information and may be slow to be updated.
    @return true if the battery is charging.
  **/
  @:ufunction(BlueprintCallable) static public function GetBatteryCharging(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : Bool;
  
  /**
    Get the bucketed controller battery level.
    Note this is an approximate level described by enumeration, not a percent.
    @return the approximate battery level, or unknown if the level can not be determined.
  **/
  @:ufunction(BlueprintCallable) static public function GetBatteryLevel(@:opt("AnyHand") Hand : unreal.inputcore.EControllerHand) : unreal.googlevrcontroller.EGoogleVRControllerBatteryLevel;
  
}
