/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.timecodesynchronizer;

/**
  Timecode Synchronizer is intended to correlate multiple timecode sources to help ensure
  that all sources can produce data that is frame aligned.
  
  This typically works by having sources buffer data until we have enough frames that
  such that we can find an overlap. Once that process is finished, the Synchronizer will
  provide the appropriate timecode to the engine (which can be retrieved via FApp::GetTimecode
  and FApp::GetTimecodeFrameRate).
  
  Note, the Synchronizer doesn't perform any buffering of data itself (that is left up to
  TimeSynchronizationSources). Instead, the synchronizer simply acts as a coordinator
  making sure all sources are ready, determining if sync is possible, etc.
**/
@:umodule("TimecodeSynchronizer")
@:glueCppIncludes("TimecodeSynchronizer.h")
@:uextern @:uclass extern class UTimecodeSynchronizer extends unreal.UTimecodeProvider {
  
  /**
    ! ONLY MODIFY THESE IN EDITOR
    ! TODO: Deprecate this and make it private.
  **/
  @:uproperty public var TimeSynchronizationInputSources : unreal.TArray<unreal.timemanagement.UTimeSynchronizationSource>;
  
  /**
    How long to wait for all source to be ready
  **/
  @:uproperty public var PreRollingTimeout : unreal.Float32;
  
  /**
    Enable PreRoll timeout
  **/
  @:uproperty public var bUsePreRollingTimeout : Bool;
  
  /**
    Maximum gap size between synchronized time and source time
  **/
  @:uproperty public var PreRollingTimecodeMarginOfErrors : unreal.Int32;
  
  /**
    Enable verification of margin between synchronized time and source time
  **/
  @:uproperty public var bUsePreRollingTimecodeMarginOfErrors : Bool;
  
  /**
    Index of the source that drives the synchronized Timecode.
    The source need to be timecoded and flag as bUseForSynchronization
  **/
  @:uproperty public var MasterSynchronizationSourceIndex : unreal.Int32;
  
  /**
    Custom strategy to tick in a interval.
  **/
  @:uproperty public var TimecodeProvider : unreal.UTimecodeProvider;
  
  /**
    Use a Timecode Provider.
  **/
  @:uproperty public var TimecodeProviderType : unreal.timecodesynchronizer.ETimecodeSynchronizationTimecodeType;
  
  /**
    The fixed framerate to use.
  **/
  @:uproperty public var FixedFrameRate : unreal.FFrameRate;
  
  /**
    Custom strategy to tick in a interval.
  **/
  @:uproperty public var CustomTimeStep : unreal.timemanagement.UFixedFrameRateCustomTimeStep;
  
  /**
    The fixed framerate to use.
  **/
  @:uproperty public var bUseCustomTimeStep : Bool;
  
}
