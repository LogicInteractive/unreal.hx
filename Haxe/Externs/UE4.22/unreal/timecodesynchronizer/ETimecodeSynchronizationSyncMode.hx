/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.timecodesynchronizer;

/**
  Defines the various modes that the synchronizer can use to try and achieve synchronization.
**/
@:umodule("TimecodeSynchronizer")
@:glueCppIncludes("Public/TimecodeSynchronizer.h")
@:uname("ETimecodeSynchronizationSyncMode")
@:class @:uextern @:uenum extern enum ETimecodeSynchronizationSyncMode {
  
  /**
    User will specify an offset (number of frames) from the Timecode Source (see ETimecodeSycnrhonizationTimecodeType).
    This offset may be positive or negative depending on the latency of the source.
    Synchronization will be achieved once the synchronizer detects all input sources have frames that correspond
    with the offset timecode.
    
    This is suitable for applications trying to keep multiple UE4 instances in sync while using nDisplay / genlock.
  **/
  UserDefinedOffset;
  
  /**
    Engine will try and automatically determine an appropriate offset based on what frames are available
    on the given sources.
    
    This is suitable for running a single UE4 instance that just wants to synchronize its inputs.
  **/
  Auto;
  
  /**
    The same as Auto except that instead of trying to find a suitable timecode nearest to the
    newest common frame, we try to find a suitable timecode nearest to the oldest common frame.
  **/
  AutoOldest;
  
}
