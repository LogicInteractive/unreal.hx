/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mixedrealitycaptureframework;

@:umodule("MixedRealityCaptureFramework")
@:glueCppIncludes("MixedRealityCaptureComponent.h")
@:uextern @:uclass extern class UMixedRealityCaptureComponent extends unreal.USceneCaptureComponent2D {
  @:uproperty public var OnCaptureSourceOpened : unreal.mixedrealitycaptureframework.FMRCaptureFeedOpenedDelegate;
  
  /**
    Enabled by default, the projection plane tracks with the HMD to simulate the depth of the player. Disable to keep the projection plane from moving.
  **/
  @:uproperty(BlueprintSetter=SetEnableProjectionDepthTracking) public var bProjectionDepthTracking : Bool;
  
  /**
    Depth offset (in UE units) for the card that the camera feed is projected onto. By default the card is aligned with the HMD.
  **/
  @:uproperty(BlueprintSetter=SetProjectionDepthOffset) public var ProjectionDepthOffset : unreal.Float32;
  
  /**
    Determines if this component should attempt to load the default MR calibration file on initialization
  **/
  @:uproperty public var bAutoLoadConfiguration : Bool;
  
  /**
    Millisecond delay to apply to motion controller components when rendering to the capture view (to better align with latent camera feeds)
  **/
  @:uproperty(BlueprintGetter=GetTrackingDelay, BlueprintSetter=SetTrackingDelay) public var TrackingLatency : unreal.Int32;
  @:uproperty public var GarbageMatteCaptureTextureTarget : unreal.UTextureRenderTarget2D;
  @:uproperty public var TrackingSourceName : unreal.FName;
  @:uproperty(BlueprintSetter=SetLensDistortionParameters) public var LensDistortionParameters : unreal.opencvlensdistortion.FOpenCVLensDistortionParameters;
  @:uproperty(BlueprintSetter=SetCaptureDevice) public var CaptureFeedRef : unreal.mixedrealitycaptureframework.FMrcVideoCaptureFeedIndex;
  @:uproperty(BlueprintSetter=SetVidProcessingParams) public var VideoProcessingParams : unreal.mixedrealitycaptureframework.FMrcVideoProcessingParams;
  @:uproperty(BlueprintSetter=SetVidProjectionMat) public var VideoProcessingMaterial : unreal.UMaterialInterface;
  @:uproperty public var MediaSource : unreal.mediaassets.UMediaPlayer;
  @:ufunction(BlueprintCallable) @:final public function SaveAsDefaultConfiguration_K2() : Bool;
  @:ufunction(BlueprintCallable) @:final public function SaveConfiguration_K2(SlotName : unreal.FString, UserIndex : unreal.Int32) : Bool;
  @:ufunction(BlueprintCallable) @:final public function LoadDefaultConfiguration() : Bool;
  @:ufunction(BlueprintCallable) @:final public function LoadConfiguration(SlotName : unreal.FString, UserIndex : unreal.Int32) : Bool;
  @:ufunction(BlueprintNativeEvent, BlueprintCallable) @:thisConst public function ConstructCalibrationData() : unreal.mixedrealitycaptureframework.UMrcCalibrationData;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function FillOutCalibrationData(Dst : unreal.mixedrealitycaptureframework.UMrcCalibrationData) : Void;
  @:ufunction(BlueprintNativeEvent, BlueprintCallable) public function ApplyCalibrationData(ConfigData : unreal.mixedrealitycaptureframework.UMrcCalibrationData) : Void;
  
  /**
    Set an external garbage matte actor to be used instead of the mixed reality component's
    normal configuration save game based actor.  This is used during garbage matte setup to
    preview the garbage mask in realtime.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetGarbageMatteActor(Actor : unreal.mixedrealitycaptureframework.AMrcGarbageMatteActor) : Bool;
  @:ufunction(BlueprintCallable) @:final public function SetVidProjectionMat(NewMaterial : unreal.UMaterialInterface) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVidProcessingParams(NewVidProcessingParams : unreal.Const<unreal.PRef<unreal.mixedrealitycaptureframework.FMrcVideoProcessingParams>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDeviceAttachment(SourceName : unreal.FName) : Void;
  @:ufunction(BlueprintCallable) @:final public function DetatchFromDevice() : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsTracked() : Bool;
  @:ufunction(BlueprintCallable) @:final public function SetCaptureDevice(FeedRef : unreal.Const<unreal.PRef<unreal.mixedrealitycaptureframework.FMrcVideoCaptureFeedIndex>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetLensDistortionParameters(ModelRef : unreal.Const<unreal.PRef<unreal.opencvlensdistortion.FOpenCVLensDistortionParameters>>) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTrackingDelay() : unreal.Int32;
  @:ufunction(BlueprintCallable) @:final public function SetTrackingDelay(DelayMS : unreal.Int32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetProjectionDepthOffset(DepthOffset : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetProjectionActor_K2() : unreal.AActor;
  
  /**
    Enabled by default, the projection plane tracks with the HMD to simulate
    the depth of the player. Disable to keep the projection plane from moving.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableProjectionDepthTracking(bEnable : Bool = true) : Void;
  
}
