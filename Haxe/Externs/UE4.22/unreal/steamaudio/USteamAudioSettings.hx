/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.steamaudio;

@:umodule("SteamAudio")
@:glueCppIncludes("Private/SteamAudioSettings.h")
@:uextern @:uclass extern class USteamAudioSettings extends unreal.UObject {
  
  /**
    Number of secondary rays to shoot for baked simulation.
  **/
  @:uproperty public var BakedSecondaryRays : unreal.Int32;
  
  /**
    Number of rays to shoot for baked simulation.
  **/
  @:uproperty public var BakedRays : unreal.Int32;
  
  /**
    Number of bounces for baked simulation.
  **/
  @:uproperty public var BakedBounces : unreal.Int32;
  
  /**
    Preset quality settings for baked simulation.
  **/
  @:uproperty public var BakedQualityPreset : unreal.steamaudio.EQualitySettings;
  
  /**
    Number of secondary rays to trace for realtime simulation.
  **/
  @:uproperty public var RealtimeSecondaryRays : unreal.Int32;
  
  /**
    Number of rays to trace for realtime simulation.
  **/
  @:uproperty public var RealtimeRays : unreal.Int32;
  
  /**
    Number of bounces for realtime simulation.
  **/
  @:uproperty public var RealtimeBounces : unreal.Int32;
  
  /**
    Preset quality settings for realtime simulation.
  **/
  @:uproperty public var RealtimeQualityPreset : unreal.steamaudio.EQualitySettings;
  
  /**
    TAN override maximum number of supported sources.
  **/
  @:uproperty public var TANMaxSources : unreal.FakeUInt32;
  
  /**
    TAN override length of impulse response to compute for each sound source.
  **/
  @:uproperty public var TANIndirectImpulseResponseDuration : unreal.Float32;
  
  /**
    TAN override output of indirect propagation is stored in ambisonics of this order.
  **/
  @:uproperty public var TANIndirectImpulseResponseOrder : unreal.Int32;
  
  /**
    Maximum number of supported sources.
  **/
  @:uproperty public var MaxSources : unreal.FakeUInt32;
  
  /**
    Scaling applied to indirect sound.
  **/
  @:uproperty public var IndirectContribution : unreal.Float32;
  
  /**
    How to simulate listener-centric reverb.
  **/
  @:uproperty public var ReverbSimulationType : unreal.steamaudio.EIplSimulationType;
  
  /**
    How to spatialize indirect sound.
  **/
  @:uproperty public var IndirectSpatializationMethod : unreal.steamaudio.EIplSpatializationMethod;
  
  /**
    Length of impulse response to compute for each sound source.
  **/
  @:uproperty public var IndirectImpulseResponseDuration : unreal.Float32;
  
  /**
    Output of indirect propagation is stored in ambisonics of this order.
  **/
  @:uproperty public var IndirectImpulseResponseOrder : unreal.Int32;
  
  /**
    Specifies how "rough" the surface is. Surfaces with a high scattering value randomly reflect sound in all directions;
    surfaces with a low scattering value reflect sound in a mirror-like manner.
  **/
  @:uproperty public var LandscapeScattering : unreal.Float32;
  
  /**
    How much this material transmits high frequency sound.
  **/
  @:uproperty public var LandscapeHighFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits mid frequency sound.
  **/
  @:uproperty public var LandscapeMidFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits low frequency sound.
  **/
  @:uproperty public var LandscapeLowFreqTransmission : unreal.Float32;
  
  /**
    How much this material absorbs high frequency sound.
  **/
  @:uproperty public var LandscapeHighFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs mid frequency sound.
  **/
  @:uproperty public var LandscapeMidFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs low frequency sound.
  **/
  @:uproperty public var LandscapeLowFreqAbsorption : unreal.Float32;
  
  /**
    Preset material settings for landscape actors.
  **/
  @:uproperty public var LandscapeMaterialPreset : unreal.steamaudio.EPhononMaterial;
  
  /**
    Specifies how "rough" the surface is. Surfaces with a high scattering value randomly reflect sound in all directions;
    surfaces with a low scattering value reflect sound in a mirror-like manner.
  **/
  @:uproperty public var BSPScattering : unreal.Float32;
  
  /**
    How much this material transmits high frequency sound.
  **/
  @:uproperty public var BSPHighFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits mid frequency sound.
  **/
  @:uproperty public var BSPMidFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits low frequency sound.
  **/
  @:uproperty public var BSPLowFreqTransmission : unreal.Float32;
  
  /**
    How much this material absorbs high frequency sound.
  **/
  @:uproperty public var BSPHighFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs mid frequency sound.
  **/
  @:uproperty public var BSPMidFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs low frequency sound.
  **/
  @:uproperty public var BSPLowFreqAbsorption : unreal.Float32;
  
  /**
    Preset material settings for BSP geometry.
  **/
  @:uproperty public var BSPMaterialPreset : unreal.steamaudio.EPhononMaterial;
  
  /**
    Specifies how "rough" the surface is. Surfaces with a high scattering value randomly reflect sound in all directions;
    surfaces with a low scattering value reflect sound in a mirror-like manner.
  **/
  @:uproperty public var StaticMeshScattering : unreal.Float32;
  
  /**
    How much this material transmits high frequency sound.
  **/
  @:uproperty public var StaticMeshHighFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits mid frequency sound.
  **/
  @:uproperty public var StaticMeshMidFreqTransmission : unreal.Float32;
  
  /**
    How much this material transmits low frequency sound.
  **/
  @:uproperty public var StaticMeshLowFreqTransmission : unreal.Float32;
  
  /**
    How much this material absorbs high frequency sound.
  **/
  @:uproperty public var StaticMeshHighFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs mid frequency sound.
  **/
  @:uproperty public var StaticMeshMidFreqAbsorption : unreal.Float32;
  
  /**
    How much this material absorbs low frequency sound.
  **/
  @:uproperty public var StaticMeshLowFreqAbsorption : unreal.Float32;
  
  /**
    Preset material settings for Static Mesh actors.
  **/
  @:uproperty public var StaticMeshMaterialPreset : unreal.steamaudio.EPhononMaterial;
  
  /**
    Whether or not to export Landscape geometry.
  **/
  @:uproperty public var ExportLandscapeGeometry : Bool;
  
  /**
    Whether or not to export BSP geometry.
  **/
  @:uproperty public var ExportBSPGeometry : Bool;
  
  /**
    Maximum compute units to reserve on the GPU for convolution processing.
  **/
  @:uproperty public var MaxComputeUnits : unreal.Int32;
  
  /**
    Minimum compute units to reserve on the GPU for convolution processing.
  **/
  @:uproperty public var MinComputeUnits : unreal.Int32;
  
  /**
    Which convolution renderer to use.
  **/
  @:uproperty public var ConvolutionType : unreal.steamaudio.EIplConvolutionType;
  
  /**
    Which audio engine to use.
  **/
  @:uproperty public var AudioEngine : unreal.steamaudio.EIplAudioEngine;
  
}
