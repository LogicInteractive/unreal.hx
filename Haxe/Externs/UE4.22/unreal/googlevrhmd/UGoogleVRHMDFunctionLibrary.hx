/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlevrhmd;

/**
  GoogleVRHMD Extensions Function Library
**/
@:umodule("GoogleVRHMD")
@:glueCppIncludes("GoogleVRHMDFunctionLibrary.h")
@:uextern @:uclass extern class UGoogleVRHMDFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  @:ufunction(BlueprintCallable) static public function IsGoogleVRHMDEnabled() : Bool;
  @:ufunction(BlueprintCallable) static public function IsGoogleVRStereoRenderingEnabled() : Bool;
  
  /**
    Set if the app use sustained performance mode. This can be toggled at run time but note that this function only works on Android build
  **/
  @:ufunction(BlueprintCallable) static public function SetSustainedPerformanceModeEnabled(bEnable : Bool) : Void;
  
  /**
    Enable/disable distortion correction
  **/
  @:ufunction(BlueprintCallable) static public function SetDistortionCorrectionEnabled(bEnable : Bool) : Void;
  
  /**
    Change the default viewer profile
  **/
  @:ufunction(BlueprintCallable) static public function SetDefaultViewerProfile(ViewerProfileURL : unreal.FString) : Bool;
  
  /**
    Change the size of Distortion mesh
  **/
  @:ufunction(BlueprintCallable) static public function SetDistortionMeshSize(MeshSize : unreal.googlevrhmd.EDistortionMeshSizeEnum) : Void;
  
  /**
    Check if distortion correction is enabled
  **/
  @:ufunction(BlueprintCallable) static public function GetDistortionCorrectionEnabled() : Bool;
  
  /**
    Get the currently set viewer model
  **/
  @:ufunction(BlueprintCallable) static public function GetViewerModel() : unreal.FString;
  
  /**
    Get the currently set viewer vendor
  **/
  @:ufunction(BlueprintCallable) static public function GetViewerVendor() : unreal.FString;
  
  /**
    Was the application launched in Vr.
  **/
  @:ufunction(BlueprintCallable) static public function IsVrLaunch() : Bool;
  
  /**
    Is the application running in Daydream mode.
  **/
  @:ufunction(BlueprintCallable) static public function IsInDaydreamMode() : Bool;
  
  /**
    Get the RenderTarget size GoogleVRHMD is using for rendering the scene.
    @return The render target size that is used when rendering the scene.
  **/
  @:ufunction(BlueprintCallable) static public function GetGVRHMDRenderTargetSize() : unreal.FIntPoint;
  
  /**
    Set the GoogleVR render target size to default value.
    @return The default render target size.
  **/
  @:ufunction(BlueprintCallable) static public function SetRenderTargetSizeToDefault() : unreal.FIntPoint;
  
  /**
    Set the RenderTarget size with a scale factor.
    The scale factor will be multiplied by the maximal effective render target size based on the window size and the viewer.
    
    @param ScaleFactor - A float number that is within [0.1, 1.0].
    @param OutRenderTargetSize - The actual render target size it is set to.
    @return true if the render target size changed.
  **/
  @:ufunction(BlueprintCallable) static public function SetGVRHMDRenderTargetScale(ScaleFactor : unreal.Float32, OutRenderTargetSize : unreal.PRef<unreal.FIntPoint>) : Bool;
  
  /**
    Set the RenderTargetSize with the desired resolution.
    @param DesiredWidth - The width of the render target.
    @param DesiredHeight - The height of the render target.
    @param OutRenderTargetSize - The actually render target size it is set to.
    @return true if the render target size changed.
  **/
  @:ufunction(BlueprintCallable) static public function SetGVRHMDRenderTargetSize(DesiredWidth : unreal.Int32, DesiredHeight : unreal.Int32, OutRenderTargetSize : unreal.PRef<unreal.FIntPoint>) : Bool;
  
  /**
    A scaling factor for the neck model offset, clamped from 0 to 1.
    This should be 1 for most scenarios, while 0 will effectively disable
    neck model application. This value can be animated to smoothly
    interpolate between alternative (client-defined) neck models.
    @param ScaleFactor The new neck model scale.
  **/
  @:ufunction(BlueprintCallable) static public function SetNeckModelScale(ScaleFactor : unreal.Float32) : Void;
  
  /**
    A scaling factor for the neck model offset, clamped from 0 to 1.
    This should be 1 for most scenarios, while 0 will effectively disable
    neck model application. This value can be animated to smoothly
    interpolate between alternative (client-defined) neck models.
    @return the current neck model scale.
  **/
  @:ufunction(BlueprintCallable) static public function GetNeckModelScale() : unreal.Float32;
  
  /**
    Returns the string representation of the data URI on which this activity's intent is operating.
    See Intent.getDataString() in the Android documentation.
  **/
  @:ufunction(BlueprintCallable) static public function GetIntentData() : unreal.FString;
  
  /**
    Set whether to enable the loading splash screen in daydream app.
  **/
  @:ufunction(BlueprintCallable) static public function SetDaydreamLoadingSplashScreenEnable(enable : Bool) : Void;
  
  /**
    Set the loading splash screen texture the daydream app wil be using.
    Note that this function only works for daydream app.
    
    @param Texture               A texture asset to be used for rendering the splash screen.
    @param UVOffset              A 2D vector for offset the splash screen texture. Default value is (0.0, 0.0)
    @param UVSize                A 2D vector specifies which part of the splash texture will be rendered on the screen. Default value is (1.0, 1.0)
  **/
  @:ufunction(BlueprintCallable) static public function SetDaydreamLoadingSplashScreenTexture(Texture : unreal.UTexture2D, @:opt("(X=0.000,Y=0.000)") UVOffset : unreal.FVector2D, @:opt("(X=1.000,Y=1.000)") UVSize : unreal.FVector2D) : Void;
  
  /**
    Get the distance in meter the daydream splash screen will be rendered at
  **/
  @:ufunction(BlueprintCallable) static public function GetDaydreamLoadingSplashScreenDistance() : unreal.Float32;
  
  /**
    Set the distance in meter the daydream splash screen will be rendered at
  **/
  @:ufunction(BlueprintCallable) static public function SetDaydreamLoadingSplashScreenDistance(NewDistance : unreal.Float32) : Void;
  
  /**
    Get the render scale of the dayderam splash screen
  **/
  @:ufunction(BlueprintCallable) static public function GetDaydreamLoadingSplashScreenScale() : unreal.Float32;
  
  /**
    Set the render scale of the dayderam splash screen
  **/
  @:ufunction(BlueprintCallable) static public function SetDaydreamLoadingSplashScreenScale(NewSize : unreal.Float32) : Void;
  
  /**
    Get the view angle of the dayderam splash screen
  **/
  @:ufunction(BlueprintCallable) static public function GetDaydreamLoadingSplashScreenViewAngle() : unreal.Float32;
  
  /**
    Set the view angle of the dayderam splash screen
  **/
  @:ufunction(BlueprintCallable) static public function SetDaydreamLoadingSplashScreenViewAngle(NewViewAngle : unreal.Float32) : Void;
  
  /**
    Clear the loading splash texture it is current using. This will make the loading screen to black if the loading splash screen is still enabled.
    Note that this function only works for daydream app.
  **/
  @:ufunction(BlueprintCallable) static public function ClearDaydreamLoadingSplashScreenTexture() : Void;
  
  /**
    Tries to get the floor height if available
    @param FloorHeight where the floor height read will get stored
    returns true is the read was successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function GetFloorHeight(FloorHeight : unreal.Float32) : Bool;
  
  /**
    Tries to get the Safety Cylinder Inner Radius if available
    @param InnerRadius where the Safety Cylinder Inner Radius read will get stored
    returns true is the read was successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function GetSafetyCylinderInnerRadius(InnerRadius : unreal.Float32) : Bool;
  
  /**
    Tries to get the Safety Cylinder Outer Radius if available
    @param OuterRadius where the Safety Cylinder Outer Radius read will get stored
    returns true is the read was successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function GetSafetyCylinderOuterRadius(OuterRadius : unreal.Float32) : Bool;
  
  /**
    Tries to get the Safety Region Type if available
    @param RegionType where the Safety Region Type read will get stored
    returns true is the read was successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function GetSafetyRegion(RegionType : unreal.PRef<unreal.googlevrhmd.ESafetyRegionType>) : Bool;
  
  /**
    Tries to get the Recenter Transform if available
    @param RecenterOrientation where the Recenter Orientation read will get stored
    @param RecenterPosition where the Recenter Position read will get stored
    returns true is the read was successful, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function GetRecenterTransform(RecenterOrientation : unreal.PRef<unreal.FQuat>, RecenterPosition : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Sets whether or not the Recenter event only recenters the Controller.
    @param isRecenterControllerOnly, true will only recenter the Controller
  **/
  @:ufunction(BlueprintCallable) static public function SetRecenterControllerOnly(bIsRecenterControllerOnly : Bool) : Void;
  
}
