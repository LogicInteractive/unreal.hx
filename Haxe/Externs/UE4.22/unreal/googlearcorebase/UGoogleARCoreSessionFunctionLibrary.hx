/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.googlearcorebase;

/**
  A function library that provides static/Blueprint functions associated with GoogleARCore session.
**/
@:umodule("GoogleARCoreBase")
@:glueCppIncludes("GoogleARCoreFunctionLibrary.h")
@:uextern @:uclass extern class UGoogleARCoreSessionFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    A Latent Action to check the availability of ARCore on this device.
    This may initiate a query with a remote service to determine if the device is supported by ARCore. The Latent Action will complete when the check is finished.
    
    @param WorldContextObject    The world context.
    @param LatentInfo                    Unreal internal type required for all latent actions.
    @param OutAvailability               The availability result as a EGoogleARCoreAvailability.
  **/
  @:ufunction(BlueprintCallable) static public function CheckARCoreAvailability(WorldContextObject : unreal.UObject, @:bpopt("LatentInfo") LatentInfo : unreal.FLatentActionInfo, OutAvailability : unreal.PRef<unreal.googlearcorebase.EGoogleARCoreAvailability>) : Void;
  
  /**
    A Latent Action to initiates installation of ARCore if required.
    This function may cause your application be paused if installing ARCore is required.
    
    @param WorldContextObject    The world context.
    @param LatentInfo                    Unreal internal type required for all latent actions.
    @param OutInstallResult              The install request result as a EGoogleARCoreInstallRequestResult.
  **/
  @:ufunction(BlueprintCallable) static public function InstallARCoreService(WorldContextObject : unreal.UObject, @:bpopt("LatentInfo") LatentInfo : unreal.FLatentActionInfo, OutInstallResult : unreal.PRef<unreal.googlearcorebase.EGoogleARCoreInstallRequestResult>) : Void;
  
  /**
    Get the UGoogleARCoreEventManager to bind BP events or c++ delegate in GoogleARCore plugins.
  **/
  @:ufunction(BlueprintCallable) static public function GetARCoreEventManager() : unreal.googlearcorebase.UGoogleARCoreEventManager;
  
  /**
    Starts a new ARCore tracking session GoogleARCore specific configuration.
    If the session already started and the config isn't the same, it will stop the previous session and start a new session with the new config.
    Note that this is a latent action, you can query the session start result by querying GetARCoreSessionStatus() after the latent action finished.
    
    @param WorldContextObject    The world context.
    @param LatentInfo                    Unreal internal type required for all latent actions.
    @param Configuration                 The ARCoreSession configuration to start the session.
  **/
  @:ufunction(BlueprintCallable) static public function StartARCoreSession(WorldContextObject : unreal.UObject, @:bpopt("LatentInfo") LatentInfo : unreal.FLatentActionInfo, Configuration : unreal.googlearcorebase.UGoogleARCoreSessionConfig) : Void;
  
  /**
    Configure the ARCoreSession with the desired camera configuration. The TargetCameraConfig must be
    from a list returned by UGoogleARCoreEventManager::OnCameraConfig delegate.
    
    This function should be called when UGoogleARCoreEventManager::OnCameraConfig delegate got triggered.
  **/
  @:ufunction(BlueprintCallable) static public function SetARCoreCameraConfig(TargetCameraConfig : unreal.googlearcorebase.FGoogleARCoreCameraConfig) : Bool;
  
  /**
    Get the FGoogleARCoreCameraConfig that the current ARCore session is using.
    
    @param OutCurrentCameraConfig   The FGoogleARCoreCameraConfig that the current ARCore session is using.
    @return  True if there is a valid ARCore session and the current camera config is returned.
             False if ARCore session hasn't been started or it is already stopped.
  **/
  @:ufunction(BlueprintCallable) static public function GetARCoreCameraConfig(OutCurrentCameraConfig : unreal.PRef<unreal.googlearcorebase.FGoogleARCoreCameraConfig>) : Bool;
  
  /**
    Returns the state of the passthrough camera rendering in GoogleARCore ARSystem.
    
    @return      True if the passthrough camera rendering is enabled.
  **/
  @:ufunction(BlueprintCallable) static public function IsPassthroughCameraRenderingEnabled() : Bool;
  
  /**
    Enables/Disables the passthrough camera rendering in GoogleARCore ARSystem.
    Note that when passthrough camera rendering is enabled, the camera FOV will be forced
    to match FOV of the physical camera on the device.
  **/
  @:ufunction(BlueprintCallable) static public function SetPassthroughCameraRenderingEnabled(bEnable : Bool) : Void;
  
  /**
    Gets the texture coordinate information about the passthrough camera texture.
    
    @param InUV          The original UVs of on the quad. Should be an array with 8 floats.
    @param OutUV         The orientated UVs that can be used to sample the passthrough camera texture and make sure it is displayed correctly.
  **/
  @:ufunction(BlueprintCallable) static public function GetPassthroughCameraImageUV(InUV : unreal.Const<unreal.PRef<unreal.TArray<unreal.Float32>>>, OutUV : unreal.PRef<unreal.TArray<unreal.Float32>>) : Void;
  
  /**
    Gets a list of all valid UARPlaneGeometry objects that ARCore is currently tracking.
    Planes that have entered the EARTrackingState::StoppedTracking state or for which
    UARPlaneGeometry::GetSubsumedBy returns non-null will not be included.
    
    @param OutPlaneList          An array that contains all the valid planes detected by ARCore.
  **/
  @:ufunction(BlueprintCallable) static public function GetAllPlanes(OutPlaneList : unreal.PRef<unreal.TArray<unreal.augmentedreality.UARPlaneGeometry>>) : Void;
  
  /**
    Gets a list of all valid UARTrackedPoint objects that ARCore is currently tracking.
    TrackablePoint that have entered the EARTrackingState::StoppedTracking state will not be included.
    
    @param OutTrackablePointList         An array that contains all the valid trackable points detected by ARCore.
  **/
  @:ufunction(BlueprintCallable) static public function GetAllTrackablePoints(OutTrackablePointList : unreal.PRef<unreal.TArray<unreal.augmentedreality.UARTrackedPoint>>) : Void;
  
  /**
    Create an ARCandidateImage object from the raw pixel data and add it to the ARCandidateImageList of the given \c UARSessionConfig object.
    
    Note that you need to restart the AR session with the \c UARSessionConfig you are adding to to make the change take effect.
    
    On ARCore platform, you can leave the PhysicalWidth and PhysicalHeight to 0 if you don't know the physical size of the image or
    the physical size is dynamic. And this function takes time to perform non-trivial image processing (20ms - 30ms),
    and should be run on a background thread.
    
    @return A \c UARCandidateImage Object pointer if the underlying ARPlatform added the candidate image at runtime successfully.
                   Return nullptr otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function AddRuntimeCandidateImageFromRawbytes(SessionConfig : unreal.augmentedreality.UARSessionConfig, ImageGrayscalePixels : unreal.Const<unreal.PRef<unreal.TArray<unreal.UInt8>>>, ImageWidth : unreal.Int32, ImageHeight : unreal.Int32, FriendlyName : unreal.FString, PhysicalWidth : unreal.Float32, @:opt("None") CandidateTexture : unreal.UTexture2D) : unreal.augmentedreality.UARCandidateImage;
  
}
