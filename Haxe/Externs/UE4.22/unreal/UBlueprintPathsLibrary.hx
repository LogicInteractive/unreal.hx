/**
 *
 * WARNING! This file was autogenerated by:
 *  _   _ _   _ __   __
 * | | | | | | |\ \ / /
 * | | | | |_| | \ V /
 * | | | |  _  | /   \
 * | |_| | | | |/ /^\ \
 *  \___/\_| |_/\/   \/
 *
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Function library to expose FPaths to Blueprints and Python

  Function signatures are preserved for the most part with adjustments made to some
  signatures to better match Blueprints / Python workflow
**/
@:glueCppIncludes("Kismet/BlueprintPathsLibrary.h")
@:uextern @:uclass extern class UBlueprintPathsLibrary extends unreal.UBlueprintFunctionLibrary {

  /**
    Should the "saved" directory structures be rooted in the user dir or relative to the "engine/game"
  **/
  @:ufunction(BlueprintCallable) static public function ShouldSaveToUserDir() : Bool;

  /**
    Returns the directory the application was launched from (useful for commandline utilities)
  **/
  @:ufunction(BlueprintCallable) static public function LaunchDir() : unreal.FString;

  /**
    Returns the base directory of the "core" engine that can be shared across
    several games or across games & mods. Shaders and base localization files
    e.g. reside in the engine directory.

    @return engine directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineDir() : unreal.FString;

  /**
    Returns the root directory for user-specific engine files. Always writable.

    @return root user directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineUserDir() : unreal.FString;

  /**
    Returns the root directory for user-specific engine files which can be shared between versions. Always writable.

    @return root user directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineVersionAgnosticUserDir() : unreal.FString;

  /**
    Returns the content directory of the "core" engine that can be shared across
    several games or across games & mods.

    @return engine content directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineContentDir() : unreal.FString;

  /**
    Returns the directory the root configuration files are located.

    @return root config directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineConfigDir() : unreal.FString;

  /**
    Returns the intermediate directory of the engine

    @return content directory
  **/
  @:ufunction(BlueprintCallable) static public function EngineIntermediateDir() : unreal.FString;

  /**
    Returns the saved directory of the engine

    @return Saved directory.
  **/
  @:ufunction(BlueprintCallable) static public function EngineSavedDir() : unreal.FString;

  /**
    Returns the plugins directory of the engine

    @return Plugins directory.
  **/
  @:ufunction(BlueprintCallable) static public function EnginePluginsDir() : unreal.FString;

  /**
    Returns the base directory enterprise directory.

    @return enterprise directory
  **/
  @:ufunction(BlueprintCallable) static public function EnterpriseDir() : unreal.FString;

  /**
    Returns the enterprise plugins directory

    @return Plugins directory.
  **/
  @:ufunction(BlueprintCallable) static public function EnterprisePluginsDir() : unreal.FString;

  /**
    Returns the enterprise FeaturePack directory

    @return FeaturePack directory.
  **/
  @:ufunction(BlueprintCallable) static public function EnterpriseFeaturePackDir() : unreal.FString;

  /**
    Returns the root directory of the engine directory tree

    @return Root directory.
  **/
  @:ufunction(BlueprintCallable) static public function RootDir() : unreal.FString;

  /**
    Returns the base directory of the current project by looking at FApp::GetProjectName().
    This is usually a subdirectory of the installation
    root directory and can be overridden on the command line to allow self
    contained mod support.

    @return base directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectDir() : unreal.FString;

  /**
    Returns the root directory for user-specific game files.

    @return game user directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectUserDir() : unreal.FString;

  /**
    Returns the content directory of the current game by looking at FApp::GetProjectName().

    @return content directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectContentDir() : unreal.FString;

  /**
    Returns the directory the root configuration files are located.

    @return root config directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectConfigDir() : unreal.FString;

  /**
    Returns the saved directory of the current game by looking at FApp::GetProjectName().

    @return saved directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectSavedDir() : unreal.FString;

  /**
    Returns the intermediate directory of the current game by looking at FApp::GetProjectName().

    @return intermediate directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectIntermediateDir() : unreal.FString;

  /**
    Returns the Shader Working Directory

    @return shader working directory
  **/
  @:ufunction(BlueprintCallable) static public function ShaderWorkingDir() : unreal.FString;

  /**
    Returns the plugins directory of the current game by looking at FApp::GetProjectName().

    @return plugins directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectPluginsDir() : unreal.FString;

  /**
    Returns the mods directory of the current project by looking at FApp::GetProjectName().

    @return mods directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectModsDir() : unreal.FString;

  /**
    * Returns true if a writable directory for downloaded data that persists across play sessions is available
  **/
  @:ufunction(BlueprintCallable) static public function HasProjectPersistentDownloadDir() : Bool;

  /**
    * Returns the writable directory for downloaded data that persists across play sessions.
  **/
  @:ufunction(BlueprintCallable) static public function ProjectPersistentDownloadDir() : unreal.FString;

  /**
    Returns the directory the engine uses to look for the source leaf ini files. This
    can't be an .ini variable for obvious reasons.

    @return source config directory
  **/
  @:ufunction(BlueprintCallable) static public function SourceConfigDir() : unreal.FString;

  /**
    Returns the directory the engine saves generated config files.

    @return config directory
  **/
  @:ufunction(BlueprintCallable) static public function GeneratedConfigDir() : unreal.FString;

  /**
    Returns the directory the engine stores sandbox output

    @return sandbox directory
  **/
  @:ufunction(BlueprintCallable) static public function SandboxesDir() : unreal.FString;

  /**
    Returns the directory the engine uses to output profiling files.

    @return log directory
  **/
  @:ufunction(BlueprintCallable) static public function ProfilingDir() : unreal.FString;

  /**
    Returns the directory the engine uses to output screenshot files.

    @return screenshot directory
  **/
  @:ufunction(BlueprintCallable) static public function ScreenShotDir() : unreal.FString;

  /**
    Returns the directory the engine uses to output BugIt files.

    @return screenshot directory
  **/
  @:ufunction(BlueprintCallable) static public function BugItDir() : unreal.FString;

  /**
    Returns the directory the engine uses to output user requested video capture files.

    @return Video capture directory
  **/
  @:ufunction(BlueprintCallable) static public function VideoCaptureDir() : unreal.FString;

  /**
    Returns the directory the engine uses to output logs. This currently can't
    be an .ini setting as the game starts logging before it can read from .ini
    files.

    @return log directory
  **/
  @:ufunction(BlueprintCallable) static public function ProjectLogDir() : unreal.FString;

  /**
    Returns the directory for automation save files
  **/
  @:ufunction(BlueprintCallable) static public function AutomationDir() : unreal.FString;

  /**
    Returns the directory for automation save files that are meant to be deleted every run
  **/
  @:ufunction(BlueprintCallable) static public function AutomationTransientDir() : unreal.FString;

  /**
    Returns the directory for automation log files
  **/
  @:ufunction(BlueprintCallable) static public function AutomationLogDir() : unreal.FString;

  /**
    Returns the directory for local files used in cloud emulation or support
  **/
  @:ufunction(BlueprintCallable) static public function CloudDir() : unreal.FString;

  /**
    Returns the directory that contains subfolders for developer-specific content
  **/
  @:ufunction(BlueprintCallable) static public function GameDevelopersDir() : unreal.FString;

  /**
    Returns the directory that contains developer-specific content for the current user
  **/
  @:ufunction(BlueprintCallable) static public function GameUserDeveloperDir() : unreal.FString;

  /**
    Returns the directory for temp files used for diffing
  **/
  @:ufunction(BlueprintCallable) static public function DiffDir() : unreal.FString;

  /**
    Returns a list of engine-specific localization paths
  **/
  @:ufunction(BlueprintCallable) static public function GetEngineLocalizationPaths() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Returns a list of editor-specific localization paths
  **/
  @:ufunction(BlueprintCallable) static public function GetEditorLocalizationPaths() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Returns a list of property name localization paths
  **/
  @:ufunction(BlueprintCallable) static public function GetPropertyNameLocalizationPaths() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Returns a list of tool tip localization paths
  **/
  @:ufunction(BlueprintCallable) static public function GetToolTipLocalizationPaths() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Returns a list of game-specific localization paths
  **/
  @:ufunction(BlueprintCallable) static public function GetGameLocalizationPaths() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Returns a list of restricted/internal folder names (without any slashes) which may be tested against full paths to determine if a path is restricted or not.
  **/
  @:ufunction(BlueprintCallable) static public function GetRestrictedFolderNames() : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>;

  /**
    Determines if supplied path uses a restricted/internal subdirectory.  Note that slashes are normalized and character case is ignored for the comparison.
  **/
  @:ufunction(BlueprintCallable) static public function IsRestrictedPath(InPath : unreal.FString) : Bool;

  /**
    Returns the saved directory that is not game specific. This is usually the same as
    EngineSavedDir().

    @return saved directory
  **/
  @:ufunction(BlueprintCallable) static public function GameAgnosticSavedDir() : unreal.FString;

  /**
    Returns the directory where engine source code files are kept
  **/
  @:ufunction(BlueprintCallable) static public function EngineSourceDir() : unreal.FString;

  /**
    Returns the directory where game source code files are kept
  **/
  @:ufunction(BlueprintCallable) static public function GameSourceDir() : unreal.FString;

  /**
    Returns the directory where feature packs are kept
  **/
  @:ufunction(BlueprintCallable) static public function FeaturePackDir() : unreal.FString;

  /**
    Checks whether the path to the project file, if any, is set.

    @return true if the path is set, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function IsProjectFilePathSet() : Bool;

  /**
    Gets the path to the project file.

    @return Project file path.
  **/
  @:ufunction(BlueprintCallable) static public function GetProjectFilePath() : unreal.FString;

  /**
    Sets the path to the project file.

    @param NewGameProjectFilePath - The project file path to set.
  **/
  @:ufunction(BlueprintCallable) static public function SetProjectFilePath(NewGameProjectFilePath : unreal.FString) : Void;

  /**
    Gets the extension for this filename.

    @param        bIncludeDot             if true, includes the leading dot in the result

    @return       the extension of this filename, or an empty string if the filename doesn't have an extension.
  **/
  @:ufunction(BlueprintCallable) static public function GetExtension(InPath : unreal.FString, bIncludeDot : Bool = false) : unreal.FString;

  /**
    Returns the filename (with extension), minus any path information.
  **/
  @:ufunction(BlueprintCallable) static public function GetCleanFilename(InPath : unreal.FString) : unreal.FString;

  /**
    Returns the same thing as GetCleanFilename, but without the extension
  **/
  @:ufunction(BlueprintCallable) static public function GetBaseFilename(InPath : unreal.FString, bRemovePath : Bool = true) : unreal.FString;

  /**
    Returns the path in front of the filename
  **/
  @:ufunction(BlueprintCallable) static public function GetPath(InPath : unreal.FString) : unreal.FString;

  /**
    Changes the extension of the given filename (does nothing if the file has no extension)
  **/
  @:ufunction(BlueprintCallable) static public function ChangeExtension(InPath : unreal.FString, InNewExtension : unreal.FString) : unreal.FString;

  /**
    Sets the extension of the given filename (like ChangeExtension, but also applies the extension if the file doesn't have one)
  **/
  @:ufunction(BlueprintCallable) static public function SetExtension(InPath : unreal.FString, InNewExtension : unreal.FString) : unreal.FString;

  /**
    Returns true if this file was found, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function FileExists(InPath : unreal.FString) : Bool;

  /**
    Returns true if this directory was found, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function DirectoryExists(InPath : unreal.FString) : Bool;

  /**
    Returns true if this path represents a root drive or volume
  **/
  @:ufunction(BlueprintCallable) static public function IsDrive(InPath : unreal.FString) : Bool;

  /**
    Returns true if this path is relative to another path
  **/
  @:ufunction(BlueprintCallable) static public function IsRelative(InPath : unreal.FString) : Bool;

  /**
    Convert all / and \ to TEXT("/")
  **/
  @:ufunction(BlueprintCallable) static public function NormalizeFilename(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Void;

  /**
    Checks if two paths are the same.

    @param PathA First path to check.
    @param PathB Second path to check.

    @returns True if both paths are the same. False otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function IsSamePath(PathA : unreal.FString, PathB : unreal.FString) : Bool;

  /**
    Normalize all / and \ to TEXT("/") and remove any trailing TEXT("/") if the character before that is not a TEXT("/") or a colon
  **/
  @:ufunction(BlueprintCallable) static public function NormalizeDirectoryName(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Void;

  /**
    Takes a fully pathed string and eliminates relative pathing (eg: annihilates ".." with the adjacent directory).
    Assumes all slashes have been converted to TEXT('/').
    For example, takes the string:
          BaseDirectory/SomeDirectory/../SomeOtherDirectory/Filename.ext
    and converts it to:
          BaseDirectory/SomeOtherDirectory/Filename.ext
  **/
  @:ufunction(BlueprintCallable) static public function CollapseRelativeDirectories(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Bool;

  /**
    Removes duplicate slashes in paths.
    Assumes all slashes have been converted to TEXT('/').
    For example, takes the string:
          BaseDirectory/SomeDirectory//SomeOtherDirectory////Filename.ext
    and converts it to:
          BaseDirectory/SomeDirectory/SomeOtherDirectory/Filename.ext
  **/
  @:ufunction(BlueprintCallable) static public function RemoveDuplicateSlashes(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Void;

  /**
    Make fully standard "Unreal" pathname:
       - Normalizes path separators [NormalizeFilename]
       - Removes extraneous separators  [NormalizeDirectoryName, as well removing adjacent separators]
       - Collapses internal ..'s
       - Makes relative to Engine\Binaries\<Platform> (will ALWAYS start with ..\..\..)
  **/
  @:ufunction(BlueprintCallable) static public function MakeStandardFilename(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Void;

  /**
    Takes an "Unreal" pathname and converts it to a platform filename.
  **/
  @:ufunction(BlueprintCallable) static public function MakePlatformFilename(InPath : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Void;

  /**
    Assuming both paths (or filenames) are relative to the same base dir, converts InPath to be relative to InRelativeTo

    @param InPath Path to change to be relative to InRelativeTo
    @param InRelativeTo Path to use as the new relative base
    @param InPath New path relative to InRelativeTo
    @returns true if OutPath was changed to be relative
  **/
  @:ufunction(BlueprintCallable) static public function MakePathRelativeTo(InPath : unreal.FString, InRelativeTo : unreal.FString, OutPath : unreal.PRef<unreal.FString>) : Bool;

  /**
    Converts a relative path name to a fully qualified name relative to the specified BasePath.
    BasePath will be the process BaseDir() if not BasePath is given
  **/
  @:ufunction(BlueprintCallable) static public function ConvertRelativePathToFull(InPath : unreal.FString, InBasePath : unreal.FString) : unreal.FString;

  /**
    Converts a normal path to a sandbox path (in Saved/Sandboxes).

    @param InSandboxName The name of the sandbox.
  **/
  @:ufunction(BlueprintCallable) static public function ConvertToSandboxPath(InPath : unreal.FString, InSandboxName : unreal.FString) : unreal.FString;

  /**
    Converts a sandbox (in Saved/Sandboxes) path to a normal path.

    @param InSandboxName The name of the sandbox.
  **/
  @:ufunction(BlueprintCallable) static public function ConvertFromSandboxPath(InPath : unreal.FString, InSandboxName : unreal.FString) : unreal.FString;

  /**
    Creates a temporary filename with the specified prefix.

    @param Path The file pathname.
    @param Prefix The file prefix.
    @param Extension File extension ('.' required).
  **/
  @:ufunction(BlueprintCallable) static public function CreateTempFilename(Path : unreal.FString, Prefix : unreal.FString, @:opt(".tmp") ?Extension : unreal.FString ) : unreal.FString;

  /**
    Returns a string containing all invalid characters as dictated by the operating system
  **/
  @:ufunction(BlueprintCallable) static public function GetInvalidFileSystemChars() : unreal.FString;

  /**
    Returns a string that is safe to use as a filename because all items in
    GetInvalidFileSystemChars() are removed

    Optionally specify the character to replace invalid characters with

    @param  InString
    @param  InReplacementChar
  **/
  @:ufunction(BlueprintCallable) static public function MakeValidFileName(InString : unreal.FString, InReplacementChar : unreal.FString) : unreal.FString;

  /**
    Validates that the parts that make up the path contain no invalid characters as dictated by the operating system
    Note that this is a different set of restrictions to those imposed by FPackageName

    @param InPath - path to validate
    @param OutReason - If validation fails, this is filled with the failure reason
    @param bDidSucceed - Whether the path could be validated
  **/
  @:ufunction(BlueprintCallable) static public function ValidatePath(InPath : unreal.FString, bDidSucceed : Bool, OutReason : unreal.PRef<unreal.FText>) : Void;

  /**
    Parses a fully qualified or relative filename into its components (filename, path, extension).

    @param        Path            [out] receives the value of the path portion of the input string
    @param        Filename        [out] receives the value of the filename portion of the input string
    @param        Extension       [out] receives the value of the extension portion of the input string
  **/
  @:ufunction(BlueprintCallable) static public function Split(InPath : unreal.FString, PathPart : unreal.PRef<unreal.FString>, FilenamePart : unreal.PRef<unreal.FString>, ExtensionPart : unreal.PRef<unreal.FString>) : Void;

  /**
    Gets the relative path to get from BaseDir to RootDirectory
  **/
  @:ufunction(BlueprintCallable) static public function GetRelativePathToRoot() : unreal.FString;

  /**
    Combine two or more Paths into one single Path
  **/
  @:ufunction(BlueprintCallable) static public function Combine(InPaths : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>) : unreal.FString;

}
