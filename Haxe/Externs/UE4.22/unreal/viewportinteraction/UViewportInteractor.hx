/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.viewportinteraction;

/**
  Represents the interactor in the world
**/
@:umodule("ViewportInteraction")
@:glueCppIncludes("ViewportInteractor.h")
@:uextern @:uclass extern class UViewportInteractor extends unreal.UObject {
  
  /**
    Gets the world interaction
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldInteraction() : unreal.viewportinteraction.UViewportWorldInteraction;
  
  /**
    Gets the paired interactor assigned by the world interaction, can return null when there is no other interactor
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetOtherInteractor() : unreal.viewportinteraction.UViewportInteractor;
  
  /**
    Whenever the ViewportWorldInteraction is shut down, the interacts will shut down as well
  **/
  @:ufunction(BlueprintNativeEvent) public function Shutdown() : Void;
  
  /**
    Update for this interactor called by the ViewportWorldInteraction
  **/
  @:ufunction(BlueprintNativeEvent) public function Tick(DeltaTime : unreal.Float32) : Void;
  
  /**
    Gets the world transform of this interactor
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTransform() : unreal.FTransform;
  
  /**
    Gets the current interactor data dragging mode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDraggingMode() : unreal.viewportinteraction.EViewportInteractionDraggingMode;
  
  /**
    Gets the start and end point of the laser pointer for the specified hand
    
    @param HandIndex                             Index of the hand to use
    @param LasertPointerStart    (Out) The start location of the laser pointer in world space
    @param LasertPointerEnd              (Out) The end location of the laser pointer in world space
    @param bEvenIfBlocked                If true, returns a laser pointer even if the hand has UI in front of it (defaults to false)
    @param LaserLengthOverride   If zero the default laser length (VREdMode::GetLaserLength) is used
    
    @return      True if we have motion controller data for this hand and could return a valid result
  **/
  @:ufunction(BlueprintCallable) @:final public function GetLaserPointer(LaserPointerStart : unreal.PRef<unreal.FVector>, LaserPointerEnd : unreal.PRef<unreal.FVector>, bEvenIfBlocked : Bool = false, LaserLengthOverride : unreal.Float32 = 0.000000) : Bool;
  
  /**
    Creates a hand transform and forward vector for a laser pointer for a given hand
    
    @param HandIndex                     Index of the hand to use
    @param OutHandTransform      The created hand transform
    @param OutForwardVector      The forward vector of the hand
    
    @return      True if we have motion controller data for this hand and could return a valid result
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetTransformAndForwardVector(OutHandTransform : unreal.PRef<unreal.FTransform>, OutForwardVector : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    Gets the interactor laser hover location
  **/
  @:ufunction(BlueprintCallable) @:final public function GetHoverLocation() : unreal.FVector;
  
  /**
    If the interactor laser is currently hovering over a gizmo handle
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsHoveringOverGizmo() : Bool;
  
  /**
    Sets the current dragging mode for this interactor
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDraggingMode(NewDraggingMode : unreal.Const<unreal.viewportinteraction.EViewportInteractionDraggingMode>) : Void;
  
  /**
    To be overridden. Called by HandleInputKey before delegates and default input implementation
  **/
  @:ufunction(BlueprintImplementableEvent) private function HandleInputKey_BP(Action : unreal.Const<unreal.PRef<unreal.viewportinteraction.FViewportActionKeyInput>>, Key : unreal.Const<unreal.inputcore.FKey>, Event : unreal.Const<unreal.EInputEvent>, bOutWasHandled : Bool) : Void;
  
  /**
    To be overridden. Called by HandleInputAxis before delegates and default input implementation
  **/
  @:ufunction(BlueprintImplementableEvent) private function HandleInputAxis_BP(Action : unreal.Const<unreal.PRef<unreal.viewportinteraction.FViewportActionKeyInput>>, Key : unreal.Const<unreal.inputcore.FKey>, Delta : unreal.Float32, DeltaTime : unreal.Float32, bOutWasHandled : Bool) : Void;
  
  /**
    The paired interactor by the world interaction
  **/
  @:uproperty private var OtherInteractor : unreal.viewportinteraction.UViewportInteractor;
  
  /**
    The owning world interaction
  **/
  @:uproperty private var WorldInteraction : unreal.viewportinteraction.UViewportWorldInteraction;
  
}
