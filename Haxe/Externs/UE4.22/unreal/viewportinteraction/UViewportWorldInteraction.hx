/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.viewportinteraction;

@:umodule("ViewportInteraction")
@:glueCppIncludes("ViewportWorldInteraction.h")
@:uextern @:uclass extern class UViewportWorldInteraction extends unreal.editor.UEditorWorldExtension {
  
  /**
    Adds interactor to the worldinteraction
  **/
  @:ufunction(BlueprintCallable) @:final public function AddInteractor(Interactor : unreal.viewportinteraction.UViewportInteractor) : Void;
  
  /**
    Removes interactor from the worldinteraction and removes the interactor from its paired interactor if any
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveInteractor(Interactor : unreal.viewportinteraction.UViewportInteractor) : Void;
  
  /**
    Adds an actor to the list of actors to never allow an interactor to hit in the scene.  No selection.  No hover.
    There's no need to remove actors from this list.  They'll expire from it automatically when destroyed.
    
    @param       ActorToExcludeFromHitTests      The actor that should be forever excluded from hit tests
  **/
  @:ufunction(BlueprintCallable) @:final public function AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests : unreal.AActor) : Void;
  
  /**
    Gets the world space transform of the calibrated VR room origin.  When using a seated VR device, this will feel like the
          camera's world transform (before any HMD positional or rotation adjustments are applied.)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetRoomTransform() : unreal.FTransform;
  
  /**
    Gets the transform of the viewport / user's HMD in room space
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetRoomSpaceHeadTransform() : unreal.FTransform;
  
  /**
    Gets the transform of the viewport / user's HMD in world space
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetHeadTransform() : unreal.FTransform;
  
  /**
    Sets a new transform for the room so that the HMD is aligned to the new transform.
                  The Head is kept level to the ground and only rotated on the yaw
  **/
  @:ufunction(BlueprintCallable) @:final public function SetHeadTransform(NewHeadTransform : unreal.Const<unreal.PRef<unreal.FTransform>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetRoomTransformForNextFrame(NewRoomTransform : unreal.Const<unreal.PRef<unreal.FTransform>>) : Void;
  
  /**
    Gets the world scale factor, which can be multiplied by a scale vector to convert to room space
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldScaleFactor() : unreal.Float32;
  
  /**
    Gets the transform gizmo actor, or returns null if we currently don't have one
  **/
  @:ufunction(BlueprintCallable) @:final public function GetTransformGizmoActor() : unreal.viewportinteraction.ABaseTransformGizmo;
  
  /**
    Gets all the interactors
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetInteractors() : unreal.Const<unreal.PRef<unreal.TArray<unreal.viewportinteraction.UViewportInteractor>>>;
  
}
