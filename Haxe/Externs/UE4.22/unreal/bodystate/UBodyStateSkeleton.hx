/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.bodystate;

/**
  Body Skeleton data, all bones are expected in component space
**/
@:umodule("BodyState")
@:glueCppIncludes("Skeleton/BodyStateSkeleton.h")
@:uextern @:uclass extern class UBodyStateSkeleton extends unreal.UObject {
  
  /**
    Used for reference point calibration e.g. hydra base origin
  **/
  @:uproperty public var RootOffset : unreal.FTransform;
  
  /**
    Tracking Tags that this skeleton has currently inherited.
  **/
  @:uproperty public var TrackingTags : unreal.TArray<unreal.FString>;
  
  /**
    Note: Storage of actual bone data should be here
  **/
  @:uproperty public var Bones : unreal.TArray<unreal.bodystate.UBodyStateBone>;
  
  /**
    Id issued to this skeleton, useful for getting device information
  **/
  @:uproperty public var SkeletonId : unreal.Int32;
  
  /**
    Human readable name, taken from device config, useful for debug
  **/
  @:uproperty public var Name : unreal.FString;
  
  /**
    Root
  **/
  @:ufunction(BlueprintCallable) @:final public function RootBone() : unreal.bodystate.UBodyStateBone;
  
  /**
    Get a structured convenience wrapper around left arm bones
  **/
  @:ufunction(BlueprintCallable) @:final public function LeftArm() : unreal.bodystate.UBodyStateArm;
  
  /**
    Get a structured convenience wrapper around right arm bones
  **/
  @:ufunction(BlueprintCallable) @:final public function RightArm() : unreal.bodystate.UBodyStateArm;
  
  /**
    Spine & Head
  **/
  @:ufunction(BlueprintCallable) @:final public function Head() : unreal.bodystate.UBodyStateBone;
  
  /**
    Get Bone data by enum
  **/
  @:ufunction(BlueprintCallable) @:final public function BoneForEnum(Bone : unreal.bodystate.EBodyStateBasicBoneType) : unreal.bodystate.UBodyStateBone;
  
  /**
    Get Bone data by name matching
  **/
  @:ufunction(BlueprintCallable) @:final public function BoneNamed(InName : unreal.FString) : unreal.bodystate.UBodyStateBone;
  
  /**
    Setting Bone Data
  **/
  @:ufunction(BlueprintCallable) @:final public function ResetToDefaultSkeleton() : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDataForBone(BoneData : unreal.Const<unreal.PRef<unreal.bodystate.FBodyStateBoneData>>, Bone : unreal.bodystate.EBodyStateBasicBoneType) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetTransformForBone(Transform : unreal.Const<unreal.PRef<unreal.FTransform>>, Bone : unreal.bodystate.EBodyStateBasicBoneType) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMetaForBone(BoneMeta : unreal.Const<unreal.PRef<unreal.bodystate.FBodyStateBoneMeta>>, Bone : unreal.bodystate.EBodyStateBasicBoneType) : Void;
  @:ufunction(BlueprintCallable) @:final public function ChangeBasis(PreBase : unreal.Const<unreal.PRef<unreal.FRotator>>, PostBase : unreal.Const<unreal.PRef<unreal.FRotator>>, AdjustVectors : Bool = true) : Void;
  
  /**
    Conversion
  **/
  @:ufunction(BlueprintCallable) @:final public function GetMinimalNamedSkeletonData() : unreal.bodystate.FNamedSkeletonData;
  
  /**
    key replication getter
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFromNamedSkeletonData(NamedSkeletonData : unreal.Const<unreal.PRef<unreal.bodystate.FNamedSkeletonData>>) : Void;
  
  /**
    key replication setter
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFromOtherSkeleton(Other : unreal.bodystate.UBodyStateSkeleton) : Void;
  
  /**
    Copies only bones that are tracked from the other skeleton
  **/
  @:ufunction(BlueprintCallable) @:final public function MergeFromOtherSkeleton(Other : unreal.bodystate.UBodyStateSkeleton) : Void;
  
  /**
    Replication
  **/
  @:ufunction(Server) public function ServerUpdateBodyState(InBodyStateSkeleton : unreal.Const<unreal.bodystate.FNamedSkeletonData>) : Void;
  @:ufunction(NetMulticast) public function Multi_UpdateBodyState(InBodyStateSkeleton : unreal.Const<unreal.bodystate.FNamedSkeletonData>) : Void;
  
}
