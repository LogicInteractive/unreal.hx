/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  A light component which emits light from a single point equally in all directions.
**/
@:glueCppIncludes("Components/PointLightComponent.h")
@:uextern @:uclass extern class UPointLightComponent extends unreal.ULightComponent {
  
  /**
    The Lightmass settings for this object.
  **/
  @:uproperty public var LightmassSettings : unreal.FLightmassPointLightSettings;
  
  /**
    Length of light source shape.
    Note that light sources shapes which intersect shadow casting geometry can cause shadowing artifacts.
  **/
  @:uproperty public var SourceLength : unreal.Float32;
  
  /**
    Soft radius of light source shape.
    Note that light sources shapes which intersect shadow casting geometry can cause shadowing artifacts.
  **/
  @:uproperty public var SoftSourceRadius : unreal.Float32;
  
  /**
    Radius of light source shape.
    Note that light sources shapes which intersect shadow casting geometry can cause shadowing artifacts.
  **/
  @:uproperty public var SourceRadius : unreal.Float32;
  
  /**
    Controls the radial falloff of the light when UseInverseSquaredFalloff is disabled.
    2 is almost linear and very unrealistic and around 8 it looks reasonable.
    With large exponents, the light has contribution to only a small area of its influence radius but still costs the same as low exponents.
  **/
  @:uproperty public var LightFalloffExponent : unreal.Float32;
  
  /**
    Whether to use physically based inverse squared distance falloff, where AttenuationRadius is only clamping the light's contribution.
    Disabling inverse squared falloff can be useful when placing fill lights (don't want a super bright spot near the light).
    When enabled, the light's Intensity is in units of lumens, where 1700 lumens is a 100W lightbulb.
    When disabled, the light's Intensity is a brightness scale.
  **/
  @:uproperty public var bUseInverseSquaredFalloff : Bool;
  
  /**
    Bounds the light's visible influence.
    This clamping of the light's influence is not physically correct but very important for performance, larger lights cost more.
  **/
  @:uproperty public var AttenuationRadius : unreal.Float32;
  @:deprecated @:uproperty public var Radius_DEPRECATED : unreal.Float32;
  
  /**
    Units used for the intensity.
    The peak luminous intensity is measured in candelas,
    while the luminous power is measured in lumens.
  **/
  @:uproperty public var IntensityUnits : unreal.ELightUnits;
  @:ufunction(BlueprintCallable) @:final public function SetAttenuationRadius(NewRadius : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetLightFalloffExponent(NewLightFalloffExponent : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSourceRadius(bNewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSoftSourceRadius(bNewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSourceLength(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) static public function GetUnitsConversionFactor(SrcUnits : unreal.ELightUnits, TargetUnits : unreal.ELightUnits, CosHalfConeAngle : unreal.Float32 = -1.000000) : unreal.Float32;
  
}
