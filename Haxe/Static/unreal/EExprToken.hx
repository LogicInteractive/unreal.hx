package unreal;

@:enum
@:uextern
abstract EExprToken(UInt8) from UInt8 {
	// Variable references.
	var EX_LocalVariable		= 0x00;	// A local variable.
	var EX_InstanceVariable		= 0x01;	// An object variable.
	var EX_DefaultVariable		= 0x02; // Default variable for a class context.
	//						= 0x03,
	var EX_Return				= 0x04;	// Return from function.
	//						= 0x05,
	var EX_Jump					= 0x06;	// Goto a local address in code.
	var EX_JumpIfNot			= 0x07;	// Goto if not expression.
	//						= 0x08,
	var EX_Assert				= 0x09;	// Assertion.
	//						= 0x0A,
	var EX_Nothing				= 0x0B;	// No operation.
	//						= 0x0C,
	//						= 0x0D,
	//						= 0x0E,
	var EX_Let					= 0x0F;	// Assign an arbitrary size value to a variable.
	//						= 0x10,
	//						= 0x11,
	var EX_ClassContext			= 0x12;	// Class default object context.
	var EX_MetaCast             = 0x13; // Metaclass cast.
	var EX_LetBool				= 0x14; // Let boolean variable.
	var EX_EndParmValue			= 0x15;	// end of default value for optional function parameter
	var EX_EndFunctionParms		= 0x16;	// End of function call parameters.
	var EX_Self					= 0x17;	// Self object.
	var EX_Skip					= 0x18;	// Skippable expression.
	var EX_Context				= 0x19;	// Call a function through an object context.
	var EX_Context_FailSilent	= 0x1A; // Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).
	var EX_VirtualFunction		= 0x1B;	// A function call with parameters.
	var EX_FinalFunction		= 0x1C;	// A prebound function call with parameters.
	var EX_IntConst				= 0x1D;	// Int constant.
	var EX_FloatConst			= 0x1E;	// Floating point constant.
	var EX_StringConst			= 0x1F;	// String constant.
	var EX_ObjectConst		    = 0x20;	// An object constant.
	var EX_NameConst			= 0x21;	// A name constant.
	var EX_RotationConst		= 0x22;	// A rotation constant.
	var EX_VectorConst			= 0x23;	// A vector constant.
	var EX_ByteConst			= 0x24;	// A byte constant.
	var EX_IntZero				= 0x25;	// Zero.
	var EX_IntOne				= 0x26;	// One.
	var EX_True					= 0x27;	// Bool True.
	var EX_False				= 0x28;	// Bool False.
	var EX_TextConst			= 0x29; // FText constant
	var EX_NoObject				= 0x2A;	// NoObject.
	var EX_TransformConst		= 0x2B; // A transform constant
	var EX_IntConstByte			= 0x2C;	// Int constant that requires 1 byte.
	var EX_NoInterface			= 0x2D; // A null interface (similar to EX_NoObject, but for interfaces)
	var EX_DynamicCast			= 0x2E;	// Safe dynamic class casting.
	var EX_StructConst			= 0x2F; // An arbitrary UStruct constant
	var EX_EndStructConst		= 0x30; // End of UStruct constant
	var EX_SetArray				= 0x31; // Set the value of arbitrary array
	var EX_EndArray				= 0x32;
	//						= 0x33;
	var EX_UnicodeStringConst   = 0x34; // Unicode string constant.
	var EX_Int64Const			= 0x35;	// 64-bit integer constant.
	var EX_UInt64Const			= 0x36;	// 64-bit unsigned integer constant.
	//						= 0x37;
	var EX_PrimitiveCast		= 0x38;	// A casting operator for primitives which reads the type as the subsequent byte
	var EX_SetSet				= 0x39;
	var EX_EndSet				= 0x3A;
	var EX_SetMap				= 0x3B;
	var EX_EndMap				= 0x3C;
	var EX_SetConst				= 0x3D;
	var EX_EndSetConst			= 0x3E;
	var EX_MapConst				= 0x3F;
	var EX_EndMapConst			= 0x40;
	//						= 0x41;
	var EX_StructMemberContext	= 0x42; // Context expression to address a property within a struct
	var EX_LetMulticastDelegate	= 0x43; // Assignment to a multi-cast delegate
	var EX_LetDelegate			= 0x44; // Assignment to a delegate
	//						= 0x45; 
	//						= 0x46; // CST_ObjectToInterface
	//						= 0x47; // CST_ObjectToBool
	var EX_LocalOutVariable		= 0x48; // local out (pass by reference) function parameter
	//						= 0x49; // CST_InterfaceToBool
	var EX_DeprecatedOp4A		= 0x4A;
	var EX_InstanceDelegate		= 0x4B;	// const reference to a delegate or normal function object
	var EX_PushExecutionFlow	= 0x4C; // push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed.   Execution continues on normally and doesn't change to the pushed address.
	var EX_PopExecutionFlow		= 0x4D; // continue execution at the last address previously pushed onto the execution flow stack.
	var EX_ComputedJump			= 0x4E;	// Goto a local address in code, specified by an integer value.
	var EX_PopExecutionFlowIfNot = 0x4F; // continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.
	var EX_Breakpoint			= 0x50; // Breakpoint.  Only observed in the editor, otherwise it behaves like EX_Nothing.
	var EX_InterfaceContext		= 0x51;	// Call a function through a native interface variable
	var EX_ObjToInterfaceCast   = 0x52;	// Converting an object reference to native interface variable
	var EX_EndOfScript			= 0x53; // Last byte in script code
	var EX_CrossInterfaceCast	= 0x54; // Converting an interface variable reference to native interface variable
	var EX_InterfaceToObjCast   = 0x55; // Converting an interface variable reference to an object
	//						= 0x56;
	//						= 0x57;
	//						= 0x58;
	//						= 0x59;
	var EX_WireTracepoint		= 0x5A; // Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.
	var EX_SkipOffsetConst		= 0x5B; // A CodeSizeSkipOffset constant
	var EX_AddMulticastDelegate = 0x5C; // Adds a delegate to a multicast delegate's targets
	var EX_ClearMulticastDelegate = 0x5D; // Clears all delegates in a multicast target
	var EX_Tracepoint			= 0x5E; // Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.
	var EX_LetObj				= 0x5F;	// assign to any object ref pointer
	var EX_LetWeakObjPtr		= 0x60; // assign to a weak object pointer
	var EX_BindDelegate			= 0x61; // bind object and name to delegate
	var EX_RemoveMulticastDelegate = 0x62; // Remove a delegate from a multicast delegate's targets
	var EX_CallMulticastDelegate = 0x63; // Call multicast delegate
	var EX_LetValueOnPersistentFrame = 0x64;
	var EX_ArrayConst			= 0x65;
	var EX_EndArrayConst		= 0x66;
	var EX_AssetConst			= 0x67;
	var EX_CallMath				= 0x68; // static pure function from on local call space
	var EX_SwitchValue			= 0x69;
	var EX_InstrumentationEvent	= 0x6A; // Instrumentation event
	var EX_ArrayGetByRef		= 0x6B;
	var EX_Max					= 0x100;
}